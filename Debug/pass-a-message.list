
pass-a-message.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a78  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008d28  08008d28  00018d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e40  08008e40  00018e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008e44  08008e44  00018e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08008e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004b98  24000078  08008ec0  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c10  08008ec0  00024c10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031dcc  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004fd3  00000000  00000000  00051e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018c8  00000000  00000000  00056e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001730  00000000  00000000  00058710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003480a  00000000  00000000  00059e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f6b6  00000000  00000000  0008e64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014bb18  00000000  00000000  000add00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f9818  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006d68  00000000  00000000  001f986c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008d10 	.word	0x08008d10

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	08008d10 	.word	0x08008d10

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Listener */
  ListenerHandle = osThreadNew(StartListener, NULL, &Listener_attributes);
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <MX_FREERTOS_Init+0x28>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <MX_FREERTOS_Init+0x2c>)
 80005f2:	f005 f9a1 	bl	8005938 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of Speaker */
  SpeakerHandle = osThreadNew(StartSpeaker, NULL, &Speaker_attributes);
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <MX_FREERTOS_Init+0x34>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <MX_FREERTOS_Init+0x38>)
 8000602:	f005 f999 	bl	8005938 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <MX_FREERTOS_Init+0x3c>)
 800060a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	08008d54 	.word	0x08008d54
 8000614:	08000629 	.word	0x08000629
 8000618:	24004ad8 	.word	0x24004ad8
 800061c:	08008d78 	.word	0x08008d78
 8000620:	080006b1 	.word	0x080006b1
 8000624:	24004a70 	.word	0x24004a70

08000628 <StartListener>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartListener */
void StartListener(void *argument)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09c      	sub	sp, #112	; 0x70
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartListener */
	char local_buffer[RX_BUFFER_LENGTH];
	uint8_t local_pointer = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	/* Infinite loop */
  for(;;)
  {
	 HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3,rx_buffer ,1, 100);
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	2201      	movs	r2, #1
 800063a:	491b      	ldr	r1, [pc, #108]	; (80006a8 <StartListener+0x80>)
 800063c:	481b      	ldr	r0, [pc, #108]	; (80006ac <StartListener+0x84>)
 800063e:	f003 ff03 	bl	8004448 <HAL_UART_Receive>
 8000642:	4603      	mov	r3, r0
 8000644:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	 if(ret == HAL_OK){
 8000648:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800064c:	2b00      	cmp	r3, #0
 800064e:	d126      	bne.n	800069e <StartListener+0x76>
		 local_buffer[local_pointer] = rx_buffer[0];
 8000650:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <StartListener+0x80>)
 8000656:	7812      	ldrb	r2, [r2, #0]
 8000658:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800065c:	440b      	add	r3, r1
 800065e:	f803 2c68 	strb.w	r2, [r3, #-104]
		 if(local_buffer[local_pointer] == '\n' || local_buffer[local_pointer] == '\r'){
 8000662:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000666:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800066a:	4413      	add	r3, r2
 800066c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000670:	2b0a      	cmp	r3, #10
 8000672:	d014      	beq.n	800069e <StartListener+0x76>
 8000674:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000678:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800067c:	4413      	add	r3, r2
 800067e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000682:	2b0d      	cmp	r3, #13
 8000684:	d00b      	beq.n	800069e <StartListener+0x76>

		 }else{
			 local_pointer++;
 8000686:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800068a:	3301      	adds	r3, #1
 800068c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			 if(local_pointer > RX_BUFFER_LENGTH){
 8000690:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000694:	2b64      	cmp	r3, #100	; 0x64
 8000696:	d902      	bls.n	800069e <StartListener+0x76>
				 local_pointer = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			 }
		 }
	 }
    osDelay(100);
 800069e:	2064      	movs	r0, #100	; 0x64
 80006a0:	f005 f9dc 	bl	8005a5c <osDelay>
  {
 80006a4:	e7c7      	b.n	8000636 <StartListener+0xe>
 80006a6:	bf00      	nop
 80006a8:	24004a74 	.word	0x24004a74
 80006ac:	24004b2c 	.word	0x24004b2c

080006b0 <StartSpeaker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSpeaker */
void StartSpeaker(void *argument)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSpeaker */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f005 f9cf 	bl	8005a5c <osDelay>
 80006be:	e7fb      	b.n	80006b8 <StartSpeaker+0x8>

080006c0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08e      	sub	sp, #56	; 0x38
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b80      	ldr	r3, [pc, #512]	; (80008d8 <MX_GPIO_Init+0x218>)
 80006d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006dc:	4a7e      	ldr	r2, [pc, #504]	; (80008d8 <MX_GPIO_Init+0x218>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e6:	4b7c      	ldr	r3, [pc, #496]	; (80008d8 <MX_GPIO_Init+0x218>)
 80006e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	623b      	str	r3, [r7, #32]
 80006f2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f4:	4b78      	ldr	r3, [pc, #480]	; (80008d8 <MX_GPIO_Init+0x218>)
 80006f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006fa:	4a77      	ldr	r2, [pc, #476]	; (80008d8 <MX_GPIO_Init+0x218>)
 80006fc:	f043 0320 	orr.w	r3, r3, #32
 8000700:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000704:	4b74      	ldr	r3, [pc, #464]	; (80008d8 <MX_GPIO_Init+0x218>)
 8000706:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	61fb      	str	r3, [r7, #28]
 8000710:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	4b71      	ldr	r3, [pc, #452]	; (80008d8 <MX_GPIO_Init+0x218>)
 8000714:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000718:	4a6f      	ldr	r2, [pc, #444]	; (80008d8 <MX_GPIO_Init+0x218>)
 800071a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000722:	4b6d      	ldr	r3, [pc, #436]	; (80008d8 <MX_GPIO_Init+0x218>)
 8000724:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072c:	61bb      	str	r3, [r7, #24]
 800072e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000730:	4b69      	ldr	r3, [pc, #420]	; (80008d8 <MX_GPIO_Init+0x218>)
 8000732:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000736:	4a68      	ldr	r2, [pc, #416]	; (80008d8 <MX_GPIO_Init+0x218>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000740:	4b65      	ldr	r3, [pc, #404]	; (80008d8 <MX_GPIO_Init+0x218>)
 8000742:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	4b62      	ldr	r3, [pc, #392]	; (80008d8 <MX_GPIO_Init+0x218>)
 8000750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000754:	4a60      	ldr	r2, [pc, #384]	; (80008d8 <MX_GPIO_Init+0x218>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <MX_GPIO_Init+0x218>)
 8000760:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000764:	f003 0308 	and.w	r3, r3, #8
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800076c:	4b5a      	ldr	r3, [pc, #360]	; (80008d8 <MX_GPIO_Init+0x218>)
 800076e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000772:	4a59      	ldr	r2, [pc, #356]	; (80008d8 <MX_GPIO_Init+0x218>)
 8000774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000778:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800077c:	4b56      	ldr	r3, [pc, #344]	; (80008d8 <MX_GPIO_Init+0x218>)
 800077e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b53      	ldr	r3, [pc, #332]	; (80008d8 <MX_GPIO_Init+0x218>)
 800078c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000790:	4a51      	ldr	r2, [pc, #324]	; (80008d8 <MX_GPIO_Init+0x218>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800079a:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <MX_GPIO_Init+0x218>)
 800079c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a8:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <MX_GPIO_Init+0x218>)
 80007aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ae:	4a4a      	ldr	r2, [pc, #296]	; (80008d8 <MX_GPIO_Init+0x218>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007b8:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <MX_GPIO_Init+0x218>)
 80007ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007cc:	4843      	ldr	r0, [pc, #268]	; (80008dc <MX_GPIO_Init+0x21c>)
 80007ce:	f000 ff07 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f244 0101 	movw	r1, #16385	; 0x4001
 80007d8:	4841      	ldr	r0, [pc, #260]	; (80008e0 <MX_GPIO_Init+0x220>)
 80007da:	f000 ff01 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2102      	movs	r1, #2
 80007e2:	4840      	ldr	r0, [pc, #256]	; (80008e4 <MX_GPIO_Init+0x224>)
 80007e4:	f000 fefc 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	483a      	ldr	r0, [pc, #232]	; (80008e8 <MX_GPIO_Init+0x228>)
 80007fe:	f000 fd3f 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	4619      	mov	r1, r3
 800081a:	4830      	ldr	r0, [pc, #192]	; (80008dc <MX_GPIO_Init+0x21c>)
 800081c:	f000 fd30 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000820:	f244 0301 	movw	r3, #16385	; 0x4001
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	4829      	ldr	r0, [pc, #164]	; (80008e0 <MX_GPIO_Init+0x220>)
 800083a:	f000 fd21 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000842:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000850:	4619      	mov	r1, r3
 8000852:	4826      	ldr	r0, [pc, #152]	; (80008ec <MX_GPIO_Init+0x22c>)
 8000854:	f000 fd14 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4619      	mov	r1, r3
 800086c:	4820      	ldr	r0, [pc, #128]	; (80008f0 <MX_GPIO_Init+0x230>)
 800086e:	f000 fd07 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000884:	230a      	movs	r3, #10
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	4818      	ldr	r0, [pc, #96]	; (80008f0 <MX_GPIO_Init+0x230>)
 8000890:	f000 fcf6 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000894:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	4619      	mov	r1, r3
 80008ac:	4810      	ldr	r0, [pc, #64]	; (80008f0 <MX_GPIO_Init+0x230>)
 80008ae:	f000 fce7 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b2:	2302      	movs	r3, #2
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	4619      	mov	r1, r3
 80008c8:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_GPIO_Init+0x224>)
 80008ca:	f000 fcd9 	bl	8001280 <HAL_GPIO_Init>

}
 80008ce:	bf00      	nop
 80008d0:	3738      	adds	r7, #56	; 0x38
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	58024400 	.word	0x58024400
 80008dc:	58021400 	.word	0x58021400
 80008e0:	58020400 	.word	0x58020400
 80008e4:	58021000 	.word	0x58021000
 80008e8:	58020800 	.word	0x58020800
 80008ec:	58021800 	.word	0x58021800
 80008f0:	58020000 	.word	0x58020000

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f8:	f000 fb86 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fc:	f000 f812 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000900:	f7ff fede 	bl	80006c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000904:	f000 fa9c 	bl	8000e40 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000908:	f000 fb4c 	bl	8000fa4 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <main+0x2c>)
 800090e:	f000 f88f 	bl	8000a30 <RetargetInit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000912:	f004 ffc7 	bl	80058a4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000916:	f7ff fe67 	bl	80005e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800091a:	f004 ffe7 	bl	80058ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091e:	e7fe      	b.n	800091e <main+0x2a>
 8000920:	24004b2c 	.word	0x24004b2c

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	; 0x70
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	224c      	movs	r2, #76	; 0x4c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f007 fe63 	bl	80085fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2220      	movs	r2, #32
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f007 fe5d 	bl	80085fe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000944:	2004      	movs	r0, #4
 8000946:	f000 fe65 	bl	8001614 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <SystemClock_Config+0xd8>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <SystemClock_Config+0xd8>)
 8000954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <SystemClock_Config+0xd8>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000966:	bf00      	nop
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <SystemClock_Config+0xd8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000974:	d1f8      	bne.n	8000968 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000976:	2321      	movs	r3, #33	; 0x21
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800097a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000988:	2302      	movs	r3, #2
 800098a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000990:	2318      	movs	r3, #24
 8000992:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000994:	2302      	movs	r3, #2
 8000996:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099c:	2302      	movs	r3, #2
 800099e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009a0:	230c      	movs	r3, #12
 80009a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fe89 	bl	80016c8 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009bc:	f000 f832 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	233f      	movs	r3, #63	; 0x3f
 80009c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2303      	movs	r3, #3
 80009c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2102      	movs	r1, #2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 fa73 	bl	8001ed0 <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009f0:	f000 f818 	bl	8000a24 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3770      	adds	r7, #112	; 0x70
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	58024800 	.word	0x58024800

08000a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a12:	f000 fb35 	bl	8001080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40001400 	.word	0x40001400

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <RetargetInit+0x28>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <RetargetInit+0x2c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6898      	ldr	r0, [r3, #8]
 8000a44:	2300      	movs	r3, #0
 8000a46:	2202      	movs	r2, #2
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f007 feb5 	bl	80087b8 <setvbuf>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	24004adc 	.word	0x24004adc
 8000a5c:	24000014 	.word	0x24000014

08000a60 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d002      	beq.n	8000a78 <_write+0x18>
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d111      	bne.n	8000a9c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <_write+0x54>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	f003 fc49 	bl	800431c <HAL_UART_Transmit>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a8e:	7dfb      	ldrb	r3, [r7, #23]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d101      	bne.n	8000a98 <_write+0x38>
      return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	e008      	b.n	8000aaa <_write+0x4a>
    else
      return EIO;
 8000a98:	2305      	movs	r3, #5
 8000a9a:	e006      	b.n	8000aaa <_write+0x4a>
  }
  errno = EBADF;
 8000a9c:	f007 fc7e 	bl	800839c <__errno>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2209      	movs	r2, #9
 8000aa4:	601a      	str	r2, [r3, #0]
  return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	24004adc 	.word	0x24004adc

08000ab8 <_close>:

int _close(int fd) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db04      	blt.n	8000ad0 <_close+0x18>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	dc01      	bgt.n	8000ad0 <_close+0x18>
    return 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	e006      	b.n	8000ade <_close+0x26>

  errno = EBADF;
 8000ad0:	f007 fc64 	bl	800839c <__errno>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2209      	movs	r2, #9
 8000ad8:	601a      	str	r2, [r3, #0]
  return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b084      	sub	sp, #16
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000af2:	f007 fc53 	bl	800839c <__errno>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2209      	movs	r2, #9
 8000afa:	601a      	str	r2, [r3, #0]
  return -1;
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <_read>:

int _read(int fd, char* ptr, int len) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d110      	bne.n	8000b3c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <_read+0x4c>)
 8000b1c:	6818      	ldr	r0, [r3, #0]
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b22:	2201      	movs	r2, #1
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	f003 fc8f 	bl	8004448 <HAL_UART_Receive>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b2e:	7dfb      	ldrb	r3, [r7, #23]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <_read+0x30>
      return 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e008      	b.n	8000b4a <_read+0x42>
    else
      return EIO;
 8000b38:	2305      	movs	r3, #5
 8000b3a:	e006      	b.n	8000b4a <_read+0x42>
  }
  errno = EBADF;
 8000b3c:	f007 fc2e 	bl	800839c <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2209      	movs	r2, #9
 8000b44:	601a      	str	r2, [r3, #0]
  return -1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	24004adc 	.word	0x24004adc

08000b58 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db08      	blt.n	8000b7a <_fstat+0x22>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	dc05      	bgt.n	8000b7a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b74:	605a      	str	r2, [r3, #4]
    return 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e005      	b.n	8000b86 <_fstat+0x2e>
  }

  errno = EBADF;
 8000b7a:	f007 fc0f 	bl	800839c <__errno>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2209      	movs	r2, #9
 8000b82:	601a      	str	r2, [r3, #0]
  return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_MspInit+0x38>)
 8000b98:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_MspInit+0x38>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_MspInit+0x38>)
 8000ba8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f06f 0001 	mvn.w	r0, #1
 8000bbc:	f000 fb38 	bl	8001230 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	58024400 	.word	0x58024400

08000bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b090      	sub	sp, #64	; 0x40
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d827      	bhi.n	8000c2a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	2037      	movs	r0, #55	; 0x37
 8000be0:	f000 fb26 	bl	8001230 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000be4:	2037      	movs	r0, #55	; 0x37
 8000be6:	f000 fb3d 	bl	8001264 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000bea:	4a29      	ldr	r2, [pc, #164]	; (8000c90 <HAL_InitTick+0xc4>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <HAL_InitTick+0xc8>)
 8000bf2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bf6:	4a27      	ldr	r2, [pc, #156]	; (8000c94 <HAL_InitTick+0xc8>)
 8000bf8:	f043 0320 	orr.w	r3, r3, #32
 8000bfc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c00:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <HAL_InitTick+0xc8>)
 8000c02:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c0e:	f107 0210 	add.w	r2, r7, #16
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fce5 	bl	80025e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d106      	bne.n	8000c36 <HAL_InitTick+0x6a>
 8000c28:	e001      	b.n	8000c2e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e02b      	b.n	8000c86 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c2e:	f001 fcaf 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8000c32:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000c34:	e004      	b.n	8000c40 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c36:	f001 fcab 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <HAL_InitTick+0xcc>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	0c9b      	lsrs	r3, r3, #18
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_InitTick+0xd0>)
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <HAL_InitTick+0xd4>)
 8000c52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_InitTick+0xd0>)
 8000c56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c5a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c5c:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <HAL_InitTick+0xd0>)
 8000c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c60:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_InitTick+0xd0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_InitTick+0xd0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c6e:	480b      	ldr	r0, [pc, #44]	; (8000c9c <HAL_InitTick+0xd0>)
 8000c70:	f003 f82a 	bl	8003cc8 <HAL_TIM_Base_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d104      	bne.n	8000c84 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c7a:	4808      	ldr	r0, [pc, #32]	; (8000c9c <HAL_InitTick+0xd0>)
 8000c7c:	f003 f886 	bl	8003d8c <HAL_TIM_Base_Start_IT>
 8000c80:	4603      	mov	r3, r0
 8000c82:	e000      	b.n	8000c86 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3740      	adds	r7, #64	; 0x40
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	24000008 	.word	0x24000008
 8000c94:	58024400 	.word	0x58024400
 8000c98:	431bde83 	.word	0x431bde83
 8000c9c:	24004ae0 	.word	0x24004ae0
 8000ca0:	40001400 	.word	0x40001400

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <TIM7_IRQHandler+0x10>)
 8000cd6:	f003 f8d1 	bl	8003e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24004ae0 	.word	0x24004ae0

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d14:	f007 fb42 	bl	800839c <__errno>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <_sbrk+0x64>)
 8000d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	24100000 	.word	0x24100000
 8000d44:	00000400 	.word	0x00000400
 8000d48:	24000094 	.word	0x24000094
 8000d4c:	24004c10 	.word	0x24004c10

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d54:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <SystemInit+0xd0>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5a:	4a31      	ldr	r2, [pc, #196]	; (8000e20 <SystemInit+0xd0>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d64:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <SystemInit+0xd4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d807      	bhi.n	8000d80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d70:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <SystemInit+0xd4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f023 030f 	bic.w	r3, r3, #15
 8000d78:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <SystemInit+0xd4>)
 8000d7a:	f043 0303 	orr.w	r3, r3, #3
 8000d7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d80:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <SystemInit+0xd8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <SystemInit+0xd8>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <SystemInit+0xd8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <SystemInit+0xd8>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4924      	ldr	r1, [pc, #144]	; (8000e28 <SystemInit+0xd8>)
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <SystemInit+0xdc>)
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <SystemInit+0xd4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d007      	beq.n	8000dba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <SystemInit+0xd4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f023 030f 	bic.w	r3, r3, #15
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <SystemInit+0xd4>)
 8000db4:	f043 0303 	orr.w	r3, r3, #3
 8000db8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <SystemInit+0xd8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <SystemInit+0xd8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <SystemInit+0xd8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <SystemInit+0xd8>)
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <SystemInit+0xe0>)
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <SystemInit+0xd8>)
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <SystemInit+0xe4>)
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <SystemInit+0xd8>)
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <SystemInit+0xe8>)
 8000ddc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <SystemInit+0xd8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <SystemInit+0xd8>)
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <SystemInit+0xe8>)
 8000de8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <SystemInit+0xd8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <SystemInit+0xd8>)
 8000df2:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <SystemInit+0xe8>)
 8000df4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <SystemInit+0xd8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <SystemInit+0xd8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <SystemInit+0xd8>)
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <SystemInit+0xd8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <SystemInit+0xec>)
 8000e10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e14:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00
 8000e24:	52002000 	.word	0x52002000
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e30:	02020200 	.word	0x02020200
 8000e34:	01ff0000 	.word	0x01ff0000
 8000e38:	01010280 	.word	0x01010280
 8000e3c:	52004000 	.word	0x52004000

08000e40 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <MX_USART3_UART_Init+0x94>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e88:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e8a:	f003 f9f7 	bl	800427c <HAL_UART_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e94:	f7ff fdc6 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e9c:	f004 fbf4 	bl	8005688 <HAL_UARTEx_SetTxFifoThreshold>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ea6:	f7ff fdbd 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000eae:	f004 fc29 	bl	8005704 <HAL_UARTEx_SetRxFifoThreshold>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000eb8:	f7ff fdb4 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000ebe:	f004 fbaa 	bl	8005616 <HAL_UARTEx_DisableFifoMode>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ec8:	f7ff fdac 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	24004b2c 	.word	0x24004b2c
 8000ed4:	40004800 	.word	0x40004800

08000ed8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0b8      	sub	sp, #224	; 0xe0
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	22b8      	movs	r2, #184	; 0xb8
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f007 fb80 	bl	80085fe <memset>
  if(uartHandle->Instance==USART3)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <HAL_UART_MspInit+0xc0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d142      	bne.n	8000f8e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fba8 	bl	800266c <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f22:	f7ff fd7f 	bl	8000a24 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f28:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f32:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f38:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f4a:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_UART_MspInit+0xc8>)
 8000f8a:	f000 f979 	bl	8001280 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f8e:	bf00      	nop
 8000f90:	37e0      	adds	r7, #224	; 0xe0
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40004800 	.word	0x40004800
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58020c00 	.word	0x58020c00

08000fa4 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb8:	f7ff feca 	bl	8000d50 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f007 fad7 	bl	8008594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fc85 	bl	80008f4 <main>
  bx  lr
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000ff0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000ff8:	08008e48 	.word	0x08008e48
  ldr r2, =_sbss
 8000ffc:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001000:	24004c10 	.word	0x24004c10

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100e:	2003      	movs	r0, #3
 8001010:	f000 f903 	bl	800121a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001014:	f001 f912 	bl	800223c <HAL_RCC_GetSysClockFreq>
 8001018:	4602      	mov	r2, r0
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_Init+0x68>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	4913      	ldr	r1, [pc, #76]	; (8001074 <HAL_Init+0x6c>)
 8001026:	5ccb      	ldrb	r3, [r1, r3]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_Init+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_Init+0x6c>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_Init+0x70>)
 800104a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800104c:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_Init+0x74>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	200f      	movs	r0, #15
 8001054:	f7ff fdba 	bl	8000bcc <HAL_InitTick>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e002      	b.n	8001068 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001062:	f7ff fd95 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400
 8001074:	08008d9c 	.word	0x08008d9c
 8001078:	24000004 	.word	0x24000004
 800107c:	24000000 	.word	0x24000000

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	2400000c 	.word	0x2400000c
 80010a4:	24004bbc 	.word	0x24004bbc

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	24004bbc 	.word	0x24004bbc

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00
 8001104:	05fa0000 	.word	0x05fa0000

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff4c 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800123e:	f7ff ff63 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001242:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7ff ffb3 	bl	80011b4 <NVIC_EncodePriority>
 800124e:	4602      	mov	r2, r0
 8001250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff82 	bl	8001160 <__NVIC_SetPriority>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff56 	bl	8001124 <__NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800128e:	4b89      	ldr	r3, [pc, #548]	; (80014b4 <HAL_GPIO_Init+0x234>)
 8001290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001292:	e194      	b.n	80015be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8186 	beq.w	80015b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d005      	beq.n	80012c4 <HAL_GPIO_Init+0x44>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d130      	bne.n	8001326 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012fa:	2201      	movs	r2, #1
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	f003 0201 	and.w	r2, r3, #1
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b03      	cmp	r3, #3
 8001330:	d017      	beq.n	8001362 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d123      	bne.n	80013b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	69b9      	ldr	r1, [r7, #24]
 80013b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0203 	and.w	r2, r3, #3
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80e0 	beq.w	80015b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <HAL_GPIO_Init+0x238>)
 80013fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013fe:	4a2e      	ldr	r2, [pc, #184]	; (80014b8 <HAL_GPIO_Init+0x238>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_GPIO_Init+0x238>)
 800140a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001416:	4a29      	ldr	r2, [pc, #164]	; (80014bc <HAL_GPIO_Init+0x23c>)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	220f      	movs	r2, #15
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <HAL_GPIO_Init+0x240>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d052      	beq.n	80014e8 <HAL_GPIO_Init+0x268>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <HAL_GPIO_Init+0x244>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d031      	beq.n	80014ae <HAL_GPIO_Init+0x22e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_GPIO_Init+0x248>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d02b      	beq.n	80014aa <HAL_GPIO_Init+0x22a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <HAL_GPIO_Init+0x24c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d025      	beq.n	80014a6 <HAL_GPIO_Init+0x226>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <HAL_GPIO_Init+0x250>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01f      	beq.n	80014a2 <HAL_GPIO_Init+0x222>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <HAL_GPIO_Init+0x254>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d019      	beq.n	800149e <HAL_GPIO_Init+0x21e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_GPIO_Init+0x258>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x21a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a19      	ldr	r2, [pc, #100]	; (80014dc <HAL_GPIO_Init+0x25c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x216>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <HAL_GPIO_Init+0x260>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x212>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_GPIO_Init+0x264>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x20e>
 800148a:	2309      	movs	r3, #9
 800148c:	e02d      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 800148e:	230a      	movs	r3, #10
 8001490:	e02b      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 8001492:	2308      	movs	r3, #8
 8001494:	e029      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 8001496:	2307      	movs	r3, #7
 8001498:	e027      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 800149a:	2306      	movs	r3, #6
 800149c:	e025      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 800149e:	2305      	movs	r3, #5
 80014a0:	e023      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 80014a2:	2304      	movs	r3, #4
 80014a4:	e021      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e01f      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e01d      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e01b      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 80014b2:	bf00      	nop
 80014b4:	58000080 	.word	0x58000080
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58000400 	.word	0x58000400
 80014c0:	58020000 	.word	0x58020000
 80014c4:	58020400 	.word	0x58020400
 80014c8:	58020800 	.word	0x58020800
 80014cc:	58020c00 	.word	0x58020c00
 80014d0:	58021000 	.word	0x58021000
 80014d4:	58021400 	.word	0x58021400
 80014d8:	58021800 	.word	0x58021800
 80014dc:	58021c00 	.word	0x58021c00
 80014e0:	58022000 	.word	0x58022000
 80014e4:	58022400 	.word	0x58022400
 80014e8:	2300      	movs	r3, #0
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	f002 0203 	and.w	r2, r2, #3
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	4093      	lsls	r3, r2
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014fa:	4938      	ldr	r1, [pc, #224]	; (80015dc <HAL_GPIO_Init+0x35c>)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800152e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800155c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	3301      	adds	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f47f ae63 	bne.w	8001294 <HAL_GPIO_Init+0x14>
  }
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	3724      	adds	r7, #36	; 0x24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	58000400 	.word	0x58000400

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800161c:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	2b06      	cmp	r3, #6
 8001626:	d00a      	beq.n	800163e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	d001      	beq.n	800163a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e040      	b.n	80016bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e03e      	b.n	80016bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001646:	491f      	ldr	r1, [pc, #124]	; (80016c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4313      	orrs	r3, r2
 800164c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800164e:	f7ff fd2b 	bl	80010a8 <HAL_GetTick>
 8001652:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001654:	e009      	b.n	800166a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001656:	f7ff fd27 	bl	80010a8 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001664:	d901      	bls.n	800166a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e028      	b.n	80016bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001676:	d1ee      	bne.n	8001656 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b1e      	cmp	r3, #30
 800167c:	d008      	beq.n	8001690 <HAL_PWREx_ConfigSupply+0x7c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b2e      	cmp	r3, #46	; 0x2e
 8001682:	d005      	beq.n	8001690 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b1d      	cmp	r3, #29
 8001688:	d002      	beq.n	8001690 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b2d      	cmp	r3, #45	; 0x2d
 800168e:	d114      	bne.n	80016ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001690:	f7ff fd0a 	bl	80010a8 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001696:	e009      	b.n	80016ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001698:	f7ff fd06 	bl	80010a8 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a6:	d901      	bls.n	80016ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e007      	b.n	80016bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b8:	d1ee      	bne.n	8001698 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	58024800 	.word	0x58024800

080016c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	; 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e3f3      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80b3 	beq.w	800184e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e8:	4b9e      	ldr	r3, [pc, #632]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016f2:	4b9c      	ldr	r3, [pc, #624]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d007      	beq.n	800170e <HAL_RCC_OscConfig+0x46>
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	2b18      	cmp	r3, #24
 8001702:	d112      	bne.n	800172a <HAL_RCC_OscConfig+0x62>
 8001704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d10d      	bne.n	800172a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170e:	4b95      	ldr	r3, [pc, #596]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8098 	beq.w	800184c <HAL_RCC_OscConfig+0x184>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	f040 8093 	bne.w	800184c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e3cb      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x7a>
 8001734:	4b8b      	ldr	r3, [pc, #556]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a8a      	ldr	r2, [pc, #552]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 800173a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e058      	b.n	80017f4 <HAL_RCC_OscConfig+0x12c>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d112      	bne.n	8001770 <HAL_RCC_OscConfig+0xa8>
 800174a:	4b86      	ldr	r3, [pc, #536]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a85      	ldr	r2, [pc, #532]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b83      	ldr	r3, [pc, #524]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a82      	ldr	r2, [pc, #520]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 800175c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b80      	ldr	r3, [pc, #512]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7f      	ldr	r2, [pc, #508]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e041      	b.n	80017f4 <HAL_RCC_OscConfig+0x12c>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001778:	d112      	bne.n	80017a0 <HAL_RCC_OscConfig+0xd8>
 800177a:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a79      	ldr	r2, [pc, #484]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b77      	ldr	r3, [pc, #476]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a76      	ldr	r2, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 800178c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b74      	ldr	r3, [pc, #464]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a73      	ldr	r2, [pc, #460]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e029      	b.n	80017f4 <HAL_RCC_OscConfig+0x12c>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80017a8:	d112      	bne.n	80017d0 <HAL_RCC_OscConfig+0x108>
 80017aa:	4b6e      	ldr	r3, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6d      	ldr	r2, [pc, #436]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b6b      	ldr	r3, [pc, #428]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6a      	ldr	r2, [pc, #424]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a67      	ldr	r2, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e011      	b.n	80017f4 <HAL_RCC_OscConfig+0x12c>
 80017d0:	4b64      	ldr	r3, [pc, #400]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a63      	ldr	r2, [pc, #396]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b61      	ldr	r3, [pc, #388]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a60      	ldr	r2, [pc, #384]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a5d      	ldr	r2, [pc, #372]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fc54 	bl	80010a8 <HAL_GetTick>
 8001800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fc50 	bl	80010a8 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e355      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001816:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x13c>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fc40 	bl	80010a8 <HAL_GetTick>
 8001828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fc3c 	bl	80010a8 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e341      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800183e:	4b49      	ldr	r3, [pc, #292]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x164>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 808c 	beq.w	8001974 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185c:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001864:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001866:	4b3f      	ldr	r3, [pc, #252]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <HAL_RCC_OscConfig+0x1ba>
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	2b18      	cmp	r3, #24
 8001876:	d137      	bne.n	80018e8 <HAL_RCC_OscConfig+0x220>
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d132      	bne.n	80018e8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x1d2>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e313      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0219 	bic.w	r2, r3, #25
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	492f      	ldr	r1, [pc, #188]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018ac:	f7ff fbfc 	bl	80010a8 <HAL_GetTick>
 80018b0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fbf8 	bl	80010a8 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e2fd      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018c6:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	061b      	lsls	r3, r3, #24
 80018e0:	4920      	ldr	r1, [pc, #128]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e6:	e045      	b.n	8001974 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d026      	beq.n	800193e <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 0219 	bic.w	r2, r3, #25
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4919      	ldr	r1, [pc, #100]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff fbd1 	bl	80010a8 <HAL_GetTick>
 8001906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fbcd 	bl	80010a8 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e2d2      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	490b      	ldr	r1, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e01a      	b.n	8001974 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff fbad 	bl	80010a8 <HAL_GetTick>
 800194e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff fba9 	bl	80010a8 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d903      	bls.n	8001968 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e2ae      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
 8001964:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001968:	4b99      	ldr	r3, [pc, #612]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1ee      	bne.n	8001952 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d06a      	beq.n	8001a56 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001980:	4b93      	ldr	r3, [pc, #588]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001988:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800198a:	4b91      	ldr	r3, [pc, #580]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2b08      	cmp	r3, #8
 8001994:	d007      	beq.n	80019a6 <HAL_RCC_OscConfig+0x2de>
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	2b18      	cmp	r3, #24
 800199a:	d11b      	bne.n	80019d4 <HAL_RCC_OscConfig+0x30c>
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d116      	bne.n	80019d4 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019a6:	4b8a      	ldr	r3, [pc, #552]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_RCC_OscConfig+0x2f6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	2b80      	cmp	r3, #128	; 0x80
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e281      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019be:	4b84      	ldr	r3, [pc, #528]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	061b      	lsls	r3, r3, #24
 80019cc:	4980      	ldr	r1, [pc, #512]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019d2:	e040      	b.n	8001a56 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d023      	beq.n	8001a24 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019dc:	4b7c      	ldr	r3, [pc, #496]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a7b      	ldr	r2, [pc, #492]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 80019e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fb5e 	bl	80010a8 <HAL_GetTick>
 80019ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80019f0:	f7ff fb5a 	bl	80010a8 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e25f      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a02:	4b73      	ldr	r3, [pc, #460]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a0e:	4b70      	ldr	r3, [pc, #448]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	061b      	lsls	r3, r3, #24
 8001a1c:	496c      	ldr	r1, [pc, #432]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60cb      	str	r3, [r1, #12]
 8001a22:	e018      	b.n	8001a56 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a24:	4b6a      	ldr	r3, [pc, #424]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a69      	ldr	r2, [pc, #420]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff fb3a 	bl	80010a8 <HAL_GetTick>
 8001a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a38:	f7ff fb36 	bl	80010a8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e23b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a4a:	4b61      	ldr	r3, [pc, #388]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d036      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d019      	beq.n	8001a9e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6e:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff fb17 	bl	80010a8 <HAL_GetTick>
 8001a7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fb13 	bl	80010a8 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e218      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a90:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x3b6>
 8001a9c:	e018      	b.n	8001ad0 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9e:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa2:	4a4b      	ldr	r2, [pc, #300]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fafd 	bl	80010a8 <HAL_GetTick>
 8001aae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7ff faf9 	bl	80010a8 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1fe      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d036      	beq.n	8001b4a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d019      	beq.n	8001b18 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a39      	ldr	r2, [pc, #228]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001aea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001af0:	f7ff fada 	bl	80010a8 <HAL_GetTick>
 8001af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001af8:	f7ff fad6 	bl	80010a8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1db      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x430>
 8001b16:	e018      	b.n	8001b4a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a2c      	ldr	r2, [pc, #176]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001b1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b24:	f7ff fac0 	bl	80010a8 <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b2c:	f7ff fabc 	bl	80010a8 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1c1      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80af 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_RCC_OscConfig+0x50c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_RCC_OscConfig+0x50c>)
 8001b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b64:	f7ff faa0 	bl	80010a8 <HAL_GetTick>
 8001b68:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b6c:	f7ff fa9c 	bl	80010a8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1a1      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_RCC_OscConfig+0x50c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d106      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4d8>
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9e:	e05b      	b.n	8001c58 <HAL_RCC_OscConfig+0x590>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d117      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x510>
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bac:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a02      	ldr	r2, [pc, #8]	; (8001bd0 <HAL_RCC_OscConfig+0x508>)
 8001bc6:	f023 0304 	bic.w	r3, r3, #4
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	e044      	b.n	8001c58 <HAL_RCC_OscConfig+0x590>
 8001bce:	bf00      	nop
 8001bd0:	58024400 	.word	0x58024400
 8001bd4:	58024800 	.word	0x58024800
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d112      	bne.n	8001c06 <HAL_RCC_OscConfig+0x53e>
 8001be0:	4b95      	ldr	r3, [pc, #596]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	4a94      	ldr	r2, [pc, #592]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70
 8001bec:	4b92      	ldr	r3, [pc, #584]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	4a91      	ldr	r2, [pc, #580]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf8:	4b8f      	ldr	r3, [pc, #572]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	4a8e      	ldr	r2, [pc, #568]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6713      	str	r3, [r2, #112]	; 0x70
 8001c04:	e028      	b.n	8001c58 <HAL_RCC_OscConfig+0x590>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b85      	cmp	r3, #133	; 0x85
 8001c0c:	d112      	bne.n	8001c34 <HAL_RCC_OscConfig+0x56c>
 8001c0e:	4b8a      	ldr	r3, [pc, #552]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c12:	4a89      	ldr	r2, [pc, #548]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1a:	4b87      	ldr	r3, [pc, #540]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1e:	4a86      	ldr	r2, [pc, #536]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c24:	6713      	str	r3, [r2, #112]	; 0x70
 8001c26:	4b84      	ldr	r3, [pc, #528]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	4a83      	ldr	r2, [pc, #524]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6713      	str	r3, [r2, #112]	; 0x70
 8001c32:	e011      	b.n	8001c58 <HAL_RCC_OscConfig+0x590>
 8001c34:	4b80      	ldr	r3, [pc, #512]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c38:	4a7f      	ldr	r2, [pc, #508]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c40:	4b7d      	ldr	r3, [pc, #500]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a7c      	ldr	r2, [pc, #496]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c46:	f023 0304 	bic.w	r3, r3, #4
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	4a79      	ldr	r2, [pc, #484]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d015      	beq.n	8001c8c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff fa22 	bl	80010a8 <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff fa1e 	bl	80010a8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e121      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c7e:	4b6e      	ldr	r3, [pc, #440]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0ee      	beq.n	8001c68 <HAL_RCC_OscConfig+0x5a0>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fa0c 	bl	80010a8 <HAL_GetTick>
 8001c90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7ff fa08 	bl	80010a8 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e10b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001caa:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ee      	bne.n	8001c94 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8100 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001cc0:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cc8:	2b18      	cmp	r3, #24
 8001cca:	f000 80bb 	beq.w	8001e44 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	f040 8095 	bne.w	8001e02 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd8:	4b57      	ldr	r3, [pc, #348]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a56      	ldr	r2, [pc, #344]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f9e0 	bl	80010a8 <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f9dc 	bl	80010a8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0e1      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cfe:	4b4e      	ldr	r3, [pc, #312]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d0a:	4b4b      	ldr	r3, [pc, #300]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <HAL_RCC_OscConfig+0x774>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	4946      	ldr	r1, [pc, #280]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	628b      	str	r3, [r1, #40]	; 0x28
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d32:	3b01      	subs	r3, #1
 8001d34:	025b      	lsls	r3, r3, #9
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	061b      	lsls	r3, r3, #24
 8001d50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d54:	4938      	ldr	r1, [pc, #224]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	4a36      	ldr	r2, [pc, #216]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d66:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6a:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <HAL_RCC_OscConfig+0x778>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d72:	00d2      	lsls	r2, r2, #3
 8001d74:	4930      	ldr	r1, [pc, #192]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	f023 020c 	bic.w	r2, r3, #12
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	492c      	ldr	r1, [pc, #176]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	f023 0202 	bic.w	r2, r3, #2
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	4927      	ldr	r1, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff f965 	bl	80010a8 <HAL_GetTick>
 8001dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de2:	f7ff f961 	bl	80010a8 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e066      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x71a>
 8001e00:	e05e      	b.n	8001ec0 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a0c      	ldr	r2, [pc, #48]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff f94b 	bl	80010a8 <HAL_GetTick>
 8001e12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff f947 	bl	80010a8 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e04c      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_RCC_OscConfig+0x770>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x74e>
 8001e34:	e044      	b.n	8001ec0 <HAL_RCC_OscConfig+0x7f8>
 8001e36:	bf00      	nop
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	fffffc0c 	.word	0xfffffc0c
 8001e40:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_RCC_OscConfig+0x804>)
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_RCC_OscConfig+0x804>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d031      	beq.n	8001ebc <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f003 0203 	and.w	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d12a      	bne.n	8001ebc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d122      	bne.n	8001ebc <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d11a      	bne.n	8001ebc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	0a5b      	lsrs	r3, r3, #9
 8001e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d111      	bne.n	8001ebc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	0c1b      	lsrs	r3, r3, #16
 8001e9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d108      	bne.n	8001ebc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	0e1b      	lsrs	r3, r3, #24
 8001eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3730      	adds	r7, #48	; 0x30
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	58024400 	.word	0x58024400

08001ed0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e19c      	b.n	800221e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b8a      	ldr	r3, [pc, #552]	; (8002110 <HAL_RCC_ClockConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d910      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b87      	ldr	r3, [pc, #540]	; (8002110 <HAL_RCC_ClockConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 020f 	bic.w	r2, r3, #15
 8001efa:	4985      	ldr	r1, [pc, #532]	; (8002110 <HAL_RCC_ClockConfig+0x240>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b83      	ldr	r3, [pc, #524]	; (8002110 <HAL_RCC_ClockConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e184      	b.n	800221e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d010      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	4b7b      	ldr	r3, [pc, #492]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d908      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f30:	4b78      	ldr	r3, [pc, #480]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	4975      	ldr	r1, [pc, #468]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	4b70      	ldr	r3, [pc, #448]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d908      	bls.n	8001f70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f5e:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	496a      	ldr	r1, [pc, #424]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d010      	beq.n	8001f9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	4b64      	ldr	r3, [pc, #400]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d908      	bls.n	8001f9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f8c:	4b61      	ldr	r3, [pc, #388]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	495e      	ldr	r1, [pc, #376]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69da      	ldr	r2, [r3, #28]
 8001fae:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d908      	bls.n	8001fcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001fba:	4b56      	ldr	r3, [pc, #344]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4953      	ldr	r1, [pc, #332]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d908      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f023 020f 	bic.w	r2, r3, #15
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4947      	ldr	r1, [pc, #284]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d055      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002006:	4b43      	ldr	r3, [pc, #268]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4940      	ldr	r1, [pc, #256]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8002014:	4313      	orrs	r3, r2
 8002016:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d107      	bne.n	8002030 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002020:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d121      	bne.n	8002070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0f6      	b.n	800221e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d107      	bne.n	8002048 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002038:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d115      	bne.n	8002070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0ea      	b.n	800221e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d107      	bne.n	8002060 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0de      	b.n	800221e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002060:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0d6      	b.n	800221e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002070:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	f023 0207 	bic.w	r2, r3, #7
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4925      	ldr	r1, [pc, #148]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 800207e:	4313      	orrs	r3, r2
 8002080:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002082:	f7ff f811 	bl	80010a8 <HAL_GetTick>
 8002086:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208a:	f7ff f80d 	bl	80010a8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0be      	b.n	800221e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d1eb      	bne.n	800208a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d010      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d208      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f023 020f 	bic.w	r2, r3, #15
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	490e      	ldr	r1, [pc, #56]	; (8002114 <HAL_RCC_ClockConfig+0x244>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCC_ClockConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d214      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_RCC_ClockConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	4906      	ldr	r1, [pc, #24]	; (8002110 <HAL_RCC_ClockConfig+0x240>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_RCC_ClockConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e086      	b.n	800221e <HAL_RCC_ClockConfig+0x34e>
 8002110:	52002000 	.word	0x52002000
 8002114:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d010      	beq.n	8002146 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002130:	429a      	cmp	r2, r3
 8002132:	d208      	bcs.n	8002146 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002134:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	4939      	ldr	r1, [pc, #228]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 8002142:	4313      	orrs	r3, r2
 8002144:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d010      	beq.n	8002174 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800215e:	429a      	cmp	r2, r3
 8002160:	d208      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002162:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	492e      	ldr	r1, [pc, #184]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 8002170:	4313      	orrs	r3, r2
 8002172:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	d010      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699a      	ldr	r2, [r3, #24]
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800218c:	429a      	cmp	r2, r3
 800218e:	d208      	bcs.n	80021a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4922      	ldr	r1, [pc, #136]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d208      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4917      	ldr	r1, [pc, #92]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80021d0:	f000 f834 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	4912      	ldr	r1, [pc, #72]	; (800222c <HAL_RCC_ClockConfig+0x35c>)
 80021e2:	5ccb      	ldrb	r3, [r1, r3]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ec:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_RCC_ClockConfig+0x358>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	4a0d      	ldr	r2, [pc, #52]	; (800222c <HAL_RCC_ClockConfig+0x35c>)
 80021f8:	5cd3      	ldrb	r3, [r2, r3]
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x360>)
 8002206:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <HAL_RCC_ClockConfig+0x364>)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_ClockConfig+0x368>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fcda 	bl	8000bcc <HAL_InitTick>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	58024400 	.word	0x58024400
 800222c:	08008d9c 	.word	0x08008d9c
 8002230:	24000004 	.word	0x24000004
 8002234:	24000000 	.word	0x24000000
 8002238:	24000008 	.word	0x24000008

0800223c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002242:	4bb3      	ldr	r3, [pc, #716]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800224a:	2b18      	cmp	r3, #24
 800224c:	f200 8155 	bhi.w	80024fa <HAL_RCC_GetSysClockFreq+0x2be>
 8002250:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002256:	bf00      	nop
 8002258:	080022bd 	.word	0x080022bd
 800225c:	080024fb 	.word	0x080024fb
 8002260:	080024fb 	.word	0x080024fb
 8002264:	080024fb 	.word	0x080024fb
 8002268:	080024fb 	.word	0x080024fb
 800226c:	080024fb 	.word	0x080024fb
 8002270:	080024fb 	.word	0x080024fb
 8002274:	080024fb 	.word	0x080024fb
 8002278:	080022e3 	.word	0x080022e3
 800227c:	080024fb 	.word	0x080024fb
 8002280:	080024fb 	.word	0x080024fb
 8002284:	080024fb 	.word	0x080024fb
 8002288:	080024fb 	.word	0x080024fb
 800228c:	080024fb 	.word	0x080024fb
 8002290:	080024fb 	.word	0x080024fb
 8002294:	080024fb 	.word	0x080024fb
 8002298:	080022e9 	.word	0x080022e9
 800229c:	080024fb 	.word	0x080024fb
 80022a0:	080024fb 	.word	0x080024fb
 80022a4:	080024fb 	.word	0x080024fb
 80022a8:	080024fb 	.word	0x080024fb
 80022ac:	080024fb 	.word	0x080024fb
 80022b0:	080024fb 	.word	0x080024fb
 80022b4:	080024fb 	.word	0x080024fb
 80022b8:	080022ef 	.word	0x080022ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022bc:	4b94      	ldr	r3, [pc, #592]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022c8:	4b91      	ldr	r3, [pc, #580]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	4a90      	ldr	r2, [pc, #576]	; (8002514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80022da:	e111      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022dc:	4b8d      	ldr	r3, [pc, #564]	; (8002514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022de:	61bb      	str	r3, [r7, #24]
    break;
 80022e0:	e10e      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80022e2:	4b8d      	ldr	r3, [pc, #564]	; (8002518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022e4:	61bb      	str	r3, [r7, #24]
    break;
 80022e6:	e10b      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80022e8:	4b8c      	ldr	r3, [pc, #560]	; (800251c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022ea:	61bb      	str	r3, [r7, #24]
    break;
 80022ec:	e108      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022ee:	4b88      	ldr	r3, [pc, #544]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80022f8:	4b85      	ldr	r3, [pc, #532]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002302:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002304:	4b82      	ldr	r3, [pc, #520]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800230e:	4b80      	ldr	r3, [pc, #512]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002312:	08db      	lsrs	r3, r3, #3
 8002314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	ee07 3a90 	vmov	s15, r3
 8002322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002326:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80e1 	beq.w	80024f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b02      	cmp	r3, #2
 8002336:	f000 8083 	beq.w	8002440 <HAL_RCC_GetSysClockFreq+0x204>
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b02      	cmp	r3, #2
 800233e:	f200 80a1 	bhi.w	8002484 <HAL_RCC_GetSysClockFreq+0x248>
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x114>
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d056      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800234e:	e099      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002350:	4b6f      	ldr	r3, [pc, #444]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d02d      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800235c:	4b6c      	ldr	r3, [pc, #432]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	08db      	lsrs	r3, r3, #3
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	4a6b      	ldr	r2, [pc, #428]	; (8002514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
 800236c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	ee07 3a90 	vmov	s15, r3
 8002374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002386:	4b62      	ldr	r3, [pc, #392]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002396:	ed97 6a02 	vldr	s12, [r7, #8]
 800239a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800239e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80023b6:	e087      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002524 <HAL_RCC_GetSysClockFreq+0x2e8>
 80023c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ca:	4b51      	ldr	r3, [pc, #324]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023da:	ed97 6a02 	vldr	s12, [r7, #8]
 80023de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023fa:	e065      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002406:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002528 <HAL_RCC_GetSysClockFreq+0x2ec>
 800240a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800240e:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800241e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002422:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002520 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800242a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800242e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800243e:	e043      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800252c <HAL_RCC_GetSysClockFreq+0x2f0>
 800244e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002462:	ed97 6a02 	vldr	s12, [r7, #8]
 8002466:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800246a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800246e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800247a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002482:	e021      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002528 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	0a5b      	lsrs	r3, r3, #9
 80024ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024d2:	3301      	adds	r3, #1
 80024d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	ee07 3a90 	vmov	s15, r3
 80024dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80024e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ec:	ee17 3a90 	vmov	r3, s15
 80024f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80024f2:	e005      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
    break;
 80024f8:	e002      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024fc:	61bb      	str	r3, [r7, #24]
    break;
 80024fe:	bf00      	nop
  }

  return sysclockfreq;
 8002500:	69bb      	ldr	r3, [r7, #24]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	58024400 	.word	0x58024400
 8002514:	03d09000 	.word	0x03d09000
 8002518:	003d0900 	.word	0x003d0900
 800251c:	007a1200 	.word	0x007a1200
 8002520:	46000000 	.word	0x46000000
 8002524:	4c742400 	.word	0x4c742400
 8002528:	4a742400 	.word	0x4a742400
 800252c:	4af42400 	.word	0x4af42400

08002530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002536:	f7ff fe81 	bl	800223c <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_RCC_GetHCLKFreq+0x50>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490f      	ldr	r1, [pc, #60]	; (8002584 <HAL_RCC_GetHCLKFreq+0x54>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	fa22 f303 	lsr.w	r3, r2, r3
 8002552:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_RCC_GetHCLKFreq+0x50>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_RCC_GetHCLKFreq+0x54>)
 800255e:	5cd3      	ldrb	r3, [r2, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_RCC_GetHCLKFreq+0x58>)
 800256c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800256e:	4a07      	ldr	r2, [pc, #28]	; (800258c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <HAL_RCC_GetHCLKFreq+0x58>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	58024400 	.word	0x58024400
 8002584:	08008d9c 	.word	0x08008d9c
 8002588:	24000004 	.word	0x24000004
 800258c:	24000000 	.word	0x24000000

08002590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002594:	f7ff ffcc 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4904      	ldr	r1, [pc, #16]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	58024400 	.word	0x58024400
 80025b8:	08008d9c 	.word	0x08008d9c

080025bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80025c0:	f7ff ffb6 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4904      	ldr	r1, [pc, #16]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	58024400 	.word	0x58024400
 80025e4:	08008d9c 	.word	0x08008d9c

080025e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	223f      	movs	r2, #63	; 0x3f
 80025f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_RCC_GetClockConfig+0x7c>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f003 0207 	and.w	r2, r3, #7
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <HAL_RCC_GetClockConfig+0x7c>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <HAL_RCC_GetClockConfig+0x7c>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 020f 	and.w	r2, r3, #15
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_RCC_GetClockConfig+0x7c>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_RCC_GetClockConfig+0x7c>)
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_GetClockConfig+0x7c>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_RCC_GetClockConfig+0x7c>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetClockConfig+0x80>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 020f 	and.w	r2, r3, #15
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	601a      	str	r2, [r3, #0]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	58024400 	.word	0x58024400
 8002668:	52002000 	.word	0x52002000

0800266c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002674:	2300      	movs	r3, #0
 8002676:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002678:	2300      	movs	r3, #0
 800267a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d03f      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800268c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002690:	d02a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002692:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002696:	d824      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800269c:	d018      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800269e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026a2:	d81e      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ac:	d007      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026ae:	e018      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026b0:	4ba6      	ldr	r3, [pc, #664]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	4aa5      	ldr	r2, [pc, #660]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026bc:	e015      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2102      	movs	r1, #2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f001 f99b 	bl	8003a00 <RCCEx_PLL2_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026ce:	e00c      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3324      	adds	r3, #36	; 0x24
 80026d4:	2102      	movs	r1, #2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 fa44 	bl	8003b64 <RCCEx_PLL3_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026e0:	e003      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
      break;
 80026e6:	e000      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026f0:	4b96      	ldr	r3, [pc, #600]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026fc:	4993      	ldr	r1, [pc, #588]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	650b      	str	r3, [r1, #80]	; 0x50
 8002702:	e001      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d03d      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002718:	2b04      	cmp	r3, #4
 800271a:	d826      	bhi.n	800276a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800271c:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002739 	.word	0x08002739
 8002728:	08002747 	.word	0x08002747
 800272c:	08002759 	.word	0x08002759
 8002730:	08002771 	.word	0x08002771
 8002734:	08002771 	.word	0x08002771
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002738:	4b84      	ldr	r3, [pc, #528]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	4a83      	ldr	r2, [pc, #524]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800273e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002744:	e015      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f001 f957 	bl	8003a00 <RCCEx_PLL2_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002756:	e00c      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3324      	adds	r3, #36	; 0x24
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f001 fa00 	bl	8003b64 <RCCEx_PLL3_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002768:	e003      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
      break;
 800276e:	e000      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002778:	4b74      	ldr	r3, [pc, #464]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800277a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277c:	f023 0207 	bic.w	r2, r3, #7
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	4971      	ldr	r1, [pc, #452]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002786:	4313      	orrs	r3, r2
 8002788:	650b      	str	r3, [r1, #80]	; 0x50
 800278a:	e001      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278c:	7dfb      	ldrb	r3, [r7, #23]
 800278e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002798:	2b00      	cmp	r3, #0
 800279a:	d04a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027a4:	d031      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80027a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027aa:	d82b      	bhi.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b0:	d02d      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80027b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b6:	d825      	bhi.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027b8:	2bc0      	cmp	r3, #192	; 0xc0
 80027ba:	d02a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027bc:	2bc0      	cmp	r3, #192	; 0xc0
 80027be:	d821      	bhi.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d016      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	d81d      	bhi.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d007      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80027d0:	e018      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d2:	4b5e      	ldr	r3, [pc, #376]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	4a5d      	ldr	r2, [pc, #372]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80027de:	e019      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 f90a 	bl	8003a00 <RCCEx_PLL2_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80027f0:	e010      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3324      	adds	r3, #36	; 0x24
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 f9b3 	bl	8003b64 <RCCEx_PLL3_Config>
 80027fe:	4603      	mov	r3, r0
 8002800:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002802:	e007      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	75fb      	strb	r3, [r7, #23]
      break;
 8002808:	e004      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800280a:	bf00      	nop
 800280c:	e002      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800280e:	bf00      	nop
 8002810:	e000      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	4949      	ldr	r1, [pc, #292]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	650b      	str	r3, [r1, #80]	; 0x50
 800282c:	e001      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d04f      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002846:	d036      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002848:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800284c:	d830      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800284e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002852:	d032      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002858:	d82a      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800285a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800285e:	d02e      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002860:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002864:	d824      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286a:	d018      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x232>
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002870:	d81e      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800287a:	d007      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x220>
 800287c:	e018      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800287e:	4b33      	ldr	r3, [pc, #204]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	4a32      	ldr	r2, [pc, #200]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800288a:	e019      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f001 f8b4 	bl	8003a00 <RCCEx_PLL2_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800289c:	e010      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3324      	adds	r3, #36	; 0x24
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 f95d 	bl	8003b64 <RCCEx_PLL3_Config>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80028ae:	e007      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	75fb      	strb	r3, [r7, #23]
      break;
 80028b4:	e004      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028b6:	bf00      	nop
 80028b8:	e002      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ca:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	491e      	ldr	r1, [pc, #120]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	650b      	str	r3, [r1, #80]	; 0x50
 80028d8:	e001      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d034      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ee:	2b30      	cmp	r3, #48	; 0x30
 80028f0:	d01c      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80028f2:	2b30      	cmp	r3, #48	; 0x30
 80028f4:	d817      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d00c      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d813      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002902:	2b10      	cmp	r3, #16
 8002904:	d10f      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	4a10      	ldr	r2, [pc, #64]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800290c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002910:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002912:	e00e      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3304      	adds	r3, #4
 8002918:	2102      	movs	r1, #2
 800291a:	4618      	mov	r0, r3
 800291c:	f001 f870 	bl	8003a00 <RCCEx_PLL2_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002924:	e005      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800292c:	bf00      	nop
 800292e:	e000      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10b      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800293a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002944:	4901      	ldr	r1, [pc, #4]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002946:	4313      	orrs	r3, r2
 8002948:	64cb      	str	r3, [r1, #76]	; 0x4c
 800294a:	e003      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800294c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d047      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002968:	d030      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800296a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800296e:	d82a      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002974:	d02c      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800297a:	d824      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800297c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002980:	d018      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002986:	d81e      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002990:	d007      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002992:	e018      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002994:	4bb0      	ldr	r3, [pc, #704]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	4aaf      	ldr	r2, [pc, #700]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800299a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029a0:	e017      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 f829 	bl	8003a00 <RCCEx_PLL2_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029b2:	e00e      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3324      	adds	r3, #36	; 0x24
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 f8d2 	bl	8003b64 <RCCEx_PLL3_Config>
 80029c0:	4603      	mov	r3, r0
 80029c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029c4:	e005      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
      break;
 80029ca:	e002      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80029cc:	bf00      	nop
 80029ce:	e000      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80029d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029d8:	4b9f      	ldr	r3, [pc, #636]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e4:	499c      	ldr	r1, [pc, #624]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	650b      	str	r3, [r1, #80]	; 0x50
 80029ea:	e001      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d049      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a04:	d02e      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a0a:	d828      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a10:	d02a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002a12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a16:	d822      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a1c:	d026      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002a1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a22:	d81c      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a28:	d010      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002a2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a2e:	d816      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01d      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a38:	d111      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	2101      	movs	r1, #1
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 ffdd 	bl	8003a00 <RCCEx_PLL2_Config>
 8002a46:	4603      	mov	r3, r0
 8002a48:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a4a:	e012      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3324      	adds	r3, #36	; 0x24
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 f886 	bl	8003b64 <RCCEx_PLL3_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a5c:	e009      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	75fb      	strb	r3, [r7, #23]
      break;
 8002a62:	e006      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a64:	bf00      	nop
 8002a66:	e004      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a68:	bf00      	nop
 8002a6a:	e002      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a6c:	bf00      	nop
 8002a6e:	e000      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a78:	4b77      	ldr	r3, [pc, #476]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a84:	4974      	ldr	r1, [pc, #464]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	650b      	str	r3, [r1, #80]	; 0x50
 8002a8a:	e001      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d053      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002aa2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002aa6:	d034      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002aa8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002aac:	d82e      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab2:	d030      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab8:	d828      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abe:	d02c      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d822      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ac6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002aca:	d028      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002acc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ad0:	d81c      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad6:	d010      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002adc:	d816      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01f      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ae6:	d111      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 ff86 	bl	8003a00 <RCCEx_PLL2_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002af8:	e014      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3324      	adds	r3, #36	; 0x24
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 f82f 	bl	8003b64 <RCCEx_PLL3_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b10:	e008      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b12:	bf00      	nop
 8002b14:	e006      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b16:	bf00      	nop
 8002b18:	e004      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e002      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e000      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b2a:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b38:	4947      	ldr	r1, [pc, #284]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	658b      	str	r3, [r1, #88]	; 0x58
 8002b3e:	e001      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d02f      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b58:	d00e      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b5e:	d814      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d015      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002b64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b68:	d10f      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b6a:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	4a3a      	ldr	r2, [pc, #232]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b76:	e00c      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 ff3e 	bl	8003a00 <RCCEx_PLL2_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b88:	e003      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b8e:	e000      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b98:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba4:	492c      	ldr	r1, [pc, #176]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	650b      	str	r3, [r1, #80]	; 0x50
 8002baa:	e001      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d032      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d81b      	bhi.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002bc4:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002c03 	.word	0x08002c03
 8002bd0:	08002bdd 	.word	0x08002bdd
 8002bd4:	08002beb 	.word	0x08002beb
 8002bd8:	08002c03 	.word	0x08002c03
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	4a1d      	ldr	r2, [pc, #116]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002be8:	e00c      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 ff05 	bl	8003a00 <RCCEx_PLL2_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002bfa:	e003      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8002c00:	e000      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	4910      	ldr	r1, [pc, #64]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c1c:	e001      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
 8002c20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 808a 	beq.w	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fa34 	bl	80010a8 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c42:	e00d      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7fe fa30 	bl	80010a8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d906      	bls.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	75fb      	strb	r3, [r7, #23]
        break;
 8002c56:	e009      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c60:	4bba      	ldr	r3, [pc, #744]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0eb      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d166      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c72:	4bb7      	ldr	r3, [pc, #732]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c7c:	4053      	eors	r3, r2
 8002c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d013      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c86:	4bb2      	ldr	r3, [pc, #712]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c90:	4baf      	ldr	r3, [pc, #700]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4aae      	ldr	r2, [pc, #696]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9c:	4bac      	ldr	r3, [pc, #688]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4aab      	ldr	r2, [pc, #684]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ca8:	4aa9      	ldr	r2, [pc, #676]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb8:	d115      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe f9f5 	bl	80010a8 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc0:	e00b      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fe f9f1 	bl	80010a8 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d902      	bls.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	75fb      	strb	r3, [r7, #23]
            break;
 8002cd8:	e005      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cda:	4b9d      	ldr	r3, [pc, #628]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0ed      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d126      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cfa:	d10d      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002cfc:	4b94      	ldr	r3, [pc, #592]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d0a:	0919      	lsrs	r1, r3, #4
 8002d0c:	4b91      	ldr	r3, [pc, #580]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002d0e:	400b      	ands	r3, r1
 8002d10:	498f      	ldr	r1, [pc, #572]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	610b      	str	r3, [r1, #16]
 8002d16:	e005      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002d18:	4b8d      	ldr	r3, [pc, #564]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	4a8c      	ldr	r2, [pc, #560]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d22:	6113      	str	r3, [r2, #16]
 8002d24:	4b8a      	ldr	r3, [pc, #552]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d32:	4987      	ldr	r1, [pc, #540]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	670b      	str	r3, [r1, #112]	; 0x70
 8002d38:	e004      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	75bb      	strb	r3, [r7, #22]
 8002d3e:	e001      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d07f      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d56:	2b28      	cmp	r3, #40	; 0x28
 8002d58:	d866      	bhi.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002d5a:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002e2f 	.word	0x08002e2f
 8002d64:	08002e29 	.word	0x08002e29
 8002d68:	08002e29 	.word	0x08002e29
 8002d6c:	08002e29 	.word	0x08002e29
 8002d70:	08002e29 	.word	0x08002e29
 8002d74:	08002e29 	.word	0x08002e29
 8002d78:	08002e29 	.word	0x08002e29
 8002d7c:	08002e29 	.word	0x08002e29
 8002d80:	08002e05 	.word	0x08002e05
 8002d84:	08002e29 	.word	0x08002e29
 8002d88:	08002e29 	.word	0x08002e29
 8002d8c:	08002e29 	.word	0x08002e29
 8002d90:	08002e29 	.word	0x08002e29
 8002d94:	08002e29 	.word	0x08002e29
 8002d98:	08002e29 	.word	0x08002e29
 8002d9c:	08002e29 	.word	0x08002e29
 8002da0:	08002e17 	.word	0x08002e17
 8002da4:	08002e29 	.word	0x08002e29
 8002da8:	08002e29 	.word	0x08002e29
 8002dac:	08002e29 	.word	0x08002e29
 8002db0:	08002e29 	.word	0x08002e29
 8002db4:	08002e29 	.word	0x08002e29
 8002db8:	08002e29 	.word	0x08002e29
 8002dbc:	08002e29 	.word	0x08002e29
 8002dc0:	08002e2f 	.word	0x08002e2f
 8002dc4:	08002e29 	.word	0x08002e29
 8002dc8:	08002e29 	.word	0x08002e29
 8002dcc:	08002e29 	.word	0x08002e29
 8002dd0:	08002e29 	.word	0x08002e29
 8002dd4:	08002e29 	.word	0x08002e29
 8002dd8:	08002e29 	.word	0x08002e29
 8002ddc:	08002e29 	.word	0x08002e29
 8002de0:	08002e2f 	.word	0x08002e2f
 8002de4:	08002e29 	.word	0x08002e29
 8002de8:	08002e29 	.word	0x08002e29
 8002dec:	08002e29 	.word	0x08002e29
 8002df0:	08002e29 	.word	0x08002e29
 8002df4:	08002e29 	.word	0x08002e29
 8002df8:	08002e29 	.word	0x08002e29
 8002dfc:	08002e29 	.word	0x08002e29
 8002e00:	08002e2f 	.word	0x08002e2f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	2101      	movs	r1, #1
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fdf8 	bl	8003a00 <RCCEx_PLL2_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e14:	e00c      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3324      	adds	r3, #36	; 0x24
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fea1 	bl	8003b64 <RCCEx_PLL3_Config>
 8002e22:	4603      	mov	r3, r0
 8002e24:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e26:	e003      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e2c:	e000      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e36:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e44:	4942      	ldr	r1, [pc, #264]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	654b      	str	r3, [r1, #84]	; 0x54
 8002e4a:	e001      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4c:	7dfb      	ldrb	r3, [r7, #23]
 8002e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d038      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d821      	bhi.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002e64:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002eaf 	.word	0x08002eaf
 8002e70:	08002e85 	.word	0x08002e85
 8002e74:	08002e97 	.word	0x08002e97
 8002e78:	08002eaf 	.word	0x08002eaf
 8002e7c:	08002eaf 	.word	0x08002eaf
 8002e80:	08002eaf 	.word	0x08002eaf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	2101      	movs	r1, #1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fdb8 	bl	8003a00 <RCCEx_PLL2_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e94:	e00c      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3324      	adds	r3, #36	; 0x24
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fe61 	bl	8003b64 <RCCEx_PLL3_Config>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ea6:	e003      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8002eac:	e000      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f023 0207 	bic.w	r2, r3, #7
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec2:	4923      	ldr	r1, [pc, #140]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	654b      	str	r3, [r1, #84]	; 0x54
 8002ec8:	e001      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
 8002ecc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d040      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d821      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002f2f 	.word	0x08002f2f
 8002ef0:	08002f05 	.word	0x08002f05
 8002ef4:	08002f17 	.word	0x08002f17
 8002ef8:	08002f2f 	.word	0x08002f2f
 8002efc:	08002f2f 	.word	0x08002f2f
 8002f00:	08002f2f 	.word	0x08002f2f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fd78 	bl	8003a00 <RCCEx_PLL2_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f14:	e00c      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3324      	adds	r3, #36	; 0x24
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fe21 	bl	8003b64 <RCCEx_PLL3_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f26:	e003      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f2c:	e000      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d110      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	f023 0207 	bic.w	r2, r3, #7
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f44:	4902      	ldr	r1, [pc, #8]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	658b      	str	r3, [r1, #88]	; 0x58
 8002f4a:	e007      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002f4c:	58024800 	.word	0x58024800
 8002f50:	58024400 	.word	0x58024400
 8002f54:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d04b      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f72:	d02e      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f78:	d828      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7e:	d02a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f84:	d822      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002f86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f8a:	d026      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002f8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f90:	d81c      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f96:	d010      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9c:	d816      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01d      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fa6:	d111      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fd26 	bl	8003a00 <RCCEx_PLL2_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fb8:	e012      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3324      	adds	r3, #36	; 0x24
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fdcf 	bl	8003b64 <RCCEx_PLL3_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fca:	e009      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd0:	e006      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e004      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e002      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fe6:	4bb3      	ldr	r3, [pc, #716]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff4:	49af      	ldr	r1, [pc, #700]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	654b      	str	r3, [r1, #84]	; 0x54
 8002ffa:	e001      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
 8002ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d04b      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003012:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003016:	d02e      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003018:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800301c:	d828      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003022:	d02a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003028:	d822      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800302a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800302e:	d026      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003030:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003034:	d81c      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800303a:	d010      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800303c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003040:	d816      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01d      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304a:	d111      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fcd4 	bl	8003a00 <RCCEx_PLL2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800305c:	e012      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3324      	adds	r3, #36	; 0x24
 8003062:	2102      	movs	r1, #2
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fd7d 	bl	8003b64 <RCCEx_PLL3_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800306e:	e009      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	75fb      	strb	r3, [r7, #23]
      break;
 8003074:	e006      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003076:	bf00      	nop
 8003078:	e004      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800307a:	bf00      	nop
 800307c:	e002      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800308a:	4b8a      	ldr	r3, [pc, #552]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003098:	4986      	ldr	r1, [pc, #536]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800309a:	4313      	orrs	r3, r2
 800309c:	658b      	str	r3, [r1, #88]	; 0x58
 800309e:	e001      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d04b      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030ba:	d02e      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80030bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030c0:	d828      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c6:	d02a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80030c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030cc:	d822      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030d2:	d026      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80030d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030d8:	d81c      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030de:	d010      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80030e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e4:	d816      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01d      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80030ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ee:	d111      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fc82 	bl	8003a00 <RCCEx_PLL2_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003100:	e012      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3324      	adds	r3, #36	; 0x24
 8003106:	2102      	movs	r1, #2
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fd2b 	bl	8003b64 <RCCEx_PLL3_Config>
 800310e:	4603      	mov	r3, r0
 8003110:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003112:	e009      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	75fb      	strb	r3, [r7, #23]
      break;
 8003118:	e006      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800311a:	bf00      	nop
 800311c:	e004      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800311e:	bf00      	nop
 8003120:	e002      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800312e:	4b61      	ldr	r3, [pc, #388]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800313c:	495d      	ldr	r1, [pc, #372]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800313e:	4313      	orrs	r3, r2
 8003140:	658b      	str	r3, [r1, #88]	; 0x58
 8003142:	e001      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315e:	d10a      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3324      	adds	r3, #36	; 0x24
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fcfc 	bl	8003b64 <RCCEx_PLL3_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003176:	4b4f      	ldr	r3, [pc, #316]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	494b      	ldr	r1, [pc, #300]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003186:	4313      	orrs	r3, r2
 8003188:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	d01a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800319c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a0:	d10a      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3324      	adds	r3, #36	; 0x24
 80031a6:	2102      	movs	r1, #2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fcdb 	bl	8003b64 <RCCEx_PLL3_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031b8:	4b3e      	ldr	r3, [pc, #248]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031c6:	493b      	ldr	r1, [pc, #236]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d034      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031e2:	d01d      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80031e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031e8:	d817      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f2:	d009      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80031f4:	e011      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fbff 	bl	8003a00 <RCCEx_PLL2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003206:	e00c      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3324      	adds	r3, #36	; 0x24
 800320c:	2102      	movs	r1, #2
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fca8 	bl	8003b64 <RCCEx_PLL3_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003218:	e003      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
      break;
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003228:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003236:	491f      	ldr	r1, [pc, #124]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003238:	4313      	orrs	r3, r2
 800323a:	658b      	str	r3, [r1, #88]	; 0x58
 800323c:	e001      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
 8003240:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d036      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003254:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003258:	d01c      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800325a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800325e:	d816      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003264:	d003      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800326a:	d007      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800326c:	e00f      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003278:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800327a:	e00c      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3324      	adds	r3, #36	; 0x24
 8003280:	2101      	movs	r1, #1
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fc6e 	bl	8003b64 <RCCEx_PLL3_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	75fb      	strb	r3, [r7, #23]
      break;
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10d      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032aa:	4902      	ldr	r1, [pc, #8]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	654b      	str	r3, [r1, #84]	; 0x54
 80032b0:	e004      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80032b2:	bf00      	nop
 80032b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d029      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d007      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80032d6:	e00f      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d8:	4b69      	ldr	r3, [pc, #420]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	4a68      	ldr	r2, [pc, #416]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80032e4:	e00b      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3304      	adds	r3, #4
 80032ea:	2102      	movs	r1, #2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fb87 	bl	8003a00 <RCCEx_PLL2_Config>
 80032f2:	4603      	mov	r3, r0
 80032f4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	75fb      	strb	r3, [r7, #23]
      break;
 80032fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d109      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003304:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003310:	495b      	ldr	r1, [pc, #364]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003312:	4313      	orrs	r3, r2
 8003314:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003316:	e001      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3324      	adds	r3, #36	; 0x24
 800332c:	2102      	movs	r1, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fc18 	bl	8003b64 <RCCEx_PLL3_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d032      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003354:	d017      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8003356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800335a:	d811      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800335c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003360:	d013      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8003362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003366:	d80b      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d010      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800336c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003370:	d106      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003372:	4b43      	ldr	r3, [pc, #268]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	4a42      	ldr	r2, [pc, #264]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800337e:	e007      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	75fb      	strb	r3, [r7, #23]
      break;
 8003384:	e004      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003386:	bf00      	nop
 8003388:	e002      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800338e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003396:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a4:	4936      	ldr	r1, [pc, #216]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	654b      	str	r3, [r1, #84]	; 0x54
 80033aa:	e001      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033bc:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c8:	492d      	ldr	r1, [pc, #180]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e6:	4926      	ldr	r1, [pc, #152]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80033f8:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	491e      	ldr	r1, [pc, #120]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003406:	4313      	orrs	r3, r2
 8003408:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003416:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	4a19      	ldr	r2, [pc, #100]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800341c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003420:	6113      	str	r3, [r2, #16]
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800342c:	4914      	ldr	r1, [pc, #80]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800342e:	4313      	orrs	r3, r2
 8003430:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	da08      	bge.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	490e      	ldr	r1, [pc, #56]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003448:	4313      	orrs	r3, r2
 800344a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003458:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	4906      	ldr	r1, [pc, #24]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003468:	4313      	orrs	r3, r2
 800346a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800346c:	7dbb      	ldrb	r3, [r7, #22]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	58024400 	.word	0x58024400

08003484 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003488:	f7ff f852 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4904      	ldr	r1, [pc, #16]	; (80034ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	58024400 	.word	0x58024400
 80034ac:	08008d9c 	.word	0x08008d9c

080034b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034b8:	4ba1      	ldr	r3, [pc, #644]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80034c2:	4b9f      	ldr	r3, [pc, #636]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	0b1b      	lsrs	r3, r3, #12
 80034c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80034ce:	4b9c      	ldr	r3, [pc, #624]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034da:	4b99      	ldr	r3, [pc, #612]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	08db      	lsrs	r3, r3, #3
 80034e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8111 	beq.w	8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b02      	cmp	r3, #2
 8003502:	f000 8083 	beq.w	800360c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b02      	cmp	r3, #2
 800350a:	f200 80a1 	bhi.w	8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d056      	beq.n	80035c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800351a:	e099      	b.n	8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800351c:	4b88      	ldr	r3, [pc, #544]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d02d      	beq.n	8003584 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003528:	4b85      	ldr	r3, [pc, #532]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	08db      	lsrs	r3, r3, #3
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	4a84      	ldr	r2, [pc, #528]	; (8003744 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
 8003538:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	ee07 3a90 	vmov	s15, r3
 8003540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003552:	4b7b      	ldr	r3, [pc, #492]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355a:	ee07 3a90 	vmov	s15, r3
 800355e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003562:	ed97 6a03 	vldr	s12, [r7, #12]
 8003566:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800356a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800356e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800357a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003582:	e087      	b.n	8003694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800374c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003596:	4b6a      	ldr	r3, [pc, #424]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80035aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035c6:	e065      	b.n	8003694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003750 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80035d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035da:	4b59      	ldr	r3, [pc, #356]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80035ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003606:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800360a:	e043      	b.n	8003694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003616:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800361a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361e:	4b48      	ldr	r3, [pc, #288]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003632:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800363a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800364e:	e021      	b.n	8003694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003750 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800365e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003662:	4b37      	ldr	r3, [pc, #220]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003672:	ed97 6a03 	vldr	s12, [r7, #12]
 8003676:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800367a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003692:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003694:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	0a5b      	lsrs	r3, r3, #9
 800369a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80036b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ba:	ee17 2a90 	vmov	r2, s15
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036c2:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	0c1b      	lsrs	r3, r3, #16
 80036c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80036e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036e8:	ee17 2a90 	vmov	r2, s15
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	0e1b      	lsrs	r3, r3, #24
 80036f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800370a:	edd7 6a07 	vldr	s13, [r7, #28]
 800370e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003716:	ee17 2a90 	vmov	r2, s15
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800371e:	e008      	b.n	8003732 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	bf00      	nop
 8003734:	3724      	adds	r7, #36	; 0x24
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	58024400 	.word	0x58024400
 8003744:	03d09000 	.word	0x03d09000
 8003748:	46000000 	.word	0x46000000
 800374c:	4c742400 	.word	0x4c742400
 8003750:	4a742400 	.word	0x4a742400
 8003754:	4af42400 	.word	0x4af42400

08003758 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003760:	4ba1      	ldr	r3, [pc, #644]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800376a:	4b9f      	ldr	r3, [pc, #636]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	0d1b      	lsrs	r3, r3, #20
 8003770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003774:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003776:	4b9c      	ldr	r3, [pc, #624]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003782:	4b99      	ldr	r3, [pc, #612]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	08db      	lsrs	r3, r3, #3
 8003788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8111 	beq.w	80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	f000 8083 	beq.w	80038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	f200 80a1 	bhi.w	80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d056      	beq.n	8003870 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80037c2:	e099      	b.n	80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037c4:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02d      	beq.n	800382c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037d0:	4b85      	ldr	r3, [pc, #532]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	08db      	lsrs	r3, r3, #3
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	4a84      	ldr	r2, [pc, #528]	; (80039ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
 80037e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fa:	4b7b      	ldr	r3, [pc, #492]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380a:	ed97 6a03 	vldr	s12, [r7, #12]
 800380e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800381e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003826:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800382a:	e087      	b.n	800393c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800383a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383e:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003852:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800386e:	e065      	b.n	800393c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800387e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003882:	4b59      	ldr	r3, [pc, #356]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003892:	ed97 6a03 	vldr	s12, [r7, #12]
 8003896:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800389a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800389e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038b2:	e043      	b.n	800393c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80038c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c6:	4b48      	ldr	r3, [pc, #288]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038f6:	e021      	b.n	800393c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b37      	ldr	r3, [pc, #220]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a03 	vldr	s12, [r7, #12]
 800391e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800393a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800393c:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	0a5b      	lsrs	r3, r3, #9
 8003942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003956:	edd7 6a07 	vldr	s13, [r7, #28]
 800395a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800395e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003962:	ee17 2a90 	vmov	r2, s15
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800396a:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	0c1b      	lsrs	r3, r3, #16
 8003970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003974:	ee07 3a90 	vmov	s15, r3
 8003978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003980:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003984:	edd7 6a07 	vldr	s13, [r7, #28]
 8003988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003990:	ee17 2a90 	vmov	r2, s15
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	0e1b      	lsrs	r3, r3, #24
 800399e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80039b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039be:	ee17 2a90 	vmov	r2, s15
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80039c6:	e008      	b.n	80039da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	609a      	str	r2, [r3, #8]
}
 80039da:	bf00      	nop
 80039dc:	3724      	adds	r7, #36	; 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	58024400 	.word	0x58024400
 80039ec:	03d09000 	.word	0x03d09000
 80039f0:	46000000 	.word	0x46000000
 80039f4:	4c742400 	.word	0x4c742400
 80039f8:	4a742400 	.word	0x4a742400
 80039fc:	4af42400 	.word	0x4af42400

08003a00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a0e:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d101      	bne.n	8003a1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e099      	b.n	8003b52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a1e:	4b4f      	ldr	r3, [pc, #316]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a4e      	ldr	r2, [pc, #312]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003a24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2a:	f7fd fb3d 	bl	80010a8 <HAL_GetTick>
 8003a2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a32:	f7fd fb39 	bl	80010a8 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e086      	b.n	8003b52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a44:	4b45      	ldr	r3, [pc, #276]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a50:	4b42      	ldr	r3, [pc, #264]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	031b      	lsls	r3, r3, #12
 8003a5e:	493f      	ldr	r1, [pc, #252]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	628b      	str	r3, [r1, #40]	; 0x28
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	025b      	lsls	r3, r3, #9
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a94:	4931      	ldr	r1, [pc, #196]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a9a:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	492d      	ldr	r1, [pc, #180]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	f023 0220 	bic.w	r2, r3, #32
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	4928      	ldr	r1, [pc, #160]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003abe:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003ac4:	f023 0310 	bic.w	r3, r3, #16
 8003ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003aca:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <RCCEx_PLL2_Config+0x160>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	69d2      	ldr	r2, [r2, #28]
 8003ad6:	00d2      	lsls	r2, r2, #3
 8003ad8:	4920      	ldr	r1, [pc, #128]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003ae4:	f043 0310 	orr.w	r3, r3, #16
 8003ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003af0:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003af6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003afa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003afc:	e00f      	b.n	8003b1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d106      	bne.n	8003b12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b04:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b10:	e005      	b.n	8003b1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	4a11      	ldr	r2, [pc, #68]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003b24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b2a:	f7fd fabd 	bl	80010a8 <HAL_GetTick>
 8003b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b30:	e008      	b.n	8003b44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b32:	f7fd fab9 	bl	80010a8 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e006      	b.n	8003b52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <RCCEx_PLL2_Config+0x15c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	ffff0007 	.word	0xffff0007

08003b64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b72:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d101      	bne.n	8003b82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e099      	b.n	8003cb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b82:	4b4f      	ldr	r3, [pc, #316]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a4e      	ldr	r2, [pc, #312]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b8e:	f7fd fa8b 	bl	80010a8 <HAL_GetTick>
 8003b92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b94:	e008      	b.n	8003ba8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b96:	f7fd fa87 	bl	80010a8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e086      	b.n	8003cb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ba8:	4b45      	ldr	r3, [pc, #276]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f0      	bne.n	8003b96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003bb4:	4b42      	ldr	r3, [pc, #264]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	051b      	lsls	r3, r3, #20
 8003bc2:	493f      	ldr	r1, [pc, #252]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	628b      	str	r3, [r1, #40]	; 0x28
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	025b      	lsls	r3, r3, #9
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	041b      	lsls	r3, r3, #16
 8003be6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bf8:	4931      	ldr	r1, [pc, #196]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003bfe:	4b30      	ldr	r3, [pc, #192]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	492d      	ldr	r1, [pc, #180]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003c10:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	4928      	ldr	r1, [pc, #160]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003c22:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003c2e:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <RCCEx_PLL3_Config+0x160>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	69d2      	ldr	r2, [r2, #28]
 8003c3a:	00d2      	lsls	r2, r2, #3
 8003c3c:	4920      	ldr	r1, [pc, #128]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003c42:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c60:	e00f      	b.n	8003c82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d106      	bne.n	8003c76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c68:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c74:	e005      	b.n	8003c82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	4a11      	ldr	r2, [pc, #68]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c82:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a0e      	ldr	r2, [pc, #56]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8e:	f7fd fa0b 	bl	80010a8 <HAL_GetTick>
 8003c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c94:	e008      	b.n	8003ca8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c96:	f7fd fa07 	bl	80010a8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e006      	b.n	8003cb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <RCCEx_PLL3_Config+0x15c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	58024400 	.word	0x58024400
 8003cc4:	ffff0007 	.word	0xffff0007

08003cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e049      	b.n	8003d6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f841 	bl	8003d76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f000 fa00 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d001      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e054      	b.n	8003e4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d022      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x80>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dce:	d01d      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x80>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d018      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x80>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a21      	ldr	r2, [pc, #132]	; (8003e64 <HAL_TIM_Base_Start_IT+0xd8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d013      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x80>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1f      	ldr	r2, [pc, #124]	; (8003e68 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00e      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x80>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <HAL_TIM_Base_Start_IT+0xe0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d009      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x80>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a1c      	ldr	r2, [pc, #112]	; (8003e70 <HAL_TIM_Base_Start_IT+0xe4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x80>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d115      	bne.n	8003e38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <HAL_TIM_Base_Start_IT+0xec>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d015      	beq.n	8003e4a <HAL_TIM_Base_Start_IT+0xbe>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d011      	beq.n	8003e4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e36:	e008      	b.n	8003e4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e000      	b.n	8003e4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40000800 	.word	0x40000800
 8003e68:	40000c00 	.word	0x40000c00
 8003e6c:	40010400 	.word	0x40010400
 8003e70:	40001800 	.word	0x40001800
 8003e74:	40014000 	.word	0x40014000
 8003e78:	00010007 	.word	0x00010007

08003e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0202 	mvn.w	r2, #2
 8003ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f905 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f8f7 	bl	80040ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f908 	bl	80040e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d122      	bne.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d11b      	bne.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0204 	mvn.w	r2, #4
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f8db 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8cd 	bl	80040ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f8de 	bl	80040e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d122      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0208 	mvn.w	r2, #8
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2204      	movs	r2, #4
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8b1 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8a3 	bl	80040ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8b4 	bl	80040e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d122      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0210 	mvn.w	r2, #16
 8003fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f887 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f879 	bl	80040ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f88a 	bl	80040e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10e      	bne.n	8004000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d107      	bne.n	8004000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0201 	mvn.w	r2, #1
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc fd00 	bl	8000a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	2b80      	cmp	r3, #128	; 0x80
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f914 	bl	8004254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403a:	d10e      	bne.n	800405a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d107      	bne.n	800405a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f907 	bl	8004268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d10e      	bne.n	8004086 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d107      	bne.n	8004086 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800407e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f838 	bl	80040f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b20      	cmp	r3, #32
 8004092:	d10e      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d107      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f06f 0220 	mvn.w	r2, #32
 80040aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f8c7 	bl	8004240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a40      	ldr	r2, [pc, #256]	; (8004220 <TIM_Base_SetConfig+0x114>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d013      	beq.n	800414c <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412a:	d00f      	beq.n	800414c <TIM_Base_SetConfig+0x40>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a3d      	ldr	r2, [pc, #244]	; (8004224 <TIM_Base_SetConfig+0x118>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00b      	beq.n	800414c <TIM_Base_SetConfig+0x40>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a3c      	ldr	r2, [pc, #240]	; (8004228 <TIM_Base_SetConfig+0x11c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d007      	beq.n	800414c <TIM_Base_SetConfig+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a3b      	ldr	r2, [pc, #236]	; (800422c <TIM_Base_SetConfig+0x120>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a3a      	ldr	r2, [pc, #232]	; (8004230 <TIM_Base_SetConfig+0x124>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d108      	bne.n	800415e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2f      	ldr	r2, [pc, #188]	; (8004220 <TIM_Base_SetConfig+0x114>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01f      	beq.n	80041a6 <TIM_Base_SetConfig+0x9a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416c:	d01b      	beq.n	80041a6 <TIM_Base_SetConfig+0x9a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2c      	ldr	r2, [pc, #176]	; (8004224 <TIM_Base_SetConfig+0x118>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d017      	beq.n	80041a6 <TIM_Base_SetConfig+0x9a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2b      	ldr	r2, [pc, #172]	; (8004228 <TIM_Base_SetConfig+0x11c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <TIM_Base_SetConfig+0x9a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2a      	ldr	r2, [pc, #168]	; (800422c <TIM_Base_SetConfig+0x120>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00f      	beq.n	80041a6 <TIM_Base_SetConfig+0x9a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a29      	ldr	r2, [pc, #164]	; (8004230 <TIM_Base_SetConfig+0x124>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00b      	beq.n	80041a6 <TIM_Base_SetConfig+0x9a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a28      	ldr	r2, [pc, #160]	; (8004234 <TIM_Base_SetConfig+0x128>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <TIM_Base_SetConfig+0x9a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a27      	ldr	r2, [pc, #156]	; (8004238 <TIM_Base_SetConfig+0x12c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_Base_SetConfig+0x9a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a26      	ldr	r2, [pc, #152]	; (800423c <TIM_Base_SetConfig+0x130>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d108      	bne.n	80041b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a10      	ldr	r2, [pc, #64]	; (8004220 <TIM_Base_SetConfig+0x114>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00f      	beq.n	8004204 <TIM_Base_SetConfig+0xf8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a12      	ldr	r2, [pc, #72]	; (8004230 <TIM_Base_SetConfig+0x124>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00b      	beq.n	8004204 <TIM_Base_SetConfig+0xf8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a11      	ldr	r2, [pc, #68]	; (8004234 <TIM_Base_SetConfig+0x128>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <TIM_Base_SetConfig+0xf8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a10      	ldr	r2, [pc, #64]	; (8004238 <TIM_Base_SetConfig+0x12c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_Base_SetConfig+0xf8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a0f      	ldr	r2, [pc, #60]	; (800423c <TIM_Base_SetConfig+0x130>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d103      	bne.n	800420c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	615a      	str	r2, [r3, #20]
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40010000 	.word	0x40010000
 8004224:	40000400 	.word	0x40000400
 8004228:	40000800 	.word	0x40000800
 800422c:	40000c00 	.word	0x40000c00
 8004230:	40010400 	.word	0x40010400
 8004234:	40014000 	.word	0x40014000
 8004238:	40014400 	.word	0x40014400
 800423c:	40014800 	.word	0x40014800

08004240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e042      	b.n	8004314 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fc fe19 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2224      	movs	r2, #36	; 0x24
 80042aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f996 	bl	80045f0 <UART_SetConfig>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e022      	b.n	8004314 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 ffe8 	bl	80052ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f001 f86f 	bl	80053f0 <UART_CheckIdleState>
 8004312:	4603      	mov	r3, r0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004332:	2b20      	cmp	r3, #32
 8004334:	f040 8083 	bne.w	800443e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_UART_Transmit+0x28>
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e07b      	b.n	8004440 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_UART_Transmit+0x3a>
 8004352:	2302      	movs	r3, #2
 8004354:	e074      	b.n	8004440 <HAL_UART_Transmit+0x124>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2221      	movs	r2, #33	; 0x21
 800436a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800436e:	f7fc fe9b 	bl	80010a8 <HAL_GetTick>
 8004372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438c:	d108      	bne.n	80043a0 <HAL_UART_Transmit+0x84>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d104      	bne.n	80043a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	e003      	b.n	80043a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80043b0:	e02c      	b.n	800440c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f001 f862 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e039      	b.n	8004440 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10b      	bne.n	80043ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	3302      	adds	r3, #2
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	e007      	b.n	80043fa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	781a      	ldrb	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	3301      	adds	r3, #1
 80043f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1cc      	bne.n	80043b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2200      	movs	r2, #0
 8004420:	2140      	movs	r1, #64	; 0x40
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f001 f82f 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e006      	b.n	8004440 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e000      	b.n	8004440 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800443e:	2302      	movs	r3, #2
  }
}
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445e:	2b20      	cmp	r3, #32
 8004460:	f040 80c0 	bne.w	80045e4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_UART_Receive+0x28>
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0b8      	b.n	80045e6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_UART_Receive+0x3a>
 800447e:	2302      	movs	r3, #2
 8004480:	e0b1      	b.n	80045e6 <HAL_UART_Receive+0x19e>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2222      	movs	r2, #34	; 0x22
 8004496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044a0:	f7fc fe02 	bl	80010a8 <HAL_GetTick>
 80044a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	88fa      	ldrh	r2, [r7, #6]
 80044b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044be:	d10e      	bne.n	80044de <HAL_UART_Receive+0x96>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <HAL_UART_Receive+0x8c>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044d2:	e02d      	b.n	8004530 <HAL_UART_Receive+0xe8>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	22ff      	movs	r2, #255	; 0xff
 80044d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044dc:	e028      	b.n	8004530 <HAL_UART_Receive+0xe8>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10d      	bne.n	8004502 <HAL_UART_Receive+0xba>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <HAL_UART_Receive+0xb0>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	22ff      	movs	r2, #255	; 0xff
 80044f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044f6:	e01b      	b.n	8004530 <HAL_UART_Receive+0xe8>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	227f      	movs	r2, #127	; 0x7f
 80044fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004500:	e016      	b.n	8004530 <HAL_UART_Receive+0xe8>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800450a:	d10d      	bne.n	8004528 <HAL_UART_Receive+0xe0>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d104      	bne.n	800451e <HAL_UART_Receive+0xd6>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	227f      	movs	r2, #127	; 0x7f
 8004518:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800451c:	e008      	b.n	8004530 <HAL_UART_Receive+0xe8>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	223f      	movs	r2, #63	; 0x3f
 8004522:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004526:	e003      	b.n	8004530 <HAL_UART_Receive+0xe8>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004536:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004540:	d108      	bne.n	8004554 <HAL_UART_Receive+0x10c>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d104      	bne.n	8004554 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	e003      	b.n	800455c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004564:	e032      	b.n	80045cc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2200      	movs	r2, #0
 800456e:	2120      	movs	r1, #32
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 ff88 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e032      	b.n	80045e6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10c      	bne.n	80045a0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	b29a      	uxth	r2, r3
 800458e:	8a7b      	ldrh	r3, [r7, #18]
 8004590:	4013      	ands	r3, r2
 8004592:	b29a      	uxth	r2, r3
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	3302      	adds	r3, #2
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e00c      	b.n	80045ba <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	8a7b      	ldrh	r3, [r7, #18]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	4013      	ands	r3, r2
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1c6      	bne.n	8004566 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
  }
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b5b0      	push	{r4, r5, r7, lr}
 80045f2:	b08e      	sub	sp, #56	; 0x38
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	4313      	orrs	r3, r2
 8004614:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	4bbf      	ldr	r3, [pc, #764]	; (800491c <UART_SetConfig+0x32c>)
 800461e:	4013      	ands	r3, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004626:	430b      	orrs	r3, r1
 8004628:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4ab5      	ldr	r2, [pc, #724]	; (8004920 <UART_SetConfig+0x330>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004656:	4313      	orrs	r3, r2
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	4bb0      	ldr	r3, [pc, #704]	; (8004924 <UART_SetConfig+0x334>)
 8004662:	4013      	ands	r3, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800466a:	430b      	orrs	r3, r1
 800466c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	f023 010f 	bic.w	r1, r3, #15
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4aa7      	ldr	r2, [pc, #668]	; (8004928 <UART_SetConfig+0x338>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d176      	bne.n	800477c <UART_SetConfig+0x18c>
 800468e:	4ba7      	ldr	r3, [pc, #668]	; (800492c <UART_SetConfig+0x33c>)
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004696:	2b28      	cmp	r3, #40	; 0x28
 8004698:	d86c      	bhi.n	8004774 <UART_SetConfig+0x184>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <UART_SetConfig+0xb0>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	08004745 	.word	0x08004745
 80046a4:	08004775 	.word	0x08004775
 80046a8:	08004775 	.word	0x08004775
 80046ac:	08004775 	.word	0x08004775
 80046b0:	08004775 	.word	0x08004775
 80046b4:	08004775 	.word	0x08004775
 80046b8:	08004775 	.word	0x08004775
 80046bc:	08004775 	.word	0x08004775
 80046c0:	0800474d 	.word	0x0800474d
 80046c4:	08004775 	.word	0x08004775
 80046c8:	08004775 	.word	0x08004775
 80046cc:	08004775 	.word	0x08004775
 80046d0:	08004775 	.word	0x08004775
 80046d4:	08004775 	.word	0x08004775
 80046d8:	08004775 	.word	0x08004775
 80046dc:	08004775 	.word	0x08004775
 80046e0:	08004755 	.word	0x08004755
 80046e4:	08004775 	.word	0x08004775
 80046e8:	08004775 	.word	0x08004775
 80046ec:	08004775 	.word	0x08004775
 80046f0:	08004775 	.word	0x08004775
 80046f4:	08004775 	.word	0x08004775
 80046f8:	08004775 	.word	0x08004775
 80046fc:	08004775 	.word	0x08004775
 8004700:	0800475d 	.word	0x0800475d
 8004704:	08004775 	.word	0x08004775
 8004708:	08004775 	.word	0x08004775
 800470c:	08004775 	.word	0x08004775
 8004710:	08004775 	.word	0x08004775
 8004714:	08004775 	.word	0x08004775
 8004718:	08004775 	.word	0x08004775
 800471c:	08004775 	.word	0x08004775
 8004720:	08004765 	.word	0x08004765
 8004724:	08004775 	.word	0x08004775
 8004728:	08004775 	.word	0x08004775
 800472c:	08004775 	.word	0x08004775
 8004730:	08004775 	.word	0x08004775
 8004734:	08004775 	.word	0x08004775
 8004738:	08004775 	.word	0x08004775
 800473c:	08004775 	.word	0x08004775
 8004740:	0800476d 	.word	0x0800476d
 8004744:	2301      	movs	r3, #1
 8004746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800474a:	e326      	b.n	8004d9a <UART_SetConfig+0x7aa>
 800474c:	2304      	movs	r3, #4
 800474e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004752:	e322      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004754:	2308      	movs	r3, #8
 8004756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800475a:	e31e      	b.n	8004d9a <UART_SetConfig+0x7aa>
 800475c:	2310      	movs	r3, #16
 800475e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004762:	e31a      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004764:	2320      	movs	r3, #32
 8004766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800476a:	e316      	b.n	8004d9a <UART_SetConfig+0x7aa>
 800476c:	2340      	movs	r3, #64	; 0x40
 800476e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004772:	e312      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800477a:	e30e      	b.n	8004d9a <UART_SetConfig+0x7aa>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a6b      	ldr	r2, [pc, #428]	; (8004930 <UART_SetConfig+0x340>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d130      	bne.n	80047e8 <UART_SetConfig+0x1f8>
 8004786:	4b69      	ldr	r3, [pc, #420]	; (800492c <UART_SetConfig+0x33c>)
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	2b05      	cmp	r3, #5
 8004790:	d826      	bhi.n	80047e0 <UART_SetConfig+0x1f0>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <UART_SetConfig+0x1a8>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	080047b1 	.word	0x080047b1
 800479c:	080047b9 	.word	0x080047b9
 80047a0:	080047c1 	.word	0x080047c1
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047d9 	.word	0x080047d9
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047b6:	e2f0      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047be:	e2ec      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047c6:	e2e8      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ce:	e2e4      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80047d0:	2320      	movs	r3, #32
 80047d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047d6:	e2e0      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80047d8:	2340      	movs	r3, #64	; 0x40
 80047da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047de:	e2dc      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047e6:	e2d8      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a51      	ldr	r2, [pc, #324]	; (8004934 <UART_SetConfig+0x344>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d130      	bne.n	8004854 <UART_SetConfig+0x264>
 80047f2:	4b4e      	ldr	r3, [pc, #312]	; (800492c <UART_SetConfig+0x33c>)
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	d826      	bhi.n	800484c <UART_SetConfig+0x25c>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x214>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	0800481d 	.word	0x0800481d
 8004808:	08004825 	.word	0x08004825
 800480c:	0800482d 	.word	0x0800482d
 8004810:	08004835 	.word	0x08004835
 8004814:	0800483d 	.word	0x0800483d
 8004818:	08004845 	.word	0x08004845
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004822:	e2ba      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004824:	2304      	movs	r3, #4
 8004826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800482a:	e2b6      	b.n	8004d9a <UART_SetConfig+0x7aa>
 800482c:	2308      	movs	r3, #8
 800482e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004832:	e2b2      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004834:	2310      	movs	r3, #16
 8004836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800483a:	e2ae      	b.n	8004d9a <UART_SetConfig+0x7aa>
 800483c:	2320      	movs	r3, #32
 800483e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004842:	e2aa      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004844:	2340      	movs	r3, #64	; 0x40
 8004846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800484a:	e2a6      	b.n	8004d9a <UART_SetConfig+0x7aa>
 800484c:	2380      	movs	r3, #128	; 0x80
 800484e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004852:	e2a2      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a37      	ldr	r2, [pc, #220]	; (8004938 <UART_SetConfig+0x348>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d130      	bne.n	80048c0 <UART_SetConfig+0x2d0>
 800485e:	4b33      	ldr	r3, [pc, #204]	; (800492c <UART_SetConfig+0x33c>)
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b05      	cmp	r3, #5
 8004868:	d826      	bhi.n	80048b8 <UART_SetConfig+0x2c8>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <UART_SetConfig+0x280>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004889 	.word	0x08004889
 8004874:	08004891 	.word	0x08004891
 8004878:	08004899 	.word	0x08004899
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a9 	.word	0x080048a9
 8004884:	080048b1 	.word	0x080048b1
 8004888:	2300      	movs	r3, #0
 800488a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800488e:	e284      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004890:	2304      	movs	r3, #4
 8004892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004896:	e280      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004898:	2308      	movs	r3, #8
 800489a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800489e:	e27c      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80048a0:	2310      	movs	r3, #16
 80048a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048a6:	e278      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80048a8:	2320      	movs	r3, #32
 80048aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ae:	e274      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80048b0:	2340      	movs	r3, #64	; 0x40
 80048b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048b6:	e270      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048be:	e26c      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1d      	ldr	r2, [pc, #116]	; (800493c <UART_SetConfig+0x34c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d142      	bne.n	8004950 <UART_SetConfig+0x360>
 80048ca:	4b18      	ldr	r3, [pc, #96]	; (800492c <UART_SetConfig+0x33c>)
 80048cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	d838      	bhi.n	8004948 <UART_SetConfig+0x358>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x2ec>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	080048f5 	.word	0x080048f5
 80048e0:	080048fd 	.word	0x080048fd
 80048e4:	08004905 	.word	0x08004905
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	08004915 	.word	0x08004915
 80048f0:	08004941 	.word	0x08004941
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048fa:	e24e      	b.n	8004d9a <UART_SetConfig+0x7aa>
 80048fc:	2304      	movs	r3, #4
 80048fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004902:	e24a      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004904:	2308      	movs	r3, #8
 8004906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800490a:	e246      	b.n	8004d9a <UART_SetConfig+0x7aa>
 800490c:	2310      	movs	r3, #16
 800490e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004912:	e242      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004914:	2320      	movs	r3, #32
 8004916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800491a:	e23e      	b.n	8004d9a <UART_SetConfig+0x7aa>
 800491c:	cfff69f3 	.word	0xcfff69f3
 8004920:	58000c00 	.word	0x58000c00
 8004924:	11fff4ff 	.word	0x11fff4ff
 8004928:	40011000 	.word	0x40011000
 800492c:	58024400 	.word	0x58024400
 8004930:	40004400 	.word	0x40004400
 8004934:	40004800 	.word	0x40004800
 8004938:	40004c00 	.word	0x40004c00
 800493c:	40005000 	.word	0x40005000
 8004940:	2340      	movs	r3, #64	; 0x40
 8004942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004946:	e228      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800494e:	e224      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4ab1      	ldr	r2, [pc, #708]	; (8004c1c <UART_SetConfig+0x62c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d176      	bne.n	8004a48 <UART_SetConfig+0x458>
 800495a:	4bb1      	ldr	r3, [pc, #708]	; (8004c20 <UART_SetConfig+0x630>)
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004962:	2b28      	cmp	r3, #40	; 0x28
 8004964:	d86c      	bhi.n	8004a40 <UART_SetConfig+0x450>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <UART_SetConfig+0x37c>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	08004a11 	.word	0x08004a11
 8004970:	08004a41 	.word	0x08004a41
 8004974:	08004a41 	.word	0x08004a41
 8004978:	08004a41 	.word	0x08004a41
 800497c:	08004a41 	.word	0x08004a41
 8004980:	08004a41 	.word	0x08004a41
 8004984:	08004a41 	.word	0x08004a41
 8004988:	08004a41 	.word	0x08004a41
 800498c:	08004a19 	.word	0x08004a19
 8004990:	08004a41 	.word	0x08004a41
 8004994:	08004a41 	.word	0x08004a41
 8004998:	08004a41 	.word	0x08004a41
 800499c:	08004a41 	.word	0x08004a41
 80049a0:	08004a41 	.word	0x08004a41
 80049a4:	08004a41 	.word	0x08004a41
 80049a8:	08004a41 	.word	0x08004a41
 80049ac:	08004a21 	.word	0x08004a21
 80049b0:	08004a41 	.word	0x08004a41
 80049b4:	08004a41 	.word	0x08004a41
 80049b8:	08004a41 	.word	0x08004a41
 80049bc:	08004a41 	.word	0x08004a41
 80049c0:	08004a41 	.word	0x08004a41
 80049c4:	08004a41 	.word	0x08004a41
 80049c8:	08004a41 	.word	0x08004a41
 80049cc:	08004a29 	.word	0x08004a29
 80049d0:	08004a41 	.word	0x08004a41
 80049d4:	08004a41 	.word	0x08004a41
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	08004a41 	.word	0x08004a41
 80049e0:	08004a41 	.word	0x08004a41
 80049e4:	08004a41 	.word	0x08004a41
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a31 	.word	0x08004a31
 80049f0:	08004a41 	.word	0x08004a41
 80049f4:	08004a41 	.word	0x08004a41
 80049f8:	08004a41 	.word	0x08004a41
 80049fc:	08004a41 	.word	0x08004a41
 8004a00:	08004a41 	.word	0x08004a41
 8004a04:	08004a41 	.word	0x08004a41
 8004a08:	08004a41 	.word	0x08004a41
 8004a0c:	08004a39 	.word	0x08004a39
 8004a10:	2301      	movs	r3, #1
 8004a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a16:	e1c0      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a1e:	e1bc      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004a20:	2308      	movs	r3, #8
 8004a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a26:	e1b8      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a2e:	e1b4      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004a30:	2320      	movs	r3, #32
 8004a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a36:	e1b0      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004a38:	2340      	movs	r3, #64	; 0x40
 8004a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a3e:	e1ac      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a46:	e1a8      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a75      	ldr	r2, [pc, #468]	; (8004c24 <UART_SetConfig+0x634>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d130      	bne.n	8004ab4 <UART_SetConfig+0x4c4>
 8004a52:	4b73      	ldr	r3, [pc, #460]	; (8004c20 <UART_SetConfig+0x630>)
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	2b05      	cmp	r3, #5
 8004a5c:	d826      	bhi.n	8004aac <UART_SetConfig+0x4bc>
 8004a5e:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <UART_SetConfig+0x474>)
 8004a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a64:	08004a7d 	.word	0x08004a7d
 8004a68:	08004a85 	.word	0x08004a85
 8004a6c:	08004a8d 	.word	0x08004a8d
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a82:	e18a      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004a84:	2304      	movs	r3, #4
 8004a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a8a:	e186      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a92:	e182      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004a94:	2310      	movs	r3, #16
 8004a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a9a:	e17e      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aa2:	e17a      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004aa4:	2340      	movs	r3, #64	; 0x40
 8004aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aaa:	e176      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004aac:	2380      	movs	r3, #128	; 0x80
 8004aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ab2:	e172      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a5b      	ldr	r2, [pc, #364]	; (8004c28 <UART_SetConfig+0x638>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d130      	bne.n	8004b20 <UART_SetConfig+0x530>
 8004abe:	4b58      	ldr	r3, [pc, #352]	; (8004c20 <UART_SetConfig+0x630>)
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	2b05      	cmp	r3, #5
 8004ac8:	d826      	bhi.n	8004b18 <UART_SetConfig+0x528>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <UART_SetConfig+0x4e0>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004ae9 	.word	0x08004ae9
 8004ad4:	08004af1 	.word	0x08004af1
 8004ad8:	08004af9 	.word	0x08004af9
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b09 	.word	0x08004b09
 8004ae4:	08004b11 	.word	0x08004b11
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aee:	e154      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004af0:	2304      	movs	r3, #4
 8004af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004af6:	e150      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004af8:	2308      	movs	r3, #8
 8004afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004afe:	e14c      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004b00:	2310      	movs	r3, #16
 8004b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b06:	e148      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004b08:	2320      	movs	r3, #32
 8004b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b0e:	e144      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004b10:	2340      	movs	r3, #64	; 0x40
 8004b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b16:	e140      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004b18:	2380      	movs	r3, #128	; 0x80
 8004b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b1e:	e13c      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a41      	ldr	r2, [pc, #260]	; (8004c2c <UART_SetConfig+0x63c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	f040 8082 	bne.w	8004c30 <UART_SetConfig+0x640>
 8004b2c:	4b3c      	ldr	r3, [pc, #240]	; (8004c20 <UART_SetConfig+0x630>)
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b34:	2b28      	cmp	r3, #40	; 0x28
 8004b36:	d86d      	bhi.n	8004c14 <UART_SetConfig+0x624>
 8004b38:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <UART_SetConfig+0x550>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004be5 	.word	0x08004be5
 8004b44:	08004c15 	.word	0x08004c15
 8004b48:	08004c15 	.word	0x08004c15
 8004b4c:	08004c15 	.word	0x08004c15
 8004b50:	08004c15 	.word	0x08004c15
 8004b54:	08004c15 	.word	0x08004c15
 8004b58:	08004c15 	.word	0x08004c15
 8004b5c:	08004c15 	.word	0x08004c15
 8004b60:	08004bed 	.word	0x08004bed
 8004b64:	08004c15 	.word	0x08004c15
 8004b68:	08004c15 	.word	0x08004c15
 8004b6c:	08004c15 	.word	0x08004c15
 8004b70:	08004c15 	.word	0x08004c15
 8004b74:	08004c15 	.word	0x08004c15
 8004b78:	08004c15 	.word	0x08004c15
 8004b7c:	08004c15 	.word	0x08004c15
 8004b80:	08004bf5 	.word	0x08004bf5
 8004b84:	08004c15 	.word	0x08004c15
 8004b88:	08004c15 	.word	0x08004c15
 8004b8c:	08004c15 	.word	0x08004c15
 8004b90:	08004c15 	.word	0x08004c15
 8004b94:	08004c15 	.word	0x08004c15
 8004b98:	08004c15 	.word	0x08004c15
 8004b9c:	08004c15 	.word	0x08004c15
 8004ba0:	08004bfd 	.word	0x08004bfd
 8004ba4:	08004c15 	.word	0x08004c15
 8004ba8:	08004c15 	.word	0x08004c15
 8004bac:	08004c15 	.word	0x08004c15
 8004bb0:	08004c15 	.word	0x08004c15
 8004bb4:	08004c15 	.word	0x08004c15
 8004bb8:	08004c15 	.word	0x08004c15
 8004bbc:	08004c15 	.word	0x08004c15
 8004bc0:	08004c05 	.word	0x08004c05
 8004bc4:	08004c15 	.word	0x08004c15
 8004bc8:	08004c15 	.word	0x08004c15
 8004bcc:	08004c15 	.word	0x08004c15
 8004bd0:	08004c15 	.word	0x08004c15
 8004bd4:	08004c15 	.word	0x08004c15
 8004bd8:	08004c15 	.word	0x08004c15
 8004bdc:	08004c15 	.word	0x08004c15
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bea:	e0d6      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004bec:	2304      	movs	r3, #4
 8004bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bf2:	e0d2      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bfa:	e0ce      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c02:	e0ca      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004c04:	2320      	movs	r3, #32
 8004c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0a:	e0c6      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004c0c:	2340      	movs	r3, #64	; 0x40
 8004c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c12:	e0c2      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c1a:	e0be      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004c1c:	40011400 	.word	0x40011400
 8004c20:	58024400 	.word	0x58024400
 8004c24:	40007800 	.word	0x40007800
 8004c28:	40007c00 	.word	0x40007c00
 8004c2c:	40011800 	.word	0x40011800
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4aad      	ldr	r2, [pc, #692]	; (8004eec <UART_SetConfig+0x8fc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d176      	bne.n	8004d28 <UART_SetConfig+0x738>
 8004c3a:	4bad      	ldr	r3, [pc, #692]	; (8004ef0 <UART_SetConfig+0x900>)
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c42:	2b28      	cmp	r3, #40	; 0x28
 8004c44:	d86c      	bhi.n	8004d20 <UART_SetConfig+0x730>
 8004c46:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <UART_SetConfig+0x65c>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004cf1 	.word	0x08004cf1
 8004c50:	08004d21 	.word	0x08004d21
 8004c54:	08004d21 	.word	0x08004d21
 8004c58:	08004d21 	.word	0x08004d21
 8004c5c:	08004d21 	.word	0x08004d21
 8004c60:	08004d21 	.word	0x08004d21
 8004c64:	08004d21 	.word	0x08004d21
 8004c68:	08004d21 	.word	0x08004d21
 8004c6c:	08004cf9 	.word	0x08004cf9
 8004c70:	08004d21 	.word	0x08004d21
 8004c74:	08004d21 	.word	0x08004d21
 8004c78:	08004d21 	.word	0x08004d21
 8004c7c:	08004d21 	.word	0x08004d21
 8004c80:	08004d21 	.word	0x08004d21
 8004c84:	08004d21 	.word	0x08004d21
 8004c88:	08004d21 	.word	0x08004d21
 8004c8c:	08004d01 	.word	0x08004d01
 8004c90:	08004d21 	.word	0x08004d21
 8004c94:	08004d21 	.word	0x08004d21
 8004c98:	08004d21 	.word	0x08004d21
 8004c9c:	08004d21 	.word	0x08004d21
 8004ca0:	08004d21 	.word	0x08004d21
 8004ca4:	08004d21 	.word	0x08004d21
 8004ca8:	08004d21 	.word	0x08004d21
 8004cac:	08004d09 	.word	0x08004d09
 8004cb0:	08004d21 	.word	0x08004d21
 8004cb4:	08004d21 	.word	0x08004d21
 8004cb8:	08004d21 	.word	0x08004d21
 8004cbc:	08004d21 	.word	0x08004d21
 8004cc0:	08004d21 	.word	0x08004d21
 8004cc4:	08004d21 	.word	0x08004d21
 8004cc8:	08004d21 	.word	0x08004d21
 8004ccc:	08004d11 	.word	0x08004d11
 8004cd0:	08004d21 	.word	0x08004d21
 8004cd4:	08004d21 	.word	0x08004d21
 8004cd8:	08004d21 	.word	0x08004d21
 8004cdc:	08004d21 	.word	0x08004d21
 8004ce0:	08004d21 	.word	0x08004d21
 8004ce4:	08004d21 	.word	0x08004d21
 8004ce8:	08004d21 	.word	0x08004d21
 8004cec:	08004d19 	.word	0x08004d19
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cf6:	e050      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cfe:	e04c      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d00:	2308      	movs	r3, #8
 8004d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d06:	e048      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d0e:	e044      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d10:	2320      	movs	r3, #32
 8004d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d16:	e040      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d18:	2340      	movs	r3, #64	; 0x40
 8004d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d1e:	e03c      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d26:	e038      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a71      	ldr	r2, [pc, #452]	; (8004ef4 <UART_SetConfig+0x904>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d130      	bne.n	8004d94 <UART_SetConfig+0x7a4>
 8004d32:	4b6f      	ldr	r3, [pc, #444]	; (8004ef0 <UART_SetConfig+0x900>)
 8004d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d826      	bhi.n	8004d8c <UART_SetConfig+0x79c>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <UART_SetConfig+0x754>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d5d 	.word	0x08004d5d
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	08004d6d 	.word	0x08004d6d
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d85 	.word	0x08004d85
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d62:	e01a      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d64:	2304      	movs	r3, #4
 8004d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d6a:	e016      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d72:	e012      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d74:	2310      	movs	r3, #16
 8004d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d7a:	e00e      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d7c:	2320      	movs	r3, #32
 8004d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d82:	e00a      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d84:	2340      	movs	r3, #64	; 0x40
 8004d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d8a:	e006      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d92:	e002      	b.n	8004d9a <UART_SetConfig+0x7aa>
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a55      	ldr	r2, [pc, #340]	; (8004ef4 <UART_SetConfig+0x904>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	f040 80f0 	bne.w	8004f86 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004da6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	dc46      	bgt.n	8004e3c <UART_SetConfig+0x84c>
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	db75      	blt.n	8004e9e <UART_SetConfig+0x8ae>
 8004db2:	3b02      	subs	r3, #2
 8004db4:	2b1e      	cmp	r3, #30
 8004db6:	d872      	bhi.n	8004e9e <UART_SetConfig+0x8ae>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <UART_SetConfig+0x7d0>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004e43 	.word	0x08004e43
 8004dc4:	08004e9f 	.word	0x08004e9f
 8004dc8:	08004e4b 	.word	0x08004e4b
 8004dcc:	08004e9f 	.word	0x08004e9f
 8004dd0:	08004e9f 	.word	0x08004e9f
 8004dd4:	08004e9f 	.word	0x08004e9f
 8004dd8:	08004e5b 	.word	0x08004e5b
 8004ddc:	08004e9f 	.word	0x08004e9f
 8004de0:	08004e9f 	.word	0x08004e9f
 8004de4:	08004e9f 	.word	0x08004e9f
 8004de8:	08004e9f 	.word	0x08004e9f
 8004dec:	08004e9f 	.word	0x08004e9f
 8004df0:	08004e9f 	.word	0x08004e9f
 8004df4:	08004e9f 	.word	0x08004e9f
 8004df8:	08004e6b 	.word	0x08004e6b
 8004dfc:	08004e9f 	.word	0x08004e9f
 8004e00:	08004e9f 	.word	0x08004e9f
 8004e04:	08004e9f 	.word	0x08004e9f
 8004e08:	08004e9f 	.word	0x08004e9f
 8004e0c:	08004e9f 	.word	0x08004e9f
 8004e10:	08004e9f 	.word	0x08004e9f
 8004e14:	08004e9f 	.word	0x08004e9f
 8004e18:	08004e9f 	.word	0x08004e9f
 8004e1c:	08004e9f 	.word	0x08004e9f
 8004e20:	08004e9f 	.word	0x08004e9f
 8004e24:	08004e9f 	.word	0x08004e9f
 8004e28:	08004e9f 	.word	0x08004e9f
 8004e2c:	08004e9f 	.word	0x08004e9f
 8004e30:	08004e9f 	.word	0x08004e9f
 8004e34:	08004e9f 	.word	0x08004e9f
 8004e38:	08004e91 	.word	0x08004e91
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d02a      	beq.n	8004e96 <UART_SetConfig+0x8a6>
 8004e40:	e02d      	b.n	8004e9e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e42:	f7fe fb1f 	bl	8003484 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004e48:	e02f      	b.n	8004eaa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e4a:	f107 0314 	add.w	r3, r7, #20
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fb2e 	bl	80034b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e58:	e027      	b.n	8004eaa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fc7a 	bl	8003758 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e68:	e01f      	b.n	8004eaa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e6a:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <UART_SetConfig+0x900>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e76:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <UART_SetConfig+0x900>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	08db      	lsrs	r3, r3, #3
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <UART_SetConfig+0x908>)
 8004e82:	fa22 f303 	lsr.w	r3, r2, r3
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e88:	e00f      	b.n	8004eaa <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <UART_SetConfig+0x908>)
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e8e:	e00c      	b.n	8004eaa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e90:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <UART_SetConfig+0x90c>)
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e94:	e009      	b.n	8004eaa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e9c:	e005      	b.n	8004eaa <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004ea8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 81e6 	beq.w	800527e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	4a12      	ldr	r2, [pc, #72]	; (8004f00 <UART_SetConfig+0x910>)
 8004eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	4413      	add	r3, r2
 8004ed0:	6a3a      	ldr	r2, [r7, #32]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d305      	bcc.n	8004ee2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d910      	bls.n	8004f04 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004ee8:	e1c9      	b.n	800527e <UART_SetConfig+0xc8e>
 8004eea:	bf00      	nop
 8004eec:	40011c00 	.word	0x40011c00
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	58000c00 	.word	0x58000c00
 8004ef8:	03d09000 	.word	0x03d09000
 8004efc:	003d0900 	.word	0x003d0900
 8004f00:	08008dac 	.word	0x08008dac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	4618      	mov	r0, r3
 8004f08:	f04f 0100 	mov.w	r1, #0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	4ac1      	ldr	r2, [pc, #772]	; (8005218 <UART_SetConfig+0xc28>)
 8004f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	f7fb f9e8 	bl	80002f0 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	020b      	lsls	r3, r1, #8
 8004f32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f36:	0202      	lsls	r2, r0, #8
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	6849      	ldr	r1, [r1, #4]
 8004f3c:	0849      	lsrs	r1, r1, #1
 8004f3e:	4608      	mov	r0, r1
 8004f40:	f04f 0100 	mov.w	r1, #0
 8004f44:	1814      	adds	r4, r2, r0
 8004f46:	eb43 0501 	adc.w	r5, r3, r1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	4620      	mov	r0, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	f7fb f9ca 	bl	80002f0 <__aeabi_uldivmod>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4613      	mov	r3, r2
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6a:	d308      	bcc.n	8004f7e <UART_SetConfig+0x98e>
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f72:	d204      	bcs.n	8004f7e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7a:	60da      	str	r2, [r3, #12]
 8004f7c:	e17f      	b.n	800527e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004f84:	e17b      	b.n	800527e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8e:	f040 80bd 	bne.w	800510c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8004f92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	dc48      	bgt.n	800502c <UART_SetConfig+0xa3c>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	db7b      	blt.n	8005096 <UART_SetConfig+0xaa6>
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d879      	bhi.n	8005096 <UART_SetConfig+0xaa6>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <UART_SetConfig+0x9b8>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08005033 	.word	0x08005033
 8004fac:	0800503b 	.word	0x0800503b
 8004fb0:	08005097 	.word	0x08005097
 8004fb4:	08005097 	.word	0x08005097
 8004fb8:	08005043 	.word	0x08005043
 8004fbc:	08005097 	.word	0x08005097
 8004fc0:	08005097 	.word	0x08005097
 8004fc4:	08005097 	.word	0x08005097
 8004fc8:	08005053 	.word	0x08005053
 8004fcc:	08005097 	.word	0x08005097
 8004fd0:	08005097 	.word	0x08005097
 8004fd4:	08005097 	.word	0x08005097
 8004fd8:	08005097 	.word	0x08005097
 8004fdc:	08005097 	.word	0x08005097
 8004fe0:	08005097 	.word	0x08005097
 8004fe4:	08005097 	.word	0x08005097
 8004fe8:	08005063 	.word	0x08005063
 8004fec:	08005097 	.word	0x08005097
 8004ff0:	08005097 	.word	0x08005097
 8004ff4:	08005097 	.word	0x08005097
 8004ff8:	08005097 	.word	0x08005097
 8004ffc:	08005097 	.word	0x08005097
 8005000:	08005097 	.word	0x08005097
 8005004:	08005097 	.word	0x08005097
 8005008:	08005097 	.word	0x08005097
 800500c:	08005097 	.word	0x08005097
 8005010:	08005097 	.word	0x08005097
 8005014:	08005097 	.word	0x08005097
 8005018:	08005097 	.word	0x08005097
 800501c:	08005097 	.word	0x08005097
 8005020:	08005097 	.word	0x08005097
 8005024:	08005097 	.word	0x08005097
 8005028:	08005089 	.word	0x08005089
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d02e      	beq.n	800508e <UART_SetConfig+0xa9e>
 8005030:	e031      	b.n	8005096 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005032:	f7fd faad 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8005036:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005038:	e033      	b.n	80050a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800503a:	f7fd fabf 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 800503e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005040:	e02f      	b.n	80050a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005042:	f107 0314 	add.w	r3, r7, #20
 8005046:	4618      	mov	r0, r3
 8005048:	f7fe fa32 	bl	80034b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005050:	e027      	b.n	80050a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005052:	f107 0308 	add.w	r3, r7, #8
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fb7e 	bl	8003758 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005060:	e01f      	b.n	80050a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005062:	4b6e      	ldr	r3, [pc, #440]	; (800521c <UART_SetConfig+0xc2c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800506e:	4b6b      	ldr	r3, [pc, #428]	; (800521c <UART_SetConfig+0xc2c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	08db      	lsrs	r3, r3, #3
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	4a69      	ldr	r2, [pc, #420]	; (8005220 <UART_SetConfig+0xc30>)
 800507a:	fa22 f303 	lsr.w	r3, r2, r3
 800507e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005080:	e00f      	b.n	80050a2 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8005082:	4b67      	ldr	r3, [pc, #412]	; (8005220 <UART_SetConfig+0xc30>)
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005086:	e00c      	b.n	80050a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005088:	4b66      	ldr	r3, [pc, #408]	; (8005224 <UART_SetConfig+0xc34>)
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800508c:	e009      	b.n	80050a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005094:	e005      	b.n	80050a2 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80050a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80ea 	beq.w	800527e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	4a5a      	ldr	r2, [pc, #360]	; (8005218 <UART_SetConfig+0xc28>)
 80050b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80050bc:	005a      	lsls	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	085b      	lsrs	r3, r3, #1
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	2b0f      	cmp	r3, #15
 80050d4:	d916      	bls.n	8005104 <UART_SetConfig+0xb14>
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050dc:	d212      	bcs.n	8005104 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f023 030f 	bic.w	r3, r3, #15
 80050e6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050f6:	4313      	orrs	r3, r2
 80050f8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005100:	60da      	str	r2, [r3, #12]
 8005102:	e0bc      	b.n	800527e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800510a:	e0b8      	b.n	800527e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800510c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005110:	2b20      	cmp	r3, #32
 8005112:	dc4b      	bgt.n	80051ac <UART_SetConfig+0xbbc>
 8005114:	2b00      	cmp	r3, #0
 8005116:	f2c0 8087 	blt.w	8005228 <UART_SetConfig+0xc38>
 800511a:	2b20      	cmp	r3, #32
 800511c:	f200 8084 	bhi.w	8005228 <UART_SetConfig+0xc38>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0xb38>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	080051b3 	.word	0x080051b3
 800512c:	080051bb 	.word	0x080051bb
 8005130:	08005229 	.word	0x08005229
 8005134:	08005229 	.word	0x08005229
 8005138:	080051c3 	.word	0x080051c3
 800513c:	08005229 	.word	0x08005229
 8005140:	08005229 	.word	0x08005229
 8005144:	08005229 	.word	0x08005229
 8005148:	080051d3 	.word	0x080051d3
 800514c:	08005229 	.word	0x08005229
 8005150:	08005229 	.word	0x08005229
 8005154:	08005229 	.word	0x08005229
 8005158:	08005229 	.word	0x08005229
 800515c:	08005229 	.word	0x08005229
 8005160:	08005229 	.word	0x08005229
 8005164:	08005229 	.word	0x08005229
 8005168:	080051e3 	.word	0x080051e3
 800516c:	08005229 	.word	0x08005229
 8005170:	08005229 	.word	0x08005229
 8005174:	08005229 	.word	0x08005229
 8005178:	08005229 	.word	0x08005229
 800517c:	08005229 	.word	0x08005229
 8005180:	08005229 	.word	0x08005229
 8005184:	08005229 	.word	0x08005229
 8005188:	08005229 	.word	0x08005229
 800518c:	08005229 	.word	0x08005229
 8005190:	08005229 	.word	0x08005229
 8005194:	08005229 	.word	0x08005229
 8005198:	08005229 	.word	0x08005229
 800519c:	08005229 	.word	0x08005229
 80051a0:	08005229 	.word	0x08005229
 80051a4:	08005229 	.word	0x08005229
 80051a8:	08005209 	.word	0x08005209
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	d02e      	beq.n	800520e <UART_SetConfig+0xc1e>
 80051b0:	e03a      	b.n	8005228 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b2:	f7fd f9ed 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 80051b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80051b8:	e03c      	b.n	8005234 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ba:	f7fd f9ff 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 80051be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80051c0:	e038      	b.n	8005234 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051c2:	f107 0314 	add.w	r3, r7, #20
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe f972 	bl	80034b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051d0:	e030      	b.n	8005234 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051d2:	f107 0308 	add.w	r3, r7, #8
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fe fabe 	bl	8003758 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051e0:	e028      	b.n	8005234 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e2:	4b0e      	ldr	r3, [pc, #56]	; (800521c <UART_SetConfig+0xc2c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051ee:	4b0b      	ldr	r3, [pc, #44]	; (800521c <UART_SetConfig+0xc2c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	08db      	lsrs	r3, r3, #3
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <UART_SetConfig+0xc30>)
 80051fa:	fa22 f303 	lsr.w	r3, r2, r3
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005200:	e018      	b.n	8005234 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8005202:	4b07      	ldr	r3, [pc, #28]	; (8005220 <UART_SetConfig+0xc30>)
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005206:	e015      	b.n	8005234 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <UART_SetConfig+0xc34>)
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800520c:	e012      	b.n	8005234 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005214:	e00e      	b.n	8005234 <UART_SetConfig+0xc44>
 8005216:	bf00      	nop
 8005218:	08008dac 	.word	0x08008dac
 800521c:	58024400 	.word	0x58024400
 8005220:	03d09000 	.word	0x03d09000
 8005224:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005232:	bf00      	nop
    }

    if (pclk != 0U)
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d021      	beq.n	800527e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <UART_SetConfig+0xcb8>)
 8005240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005244:	461a      	mov	r2, r3
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	fbb3 f2f2 	udiv	r2, r3, r2
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	441a      	add	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	fbb2 f3f3 	udiv	r3, r2, r3
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	2b0f      	cmp	r3, #15
 8005262:	d909      	bls.n	8005278 <UART_SetConfig+0xc88>
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526a:	d205      	bcs.n	8005278 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60da      	str	r2, [r3, #12]
 8005276:	e002      	b.n	800527e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800529a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3738      	adds	r7, #56	; 0x38
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bdb0      	pop	{r4, r5, r7, pc}
 80052a6:	bf00      	nop
 80052a8:	08008dac 	.word	0x08008dac

080052ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01a      	beq.n	80053c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053aa:	d10a      	bne.n	80053c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005400:	f7fb fe52 	bl	80010a8 <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b08      	cmp	r3, #8
 8005412:	d10e      	bne.n	8005432 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f82f 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e025      	b.n	800547e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b04      	cmp	r3, #4
 800543e:	d10e      	bne.n	800545e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f819 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e00f      	b.n	800547e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b09c      	sub	sp, #112	; 0x70
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005496:	e0a9      	b.n	80055ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800549e:	f000 80a5 	beq.w	80055ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a2:	f7fb fe01 	bl	80010a8 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d302      	bcc.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80054b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d140      	bne.n	800553a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054cc:	667b      	str	r3, [r7, #100]	; 0x64
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e6      	bne.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	663b      	str	r3, [r7, #96]	; 0x60
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3308      	adds	r3, #8
 8005508:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800550a:	64ba      	str	r2, [r7, #72]	; 0x48
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e5      	bne.n	80054ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e069      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d051      	beq.n	80055ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005556:	d149      	bne.n	80055ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005560:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005576:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
 8005582:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e6      	bne.n	8005562 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	613b      	str	r3, [r7, #16]
   return(result);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f023 0301 	bic.w	r3, r3, #1
 80055aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3308      	adds	r3, #8
 80055b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055b4:	623a      	str	r2, [r7, #32]
 80055b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	69f9      	ldr	r1, [r7, #28]
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e5      	bne.n	8005594 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e010      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4013      	ands	r3, r2
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	bf0c      	ite	eq
 80055fc:	2301      	moveq	r3, #1
 80055fe:	2300      	movne	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	429a      	cmp	r2, r3
 8005608:	f43f af46 	beq.w	8005498 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3770      	adds	r7, #112	; 0x70
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_UARTEx_DisableFifoMode+0x16>
 8005628:	2302      	movs	r3, #2
 800562a:	e027      	b.n	800567c <HAL_UARTEx_DisableFifoMode+0x66>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2224      	movs	r2, #36	; 0x24
 8005638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800565a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800569c:	2302      	movs	r3, #2
 800569e:	e02d      	b.n	80056fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2224      	movs	r2, #36	; 0x24
 80056ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f84f 	bl	8005780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005718:	2302      	movs	r3, #2
 800571a:	e02d      	b.n	8005778 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2224      	movs	r2, #36	; 0x24
 8005728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0201 	bic.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f811 	bl	8005780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800578c:	2b00      	cmp	r3, #0
 800578e:	d108      	bne.n	80057a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057a0:	e031      	b.n	8005806 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057a2:	2310      	movs	r3, #16
 80057a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057a6:	2310      	movs	r3, #16
 80057a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	0e5b      	lsrs	r3, r3, #25
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	0f5b      	lsrs	r3, r3, #29
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ca:	7bbb      	ldrb	r3, [r7, #14]
 80057cc:	7b3a      	ldrb	r2, [r7, #12]
 80057ce:	4911      	ldr	r1, [pc, #68]	; (8005814 <UARTEx_SetNbDataToProcess+0x94>)
 80057d0:	5c8a      	ldrb	r2, [r1, r2]
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057d6:	7b3a      	ldrb	r2, [r7, #12]
 80057d8:	490f      	ldr	r1, [pc, #60]	; (8005818 <UARTEx_SetNbDataToProcess+0x98>)
 80057da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	7b7a      	ldrb	r2, [r7, #13]
 80057ec:	4909      	ldr	r1, [pc, #36]	; (8005814 <UARTEx_SetNbDataToProcess+0x94>)
 80057ee:	5c8a      	ldrb	r2, [r1, r2]
 80057f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057f4:	7b7a      	ldrb	r2, [r7, #13]
 80057f6:	4908      	ldr	r1, [pc, #32]	; (8005818 <UARTEx_SetNbDataToProcess+0x98>)
 80057f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005806:	bf00      	nop
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	08008dc4 	.word	0x08008dc4
 8005818:	08008dcc 	.word	0x08008dcc

0800581c <__NVIC_SetPriority>:
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	6039      	str	r1, [r7, #0]
 8005826:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800582c:	2b00      	cmp	r3, #0
 800582e:	db0a      	blt.n	8005846 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	490c      	ldr	r1, [pc, #48]	; (8005868 <__NVIC_SetPriority+0x4c>)
 8005836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800583a:	0112      	lsls	r2, r2, #4
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	440b      	add	r3, r1
 8005840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005844:	e00a      	b.n	800585c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	4908      	ldr	r1, [pc, #32]	; (800586c <__NVIC_SetPriority+0x50>)
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	3b04      	subs	r3, #4
 8005854:	0112      	lsls	r2, r2, #4
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	440b      	add	r3, r1
 800585a:	761a      	strb	r2, [r3, #24]
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	e000e100 	.word	0xe000e100
 800586c:	e000ed00 	.word	0xe000ed00

08005870 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <SysTick_Handler+0x1c>)
 8005876:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005878:	f001 fd28 	bl	80072cc <xTaskGetSchedulerState>
 800587c:	4603      	mov	r3, r0
 800587e:	2b01      	cmp	r3, #1
 8005880:	d001      	beq.n	8005886 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005882:	f002 fb11 	bl	8007ea8 <xPortSysTickHandler>
  }
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	e000e010 	.word	0xe000e010

08005890 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005894:	2100      	movs	r1, #0
 8005896:	f06f 0004 	mvn.w	r0, #4
 800589a:	f7ff ffbf 	bl	800581c <__NVIC_SetPriority>
#endif
}
 800589e:	bf00      	nop
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058aa:	f3ef 8305 	mrs	r3, IPSR
 80058ae:	603b      	str	r3, [r7, #0]
  return(result);
 80058b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80058b6:	f06f 0305 	mvn.w	r3, #5
 80058ba:	607b      	str	r3, [r7, #4]
 80058bc:	e00c      	b.n	80058d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <osKernelInitialize+0x44>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d105      	bne.n	80058d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058c6:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <osKernelInitialize+0x44>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	607b      	str	r3, [r7, #4]
 80058d0:	e002      	b.n	80058d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058d8:	687b      	ldr	r3, [r7, #4]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	24000098 	.word	0x24000098

080058ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058f2:	f3ef 8305 	mrs	r3, IPSR
 80058f6:	603b      	str	r3, [r7, #0]
  return(result);
 80058f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <osKernelStart+0x1a>
    stat = osErrorISR;
 80058fe:	f06f 0305 	mvn.w	r3, #5
 8005902:	607b      	str	r3, [r7, #4]
 8005904:	e010      	b.n	8005928 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <osKernelStart+0x48>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d109      	bne.n	8005922 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800590e:	f7ff ffbf 	bl	8005890 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <osKernelStart+0x48>)
 8005914:	2202      	movs	r2, #2
 8005916:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005918:	f001 f87c 	bl	8006a14 <vTaskStartScheduler>
      stat = osOK;
 800591c:	2300      	movs	r3, #0
 800591e:	607b      	str	r3, [r7, #4]
 8005920:	e002      	b.n	8005928 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005926:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005928:	687b      	ldr	r3, [r7, #4]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	24000098 	.word	0x24000098

08005938 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b08e      	sub	sp, #56	; 0x38
 800593c:	af04      	add	r7, sp, #16
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005948:	f3ef 8305 	mrs	r3, IPSR
 800594c:	617b      	str	r3, [r7, #20]
  return(result);
 800594e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005950:	2b00      	cmp	r3, #0
 8005952:	d17e      	bne.n	8005a52 <osThreadNew+0x11a>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d07b      	beq.n	8005a52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800595a:	2380      	movs	r3, #128	; 0x80
 800595c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800595e:	2318      	movs	r3, #24
 8005960:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800596a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d045      	beq.n	80059fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <osThreadNew+0x48>
        name = attr->name;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <osThreadNew+0x6e>
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	2b38      	cmp	r3, #56	; 0x38
 8005998:	d805      	bhi.n	80059a6 <osThreadNew+0x6e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <osThreadNew+0x72>
        return (NULL);
 80059a6:	2300      	movs	r3, #0
 80059a8:	e054      	b.n	8005a54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	089b      	lsrs	r3, r3, #2
 80059b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00e      	beq.n	80059e0 <osThreadNew+0xa8>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	2bbb      	cmp	r3, #187	; 0xbb
 80059c8:	d90a      	bls.n	80059e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d006      	beq.n	80059e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <osThreadNew+0xa8>
        mem = 1;
 80059da:	2301      	movs	r3, #1
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	e010      	b.n	8005a02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10c      	bne.n	8005a02 <osThreadNew+0xca>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d108      	bne.n	8005a02 <osThreadNew+0xca>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d104      	bne.n	8005a02 <osThreadNew+0xca>
          mem = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	e001      	b.n	8005a02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d110      	bne.n	8005a2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a10:	9202      	str	r2, [sp, #8]
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fe0c 	bl	800663c <xTaskCreateStatic>
 8005a24:	4603      	mov	r3, r0
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	e013      	b.n	8005a52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d110      	bne.n	8005a52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	f107 0310 	add.w	r3, r7, #16
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fe57 	bl	80066f6 <xTaskCreate>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d001      	beq.n	8005a52 <osThreadNew+0x11a>
            hTask = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a52:	693b      	ldr	r3, [r7, #16]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3728      	adds	r7, #40	; 0x28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a64:	f3ef 8305 	mrs	r3, IPSR
 8005a68:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <osDelay+0x1c>
    stat = osErrorISR;
 8005a70:	f06f 0305 	mvn.w	r3, #5
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e007      	b.n	8005a88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 ff92 	bl	80069ac <vTaskDelay>
    }
  }

  return (stat);
 8005a88:	68fb      	ldr	r3, [r7, #12]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a07      	ldr	r2, [pc, #28]	; (8005ac0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005aa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4a06      	ldr	r2, [pc, #24]	; (8005ac4 <vApplicationGetIdleTaskMemory+0x30>)
 8005aaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2280      	movs	r2, #128	; 0x80
 8005ab0:	601a      	str	r2, [r3, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	2400009c 	.word	0x2400009c
 8005ac4:	24000158 	.word	0x24000158

08005ac8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4a07      	ldr	r2, [pc, #28]	; (8005af4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ad8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	4a06      	ldr	r2, [pc, #24]	; (8005af8 <vApplicationGetTimerTaskMemory+0x30>)
 8005ade:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae6:	601a      	str	r2, [r3, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	24000358 	.word	0x24000358
 8005af8:	24000414 	.word	0x24000414

08005afc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f103 0208 	add.w	r2, r3, #8
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f103 0208 	add.w	r2, r3, #8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f103 0208 	add.w	r2, r3, #8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb4:	d103      	bne.n	8005bbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e00c      	b.n	8005bd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e002      	b.n	8005bcc <vListInsert+0x2e>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d2f6      	bcs.n	8005bc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6892      	ldr	r2, [r2, #8]
 8005c26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6852      	ldr	r2, [r2, #4]
 8005c30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d103      	bne.n	8005c44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	1e5a      	subs	r2, r3, #1
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c8e:	f002 f879 	bl	8007d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	441a      	add	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	68f9      	ldr	r1, [r7, #12]
 8005cc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cc4:	fb01 f303 	mul.w	r3, r1, r3
 8005cc8:	441a      	add	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	22ff      	movs	r2, #255	; 0xff
 8005cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	22ff      	movs	r2, #255	; 0xff
 8005cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d114      	bne.n	8005d0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01a      	beq.n	8005d22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3310      	adds	r3, #16
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 f929 	bl	8006f48 <xTaskRemoveFromEventList>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d012      	beq.n	8005d22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <xQueueGenericReset+0xcc>)
 8005cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	e009      	b.n	8005d22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3310      	adds	r3, #16
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fef2 	bl	8005afc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3324      	adds	r3, #36	; 0x24
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff feed 	bl	8005afc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d22:	f002 f85f 	bl	8007de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d26:	2301      	movs	r3, #1
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08e      	sub	sp, #56	; 0x38
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <xQueueGenericCreateStatic+0x52>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <xQueueGenericCreateStatic+0x56>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <xQueueGenericCreateStatic+0x58>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	623b      	str	r3, [r7, #32]
}
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <xQueueGenericCreateStatic+0x7e>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <xQueueGenericCreateStatic+0x82>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <xQueueGenericCreateStatic+0x84>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	61fb      	str	r3, [r7, #28]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005dd2:	2350      	movs	r3, #80	; 0x50
 8005dd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b50      	cmp	r3, #80	; 0x50
 8005dda:	d00a      	beq.n	8005df2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	61bb      	str	r3, [r7, #24]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005df2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f805 	bl	8005e24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3730      	adds	r7, #48	; 0x30
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e002      	b.n	8005e46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e52:	2101      	movs	r1, #1
 8005e54:	69b8      	ldr	r0, [r7, #24]
 8005e56:	f7ff ff05 	bl	8005c64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	78fa      	ldrb	r2, [r7, #3]
 8005e5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08e      	sub	sp, #56	; 0x38
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xQueueGenericSend+0x32>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d103      	bne.n	8005eac <xQueueGenericSend+0x40>
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <xQueueGenericSend+0x44>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <xQueueGenericSend+0x46>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <xQueueGenericSend+0x60>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ec8:	bf00      	nop
 8005eca:	e7fe      	b.n	8005eca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d103      	bne.n	8005eda <xQueueGenericSend+0x6e>
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <xQueueGenericSend+0x72>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <xQueueGenericSend+0x74>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <xQueueGenericSend+0x8e>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	623b      	str	r3, [r7, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005efa:	f001 f9e7 	bl	80072cc <xTaskGetSchedulerState>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <xQueueGenericSend+0x9e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <xQueueGenericSend+0xa2>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueGenericSend+0xa4>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xQueueGenericSend+0xbe>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	61fb      	str	r3, [r7, #28]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f2a:	f001 ff2b 	bl	8007d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <xQueueGenericSend+0xd4>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d129      	bne.n	8005f94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f46:	f000 fa0b 	bl	8006360 <prvCopyDataToQueue>
 8005f4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d010      	beq.n	8005f76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	3324      	adds	r3, #36	; 0x24
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fff5 	bl	8006f48 <xTaskRemoveFromEventList>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d013      	beq.n	8005f8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f64:	4b3f      	ldr	r3, [pc, #252]	; (8006064 <xQueueGenericSend+0x1f8>)
 8005f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	e00a      	b.n	8005f8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f7c:	4b39      	ldr	r3, [pc, #228]	; (8006064 <xQueueGenericSend+0x1f8>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f8c:	f001 ff2a 	bl	8007de4 <vPortExitCritical>
				return pdPASS;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e063      	b.n	800605c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f9a:	f001 ff23 	bl	8007de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e05c      	b.n	800605c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d106      	bne.n	8005fb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fa8:	f107 0314 	add.w	r3, r7, #20
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 f82f 	bl	8007010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fb6:	f001 ff15 	bl	8007de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fba:	f000 fd9b 	bl	8006af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fbe:	f001 fee1 	bl	8007d84 <vPortEnterCritical>
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fc8:	b25b      	sxtb	r3, r3
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fce:	d103      	bne.n	8005fd8 <xQueueGenericSend+0x16c>
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fde:	b25b      	sxtb	r3, r3
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe4:	d103      	bne.n	8005fee <xQueueGenericSend+0x182>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fee:	f001 fef9 	bl	8007de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ff2:	1d3a      	adds	r2, r7, #4
 8005ff4:	f107 0314 	add.w	r3, r7, #20
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f001 f81e 	bl	800703c <xTaskCheckForTimeOut>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d124      	bne.n	8006050 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006008:	f000 faa2 	bl	8006550 <prvIsQueueFull>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d018      	beq.n	8006044 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	3310      	adds	r3, #16
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	4611      	mov	r1, r2
 800601a:	4618      	mov	r0, r3
 800601c:	f000 ff44 	bl	8006ea8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006022:	f000 fa2d 	bl	8006480 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006026:	f000 fd73 	bl	8006b10 <xTaskResumeAll>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	f47f af7c 	bne.w	8005f2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006032:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <xQueueGenericSend+0x1f8>)
 8006034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	e772      	b.n	8005f2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006046:	f000 fa1b 	bl	8006480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800604a:	f000 fd61 	bl	8006b10 <xTaskResumeAll>
 800604e:	e76c      	b.n	8005f2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006052:	f000 fa15 	bl	8006480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006056:	f000 fd5b 	bl	8006b10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800605a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800605c:	4618      	mov	r0, r3
 800605e:	3738      	adds	r7, #56	; 0x38
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	e000ed04 	.word	0xe000ed04

08006068 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b090      	sub	sp, #64	; 0x40
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10a      	bne.n	8006096 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <xQueueGenericSendFromISR+0x3c>
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <xQueueGenericSendFromISR+0x40>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <xQueueGenericSendFromISR+0x42>
 80060a8:	2300      	movs	r3, #0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d103      	bne.n	80060d2 <xQueueGenericSendFromISR+0x6a>
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <xQueueGenericSendFromISR+0x6e>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e000      	b.n	80060d8 <xQueueGenericSendFromISR+0x70>
 80060d6:	2300      	movs	r3, #0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10a      	bne.n	80060f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	623b      	str	r3, [r7, #32]
}
 80060ee:	bf00      	nop
 80060f0:	e7fe      	b.n	80060f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060f2:	f001 ff29 	bl	8007f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060f6:	f3ef 8211 	mrs	r2, BASEPRI
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	61fa      	str	r2, [r7, #28]
 800610c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800610e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006110:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <xQueueGenericSendFromISR+0xbc>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d12f      	bne.n	8006184 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800612a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800613a:	f000 f911 	bl	8006360 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800613e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006146:	d112      	bne.n	800616e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	2b00      	cmp	r3, #0
 800614e:	d016      	beq.n	800617e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	3324      	adds	r3, #36	; 0x24
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fef7 	bl	8006f48 <xTaskRemoveFromEventList>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00e      	beq.n	800617e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00b      	beq.n	800617e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e007      	b.n	800617e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800616e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006172:	3301      	adds	r3, #1
 8006174:	b2db      	uxtb	r3, r3
 8006176:	b25a      	sxtb	r2, r3
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800617e:	2301      	movs	r3, #1
 8006180:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006182:	e001      	b.n	8006188 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006184:	2300      	movs	r3, #0
 8006186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006192:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006196:	4618      	mov	r0, r3
 8006198:	3740      	adds	r7, #64	; 0x40
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08c      	sub	sp, #48	; 0x30
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061ac:	2300      	movs	r3, #0
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <xQueueReceive+0x30>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	623b      	str	r3, [r7, #32]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d103      	bne.n	80061de <xQueueReceive+0x3e>
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <xQueueReceive+0x42>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <xQueueReceive+0x44>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueReceive+0x5e>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	61fb      	str	r3, [r7, #28]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061fe:	f001 f865 	bl	80072cc <xTaskGetSchedulerState>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <xQueueReceive+0x6e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <xQueueReceive+0x72>
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <xQueueReceive+0x74>
 8006212:	2300      	movs	r3, #0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <xQueueReceive+0x8e>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	61bb      	str	r3, [r7, #24]
}
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800622e:	f001 fda9 	bl	8007d84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01f      	beq.n	800627e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006242:	f000 f8f7 	bl	8006434 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	1e5a      	subs	r2, r3, #1
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00f      	beq.n	8006276 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	3310      	adds	r3, #16
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fe74 	bl	8006f48 <xTaskRemoveFromEventList>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006266:	4b3d      	ldr	r3, [pc, #244]	; (800635c <xQueueReceive+0x1bc>)
 8006268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006276:	f001 fdb5 	bl	8007de4 <vPortExitCritical>
				return pdPASS;
 800627a:	2301      	movs	r3, #1
 800627c:	e069      	b.n	8006352 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d103      	bne.n	800628c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006284:	f001 fdae 	bl	8007de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006288:	2300      	movs	r3, #0
 800628a:	e062      	b.n	8006352 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006292:	f107 0310 	add.w	r3, r7, #16
 8006296:	4618      	mov	r0, r3
 8006298:	f000 feba 	bl	8007010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800629c:	2301      	movs	r3, #1
 800629e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062a0:	f001 fda0 	bl	8007de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062a4:	f000 fc26 	bl	8006af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062a8:	f001 fd6c 	bl	8007d84 <vPortEnterCritical>
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062b8:	d103      	bne.n	80062c2 <xQueueReceive+0x122>
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062c8:	b25b      	sxtb	r3, r3
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ce:	d103      	bne.n	80062d8 <xQueueReceive+0x138>
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062d8:	f001 fd84 	bl	8007de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062dc:	1d3a      	adds	r2, r7, #4
 80062de:	f107 0310 	add.w	r3, r7, #16
 80062e2:	4611      	mov	r1, r2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fea9 	bl	800703c <xTaskCheckForTimeOut>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d123      	bne.n	8006338 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f2:	f000 f917 	bl	8006524 <prvIsQueueEmpty>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d017      	beq.n	800632c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	3324      	adds	r3, #36	; 0x24
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	4611      	mov	r1, r2
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fdcf 	bl	8006ea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800630a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800630c:	f000 f8b8 	bl	8006480 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006310:	f000 fbfe 	bl	8006b10 <xTaskResumeAll>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d189      	bne.n	800622e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800631a:	4b10      	ldr	r3, [pc, #64]	; (800635c <xQueueReceive+0x1bc>)
 800631c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	e780      	b.n	800622e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800632c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632e:	f000 f8a7 	bl	8006480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006332:	f000 fbed 	bl	8006b10 <xTaskResumeAll>
 8006336:	e77a      	b.n	800622e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633a:	f000 f8a1 	bl	8006480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800633e:	f000 fbe7 	bl	8006b10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006344:	f000 f8ee 	bl	8006524 <prvIsQueueEmpty>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	f43f af6f 	beq.w	800622e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006350:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006352:	4618      	mov	r0, r3
 8006354:	3730      	adds	r7, #48	; 0x30
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	e000ed04 	.word	0xe000ed04

08006360 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10d      	bne.n	800639a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d14d      	bne.n	8006422 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 ffbc 	bl	8007308 <xTaskPriorityDisinherit>
 8006390:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	609a      	str	r2, [r3, #8]
 8006398:	e043      	b.n	8006422 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d119      	bne.n	80063d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6858      	ldr	r0, [r3, #4]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	461a      	mov	r2, r3
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	f002 f919 	bl	80085e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	441a      	add	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d32b      	bcc.n	8006422 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e026      	b.n	8006422 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68d8      	ldr	r0, [r3, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	461a      	mov	r2, r3
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	f002 f8ff 	bl	80085e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	425b      	negs	r3, r3
 80063ee:	441a      	add	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d207      	bcs.n	8006410 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	425b      	negs	r3, r3
 800640a:	441a      	add	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d105      	bne.n	8006422 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	3b01      	subs	r3, #1
 8006420:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800642a:	697b      	ldr	r3, [r7, #20]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d018      	beq.n	8006478 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	441a      	add	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	429a      	cmp	r2, r3
 800645e:	d303      	bcc.n	8006468 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68d9      	ldr	r1, [r3, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	461a      	mov	r2, r3
 8006472:	6838      	ldr	r0, [r7, #0]
 8006474:	f002 f8b5 	bl	80085e2 <memcpy>
	}
}
 8006478:	bf00      	nop
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006488:	f001 fc7c 	bl	8007d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006492:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006494:	e011      	b.n	80064ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d012      	beq.n	80064c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3324      	adds	r3, #36	; 0x24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fd50 	bl	8006f48 <xTaskRemoveFromEventList>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064ae:	f000 fe27 	bl	8007100 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dce9      	bgt.n	8006496 <prvUnlockQueue+0x16>
 80064c2:	e000      	b.n	80064c6 <prvUnlockQueue+0x46>
					break;
 80064c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	22ff      	movs	r2, #255	; 0xff
 80064ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064ce:	f001 fc89 	bl	8007de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064d2:	f001 fc57 	bl	8007d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064de:	e011      	b.n	8006504 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d012      	beq.n	800650e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3310      	adds	r3, #16
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fd2b 	bl	8006f48 <xTaskRemoveFromEventList>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064f8:	f000 fe02 	bl	8007100 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	3b01      	subs	r3, #1
 8006500:	b2db      	uxtb	r3, r3
 8006502:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006508:	2b00      	cmp	r3, #0
 800650a:	dce9      	bgt.n	80064e0 <prvUnlockQueue+0x60>
 800650c:	e000      	b.n	8006510 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800650e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	22ff      	movs	r2, #255	; 0xff
 8006514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006518:	f001 fc64 	bl	8007de4 <vPortExitCritical>
}
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800652c:	f001 fc2a 	bl	8007d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e001      	b.n	8006542 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006542:	f001 fc4f 	bl	8007de4 <vPortExitCritical>

	return xReturn;
 8006546:	68fb      	ldr	r3, [r7, #12]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006558:	f001 fc14 	bl	8007d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006564:	429a      	cmp	r2, r3
 8006566:	d102      	bne.n	800656e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006568:	2301      	movs	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	e001      	b.n	8006572 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006572:	f001 fc37 	bl	8007de4 <vPortExitCritical>

	return xReturn;
 8006576:	68fb      	ldr	r3, [r7, #12]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	e014      	b.n	80065ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006590:	4a0f      	ldr	r2, [pc, #60]	; (80065d0 <vQueueAddToRegistry+0x50>)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10b      	bne.n	80065b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800659c:	490c      	ldr	r1, [pc, #48]	; (80065d0 <vQueueAddToRegistry+0x50>)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065a6:	4a0a      	ldr	r2, [pc, #40]	; (80065d0 <vQueueAddToRegistry+0x50>)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4413      	add	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065b2:	e006      	b.n	80065c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3301      	adds	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b07      	cmp	r3, #7
 80065be:	d9e7      	bls.n	8006590 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065c0:	bf00      	nop
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	24004bc0 	.word	0x24004bc0

080065d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065e4:	f001 fbce 	bl	8007d84 <vPortEnterCritical>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065ee:	b25b      	sxtb	r3, r3
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065f4:	d103      	bne.n	80065fe <vQueueWaitForMessageRestricted+0x2a>
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006604:	b25b      	sxtb	r3, r3
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800660a:	d103      	bne.n	8006614 <vQueueWaitForMessageRestricted+0x40>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006614:	f001 fbe6 	bl	8007de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	3324      	adds	r3, #36	; 0x24
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fc61 	bl	8006ef0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800662e:	6978      	ldr	r0, [r7, #20]
 8006630:	f7ff ff26 	bl	8006480 <prvUnlockQueue>
	}
 8006634:	bf00      	nop
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08e      	sub	sp, #56	; 0x38
 8006640:	af04      	add	r7, sp, #16
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	623b      	str	r3, [r7, #32]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <xTaskCreateStatic+0x46>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	61fb      	str	r3, [r7, #28]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006682:	23bc      	movs	r3, #188	; 0xbc
 8006684:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2bbc      	cmp	r3, #188	; 0xbc
 800668a:	d00a      	beq.n	80066a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	61bb      	str	r3, [r7, #24]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d01e      	beq.n	80066e8 <xTaskCreateStatic+0xac>
 80066aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01b      	beq.n	80066e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066c2:	2300      	movs	r3, #0
 80066c4:	9303      	str	r3, [sp, #12]
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	9302      	str	r3, [sp, #8]
 80066ca:	f107 0314 	add.w	r3, r7, #20
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f850 	bl	8006780 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066e2:	f000 f8f3 	bl	80068cc <prvAddNewTaskToReadyList>
 80066e6:	e001      	b.n	80066ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80066e8:	2300      	movs	r3, #0
 80066ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066ec:	697b      	ldr	r3, [r7, #20]
	}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3728      	adds	r7, #40	; 0x28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b08c      	sub	sp, #48	; 0x30
 80066fa:	af04      	add	r7, sp, #16
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	4613      	mov	r3, r2
 8006704:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4618      	mov	r0, r3
 800670c:	f001 fc5c 	bl	8007fc8 <pvPortMalloc>
 8006710:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006718:	20bc      	movs	r0, #188	; 0xbc
 800671a:	f001 fc55 	bl	8007fc8 <pvPortMalloc>
 800671e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	631a      	str	r2, [r3, #48]	; 0x30
 800672c:	e005      	b.n	800673a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800672e:	6978      	ldr	r0, [r7, #20]
 8006730:	f001 fd16 	bl	8008160 <vPortFree>
 8006734:	e001      	b.n	800673a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d017      	beq.n	8006770 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006748:	88fa      	ldrh	r2, [r7, #6]
 800674a:	2300      	movs	r3, #0
 800674c:	9303      	str	r3, [sp, #12]
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	9302      	str	r3, [sp, #8]
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f80e 	bl	8006780 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006764:	69f8      	ldr	r0, [r7, #28]
 8006766:	f000 f8b1 	bl	80068cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800676a:	2301      	movs	r3, #1
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	e002      	b.n	8006776 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006774:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006776:	69bb      	ldr	r3, [r7, #24]
	}
 8006778:	4618      	mov	r0, r3
 800677a:	3720      	adds	r7, #32
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	461a      	mov	r2, r3
 8006798:	21a5      	movs	r1, #165	; 0xa5
 800679a:	f001 ff30 	bl	80085fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80067a8:	440b      	add	r3, r1
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f023 0307 	bic.w	r3, r3, #7
 80067b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	617b      	str	r3, [r7, #20]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01f      	beq.n	800681e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067de:	2300      	movs	r3, #0
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	e012      	b.n	800680a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	4413      	add	r3, r2
 80067ea:	7819      	ldrb	r1, [r3, #0]
 80067ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	3334      	adds	r3, #52	; 0x34
 80067f4:	460a      	mov	r2, r1
 80067f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d006      	beq.n	8006812 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	3301      	adds	r3, #1
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	2b0f      	cmp	r3, #15
 800680e:	d9e9      	bls.n	80067e4 <prvInitialiseNewTask+0x64>
 8006810:	e000      	b.n	8006814 <prvInitialiseNewTask+0x94>
			{
				break;
 8006812:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800681c:	e003      	b.n	8006826 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	2b37      	cmp	r3, #55	; 0x37
 800682a:	d901      	bls.n	8006830 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800682c:	2337      	movs	r3, #55	; 0x37
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006834:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800683a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	2200      	movs	r2, #0
 8006840:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	3304      	adds	r3, #4
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff f978 	bl	8005b3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	3318      	adds	r3, #24
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff f973 	bl	8005b3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	2200      	movs	r2, #0
 8006878:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	3354      	adds	r3, #84	; 0x54
 8006880:	2260      	movs	r2, #96	; 0x60
 8006882:	2100      	movs	r1, #0
 8006884:	4618      	mov	r0, r3
 8006886:	f001 feba 	bl	80085fe <memset>
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	4a0c      	ldr	r2, [pc, #48]	; (80068c0 <prvInitialiseNewTask+0x140>)
 800688e:	659a      	str	r2, [r3, #88]	; 0x58
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	4a0c      	ldr	r2, [pc, #48]	; (80068c4 <prvInitialiseNewTask+0x144>)
 8006894:	65da      	str	r2, [r3, #92]	; 0x5c
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	4a0b      	ldr	r2, [pc, #44]	; (80068c8 <prvInitialiseNewTask+0x148>)
 800689a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	69b8      	ldr	r0, [r7, #24]
 80068a2:	f001 f941 	bl	8007b28 <pxPortInitialiseStack>
 80068a6:	4602      	mov	r2, r0
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068b8:	bf00      	nop
 80068ba:	3720      	adds	r7, #32
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	08008df4 	.word	0x08008df4
 80068c4:	08008e14 	.word	0x08008e14
 80068c8:	08008dd4 	.word	0x08008dd4

080068cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068d4:	f001 fa56 	bl	8007d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068d8:	4b2d      	ldr	r3, [pc, #180]	; (8006990 <prvAddNewTaskToReadyList+0xc4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3301      	adds	r3, #1
 80068de:	4a2c      	ldr	r2, [pc, #176]	; (8006990 <prvAddNewTaskToReadyList+0xc4>)
 80068e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068e2:	4b2c      	ldr	r3, [pc, #176]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ea:	4a2a      	ldr	r2, [pc, #168]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <prvAddNewTaskToReadyList+0xc4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d110      	bne.n	800691a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068f8:	f000 fc26 	bl	8007148 <prvInitialiseTaskLists>
 80068fc:	e00d      	b.n	800691a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068fe:	4b26      	ldr	r3, [pc, #152]	; (8006998 <prvAddNewTaskToReadyList+0xcc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006906:	4b23      	ldr	r3, [pc, #140]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	429a      	cmp	r2, r3
 8006912:	d802      	bhi.n	800691a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006914:	4a1f      	ldr	r2, [pc, #124]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800691a:	4b20      	ldr	r3, [pc, #128]	; (800699c <prvAddNewTaskToReadyList+0xd0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3301      	adds	r3, #1
 8006920:	4a1e      	ldr	r2, [pc, #120]	; (800699c <prvAddNewTaskToReadyList+0xd0>)
 8006922:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006924:	4b1d      	ldr	r3, [pc, #116]	; (800699c <prvAddNewTaskToReadyList+0xd0>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006930:	4b1b      	ldr	r3, [pc, #108]	; (80069a0 <prvAddNewTaskToReadyList+0xd4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	429a      	cmp	r2, r3
 8006936:	d903      	bls.n	8006940 <prvAddNewTaskToReadyList+0x74>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	4a18      	ldr	r2, [pc, #96]	; (80069a0 <prvAddNewTaskToReadyList+0xd4>)
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4a15      	ldr	r2, [pc, #84]	; (80069a4 <prvAddNewTaskToReadyList+0xd8>)
 800694e:	441a      	add	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3304      	adds	r3, #4
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f7ff f8fd 	bl	8005b56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800695c:	f001 fa42 	bl	8007de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006960:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <prvAddNewTaskToReadyList+0xcc>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00e      	beq.n	8006986 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006968:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006972:	429a      	cmp	r2, r3
 8006974:	d207      	bcs.n	8006986 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <prvAddNewTaskToReadyList+0xdc>)
 8006978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	24000ce8 	.word	0x24000ce8
 8006994:	24000814 	.word	0x24000814
 8006998:	24000cf4 	.word	0x24000cf4
 800699c:	24000d04 	.word	0x24000d04
 80069a0:	24000cf0 	.word	0x24000cf0
 80069a4:	24000818 	.word	0x24000818
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d017      	beq.n	80069ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069be:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <vTaskDelay+0x60>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <vTaskDelay+0x30>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60bb      	str	r3, [r7, #8]
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069dc:	f000 f88a 	bl	8006af4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069e0:	2100      	movs	r1, #0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fcfe 	bl	80073e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069e8:	f000 f892 	bl	8006b10 <xTaskResumeAll>
 80069ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d107      	bne.n	8006a04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <vTaskDelay+0x64>)
 80069f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	24000d10 	.word	0x24000d10
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a22:	463a      	mov	r2, r7
 8006a24:	1d39      	adds	r1, r7, #4
 8006a26:	f107 0308 	add.w	r3, r7, #8
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff f832 	bl	8005a94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	9202      	str	r2, [sp, #8]
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	460a      	mov	r2, r1
 8006a42:	4924      	ldr	r1, [pc, #144]	; (8006ad4 <vTaskStartScheduler+0xc0>)
 8006a44:	4824      	ldr	r0, [pc, #144]	; (8006ad8 <vTaskStartScheduler+0xc4>)
 8006a46:	f7ff fdf9 	bl	800663c <xTaskCreateStatic>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4a23      	ldr	r2, [pc, #140]	; (8006adc <vTaskStartScheduler+0xc8>)
 8006a4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a50:	4b22      	ldr	r3, [pc, #136]	; (8006adc <vTaskStartScheduler+0xc8>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e001      	b.n	8006a62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d102      	bne.n	8006a6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a68:	f000 fd10 	bl	800748c <xTimerCreateTimerTask>
 8006a6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d11b      	bne.n	8006aac <vTaskStartScheduler+0x98>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	613b      	str	r3, [r7, #16]
}
 8006a86:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a88:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <vTaskStartScheduler+0xcc>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3354      	adds	r3, #84	; 0x54
 8006a8e:	4a15      	ldr	r2, [pc, #84]	; (8006ae4 <vTaskStartScheduler+0xd0>)
 8006a90:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a92:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <vTaskStartScheduler+0xd4>)
 8006a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <vTaskStartScheduler+0xd8>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006aa0:	4b13      	ldr	r3, [pc, #76]	; (8006af0 <vTaskStartScheduler+0xdc>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006aa6:	f001 f8cb 	bl	8007c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006aaa:	e00e      	b.n	8006aca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ab2:	d10a      	bne.n	8006aca <vTaskStartScheduler+0xb6>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	60fb      	str	r3, [r7, #12]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <vTaskStartScheduler+0xb4>
}
 8006aca:	bf00      	nop
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	08008d3c 	.word	0x08008d3c
 8006ad8:	08007119 	.word	0x08007119
 8006adc:	24000d0c 	.word	0x24000d0c
 8006ae0:	24000814 	.word	0x24000814
 8006ae4:	24000014 	.word	0x24000014
 8006ae8:	24000d08 	.word	0x24000d08
 8006aec:	24000cf4 	.word	0x24000cf4
 8006af0:	24000cec 	.word	0x24000cec

08006af4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006af8:	4b04      	ldr	r3, [pc, #16]	; (8006b0c <vTaskSuspendAll+0x18>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3301      	adds	r3, #1
 8006afe:	4a03      	ldr	r2, [pc, #12]	; (8006b0c <vTaskSuspendAll+0x18>)
 8006b00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b02:	bf00      	nop
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	24000d10 	.word	0x24000d10

08006b10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b1e:	4b42      	ldr	r3, [pc, #264]	; (8006c28 <xTaskResumeAll+0x118>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <xTaskResumeAll+0x2c>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	603b      	str	r3, [r7, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b3c:	f001 f922 	bl	8007d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b40:	4b39      	ldr	r3, [pc, #228]	; (8006c28 <xTaskResumeAll+0x118>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	4a38      	ldr	r2, [pc, #224]	; (8006c28 <xTaskResumeAll+0x118>)
 8006b48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b4a:	4b37      	ldr	r3, [pc, #220]	; (8006c28 <xTaskResumeAll+0x118>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d162      	bne.n	8006c18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b52:	4b36      	ldr	r3, [pc, #216]	; (8006c2c <xTaskResumeAll+0x11c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d05e      	beq.n	8006c18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b5a:	e02f      	b.n	8006bbc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b5c:	4b34      	ldr	r3, [pc, #208]	; (8006c30 <xTaskResumeAll+0x120>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3318      	adds	r3, #24
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff f851 	bl	8005c10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3304      	adds	r3, #4
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff f84c 	bl	8005c10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7c:	4b2d      	ldr	r3, [pc, #180]	; (8006c34 <xTaskResumeAll+0x124>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d903      	bls.n	8006b8c <xTaskResumeAll+0x7c>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	4a2a      	ldr	r2, [pc, #168]	; (8006c34 <xTaskResumeAll+0x124>)
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4a27      	ldr	r2, [pc, #156]	; (8006c38 <xTaskResumeAll+0x128>)
 8006b9a:	441a      	add	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	f7fe ffd7 	bl	8005b56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bac:	4b23      	ldr	r3, [pc, #140]	; (8006c3c <xTaskResumeAll+0x12c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d302      	bcc.n	8006bbc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bb6:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <xTaskResumeAll+0x130>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bbc:	4b1c      	ldr	r3, [pc, #112]	; (8006c30 <xTaskResumeAll+0x120>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1cb      	bne.n	8006b5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bca:	f000 fb5f 	bl	800728c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bce:	4b1d      	ldr	r3, [pc, #116]	; (8006c44 <xTaskResumeAll+0x134>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d010      	beq.n	8006bfc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bda:	f000 f847 	bl	8006c6c <xTaskIncrementTick>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006be4:	4b16      	ldr	r3, [pc, #88]	; (8006c40 <xTaskResumeAll+0x130>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f1      	bne.n	8006bda <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006bf6:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <xTaskResumeAll+0x134>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bfc:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <xTaskResumeAll+0x130>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c04:	2301      	movs	r3, #1
 8006c06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c08:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <xTaskResumeAll+0x138>)
 8006c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c18:	f001 f8e4 	bl	8007de4 <vPortExitCritical>

	return xAlreadyYielded;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	24000d10 	.word	0x24000d10
 8006c2c:	24000ce8 	.word	0x24000ce8
 8006c30:	24000ca8 	.word	0x24000ca8
 8006c34:	24000cf0 	.word	0x24000cf0
 8006c38:	24000818 	.word	0x24000818
 8006c3c:	24000814 	.word	0x24000814
 8006c40:	24000cfc 	.word	0x24000cfc
 8006c44:	24000cf8 	.word	0x24000cf8
 8006c48:	e000ed04 	.word	0xe000ed04

08006c4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c52:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <xTaskGetTickCount+0x1c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c58:	687b      	ldr	r3, [r7, #4]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	24000cec 	.word	0x24000cec

08006c6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c76:	4b4f      	ldr	r3, [pc, #316]	; (8006db4 <xTaskIncrementTick+0x148>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f040 808f 	bne.w	8006d9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c80:	4b4d      	ldr	r3, [pc, #308]	; (8006db8 <xTaskIncrementTick+0x14c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c88:	4a4b      	ldr	r2, [pc, #300]	; (8006db8 <xTaskIncrementTick+0x14c>)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d120      	bne.n	8006cd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c94:	4b49      	ldr	r3, [pc, #292]	; (8006dbc <xTaskIncrementTick+0x150>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	603b      	str	r3, [r7, #0]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <xTaskIncrementTick+0x46>
 8006cb4:	4b41      	ldr	r3, [pc, #260]	; (8006dbc <xTaskIncrementTick+0x150>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	4b41      	ldr	r3, [pc, #260]	; (8006dc0 <xTaskIncrementTick+0x154>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a3f      	ldr	r2, [pc, #252]	; (8006dbc <xTaskIncrementTick+0x150>)
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	4a3f      	ldr	r2, [pc, #252]	; (8006dc0 <xTaskIncrementTick+0x154>)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	4b3e      	ldr	r3, [pc, #248]	; (8006dc4 <xTaskIncrementTick+0x158>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	4a3d      	ldr	r2, [pc, #244]	; (8006dc4 <xTaskIncrementTick+0x158>)
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	f000 fadb 	bl	800728c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cd6:	4b3c      	ldr	r3, [pc, #240]	; (8006dc8 <xTaskIncrementTick+0x15c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d349      	bcc.n	8006d74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ce0:	4b36      	ldr	r3, [pc, #216]	; (8006dbc <xTaskIncrementTick+0x150>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cea:	4b37      	ldr	r3, [pc, #220]	; (8006dc8 <xTaskIncrementTick+0x15c>)
 8006cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cf0:	601a      	str	r2, [r3, #0]
					break;
 8006cf2:	e03f      	b.n	8006d74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf4:	4b31      	ldr	r3, [pc, #196]	; (8006dbc <xTaskIncrementTick+0x150>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d203      	bcs.n	8006d14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d0c:	4a2e      	ldr	r2, [pc, #184]	; (8006dc8 <xTaskIncrementTick+0x15c>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d12:	e02f      	b.n	8006d74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe ff79 	bl	8005c10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d004      	beq.n	8006d30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	3318      	adds	r3, #24
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe ff70 	bl	8005c10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d34:	4b25      	ldr	r3, [pc, #148]	; (8006dcc <xTaskIncrementTick+0x160>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d903      	bls.n	8006d44 <xTaskIncrementTick+0xd8>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	4a22      	ldr	r2, [pc, #136]	; (8006dcc <xTaskIncrementTick+0x160>)
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4a1f      	ldr	r2, [pc, #124]	; (8006dd0 <xTaskIncrementTick+0x164>)
 8006d52:	441a      	add	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	3304      	adds	r3, #4
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	f7fe fefb 	bl	8005b56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d64:	4b1b      	ldr	r3, [pc, #108]	; (8006dd4 <xTaskIncrementTick+0x168>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d3b8      	bcc.n	8006ce0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d72:	e7b5      	b.n	8006ce0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d74:	4b17      	ldr	r3, [pc, #92]	; (8006dd4 <xTaskIncrementTick+0x168>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7a:	4915      	ldr	r1, [pc, #84]	; (8006dd0 <xTaskIncrementTick+0x164>)
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d901      	bls.n	8006d90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d90:	4b11      	ldr	r3, [pc, #68]	; (8006dd8 <xTaskIncrementTick+0x16c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d007      	beq.n	8006da8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	e004      	b.n	8006da8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <xTaskIncrementTick+0x170>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3301      	adds	r3, #1
 8006da4:	4a0d      	ldr	r2, [pc, #52]	; (8006ddc <xTaskIncrementTick+0x170>)
 8006da6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006da8:	697b      	ldr	r3, [r7, #20]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	24000d10 	.word	0x24000d10
 8006db8:	24000cec 	.word	0x24000cec
 8006dbc:	24000ca0 	.word	0x24000ca0
 8006dc0:	24000ca4 	.word	0x24000ca4
 8006dc4:	24000d00 	.word	0x24000d00
 8006dc8:	24000d08 	.word	0x24000d08
 8006dcc:	24000cf0 	.word	0x24000cf0
 8006dd0:	24000818 	.word	0x24000818
 8006dd4:	24000814 	.word	0x24000814
 8006dd8:	24000cfc 	.word	0x24000cfc
 8006ddc:	24000cf8 	.word	0x24000cf8

08006de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006de6:	4b2a      	ldr	r3, [pc, #168]	; (8006e90 <vTaskSwitchContext+0xb0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dee:	4b29      	ldr	r3, [pc, #164]	; (8006e94 <vTaskSwitchContext+0xb4>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006df4:	e046      	b.n	8006e84 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006df6:	4b27      	ldr	r3, [pc, #156]	; (8006e94 <vTaskSwitchContext+0xb4>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dfc:	4b26      	ldr	r3, [pc, #152]	; (8006e98 <vTaskSwitchContext+0xb8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	e010      	b.n	8006e26 <vTaskSwitchContext+0x46>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	607b      	str	r3, [r7, #4]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <vTaskSwitchContext+0x3e>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	491d      	ldr	r1, [pc, #116]	; (8006e9c <vTaskSwitchContext+0xbc>)
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	440b      	add	r3, r1
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0e4      	beq.n	8006e04 <vTaskSwitchContext+0x24>
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4a15      	ldr	r2, [pc, #84]	; (8006e9c <vTaskSwitchContext+0xbc>)
 8006e46:	4413      	add	r3, r2
 8006e48:	60bb      	str	r3, [r7, #8]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	605a      	str	r2, [r3, #4]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d104      	bne.n	8006e6a <vTaskSwitchContext+0x8a>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	605a      	str	r2, [r3, #4]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	4a0b      	ldr	r2, [pc, #44]	; (8006ea0 <vTaskSwitchContext+0xc0>)
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	4a08      	ldr	r2, [pc, #32]	; (8006e98 <vTaskSwitchContext+0xb8>)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e7a:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <vTaskSwitchContext+0xc0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3354      	adds	r3, #84	; 0x54
 8006e80:	4a08      	ldr	r2, [pc, #32]	; (8006ea4 <vTaskSwitchContext+0xc4>)
 8006e82:	6013      	str	r3, [r2, #0]
}
 8006e84:	bf00      	nop
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	24000d10 	.word	0x24000d10
 8006e94:	24000cfc 	.word	0x24000cfc
 8006e98:	24000cf0 	.word	0x24000cf0
 8006e9c:	24000818 	.word	0x24000818
 8006ea0:	24000814 	.word	0x24000814
 8006ea4:	24000014 	.word	0x24000014

08006ea8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	60fb      	str	r3, [r7, #12]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ece:	4b07      	ldr	r3, [pc, #28]	; (8006eec <vTaskPlaceOnEventList+0x44>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3318      	adds	r3, #24
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fe fe61 	bl	8005b9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006edc:	2101      	movs	r1, #1
 8006ede:	6838      	ldr	r0, [r7, #0]
 8006ee0:	f000 fa80 	bl	80073e4 <prvAddCurrentTaskToDelayedList>
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	24000814 	.word	0x24000814

08006ef0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	617b      	str	r3, [r7, #20]
}
 8006f14:	bf00      	nop
 8006f16:	e7fe      	b.n	8006f16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f18:	4b0a      	ldr	r3, [pc, #40]	; (8006f44 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3318      	adds	r3, #24
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7fe fe18 	bl	8005b56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	68b8      	ldr	r0, [r7, #8]
 8006f36:	f000 fa55 	bl	80073e4 <prvAddCurrentTaskToDelayedList>
	}
 8006f3a:	bf00      	nop
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	24000814 	.word	0x24000814

08006f48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60fb      	str	r3, [r7, #12]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	3318      	adds	r3, #24
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe fe49 	bl	8005c10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f7e:	4b1e      	ldr	r3, [pc, #120]	; (8006ff8 <xTaskRemoveFromEventList+0xb0>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d11d      	bne.n	8006fc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe fe40 	bl	8005c10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <xTaskRemoveFromEventList+0xb4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d903      	bls.n	8006fa4 <xTaskRemoveFromEventList+0x5c>
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	4a16      	ldr	r2, [pc, #88]	; (8006ffc <xTaskRemoveFromEventList+0xb4>)
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4a13      	ldr	r2, [pc, #76]	; (8007000 <xTaskRemoveFromEventList+0xb8>)
 8006fb2:	441a      	add	r2, r3
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	f7fe fdcb 	bl	8005b56 <vListInsertEnd>
 8006fc0:	e005      	b.n	8006fce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	3318      	adds	r3, #24
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	480e      	ldr	r0, [pc, #56]	; (8007004 <xTaskRemoveFromEventList+0xbc>)
 8006fca:	f7fe fdc4 	bl	8005b56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <xTaskRemoveFromEventList+0xc0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d905      	bls.n	8006fe8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <xTaskRemoveFromEventList+0xc4>)
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	e001      	b.n	8006fec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fec:	697b      	ldr	r3, [r7, #20]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	24000d10 	.word	0x24000d10
 8006ffc:	24000cf0 	.word	0x24000cf0
 8007000:	24000818 	.word	0x24000818
 8007004:	24000ca8 	.word	0x24000ca8
 8007008:	24000814 	.word	0x24000814
 800700c:	24000cfc 	.word	0x24000cfc

08007010 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007018:	4b06      	ldr	r3, [pc, #24]	; (8007034 <vTaskInternalSetTimeOutState+0x24>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <vTaskInternalSetTimeOutState+0x28>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	605a      	str	r2, [r3, #4]
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	24000d00 	.word	0x24000d00
 8007038:	24000cec 	.word	0x24000cec

0800703c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	613b      	str	r3, [r7, #16]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	60fb      	str	r3, [r7, #12]
}
 800707a:	bf00      	nop
 800707c:	e7fe      	b.n	800707c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800707e:	f000 fe81 	bl	8007d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007082:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <xTaskCheckForTimeOut+0xbc>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800709a:	d102      	bne.n	80070a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800709c:	2300      	movs	r3, #0
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	e023      	b.n	80070ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b15      	ldr	r3, [pc, #84]	; (80070fc <xTaskCheckForTimeOut+0xc0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d007      	beq.n	80070be <xTaskCheckForTimeOut+0x82>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d302      	bcc.n	80070be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	e015      	b.n	80070ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d20b      	bcs.n	80070e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff ff9b 	bl	8007010 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070da:	2300      	movs	r3, #0
 80070dc:	61fb      	str	r3, [r7, #28]
 80070de:	e004      	b.n	80070ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070e6:	2301      	movs	r3, #1
 80070e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070ea:	f000 fe7b 	bl	8007de4 <vPortExitCritical>

	return xReturn;
 80070ee:	69fb      	ldr	r3, [r7, #28]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3720      	adds	r7, #32
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	24000cec 	.word	0x24000cec
 80070fc:	24000d00 	.word	0x24000d00

08007100 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007104:	4b03      	ldr	r3, [pc, #12]	; (8007114 <vTaskMissedYield+0x14>)
 8007106:	2201      	movs	r2, #1
 8007108:	601a      	str	r2, [r3, #0]
}
 800710a:	bf00      	nop
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	24000cfc 	.word	0x24000cfc

08007118 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007120:	f000 f852 	bl	80071c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007124:	4b06      	ldr	r3, [pc, #24]	; (8007140 <prvIdleTask+0x28>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d9f9      	bls.n	8007120 <prvIdleTask+0x8>
			{
				taskYIELD();
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <prvIdleTask+0x2c>)
 800712e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800713c:	e7f0      	b.n	8007120 <prvIdleTask+0x8>
 800713e:	bf00      	nop
 8007140:	24000818 	.word	0x24000818
 8007144:	e000ed04 	.word	0xe000ed04

08007148 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800714e:	2300      	movs	r3, #0
 8007150:	607b      	str	r3, [r7, #4]
 8007152:	e00c      	b.n	800716e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4a12      	ldr	r2, [pc, #72]	; (80071a8 <prvInitialiseTaskLists+0x60>)
 8007160:	4413      	add	r3, r2
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe fcca 	bl	8005afc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3301      	adds	r3, #1
 800716c:	607b      	str	r3, [r7, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b37      	cmp	r3, #55	; 0x37
 8007172:	d9ef      	bls.n	8007154 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007174:	480d      	ldr	r0, [pc, #52]	; (80071ac <prvInitialiseTaskLists+0x64>)
 8007176:	f7fe fcc1 	bl	8005afc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800717a:	480d      	ldr	r0, [pc, #52]	; (80071b0 <prvInitialiseTaskLists+0x68>)
 800717c:	f7fe fcbe 	bl	8005afc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007180:	480c      	ldr	r0, [pc, #48]	; (80071b4 <prvInitialiseTaskLists+0x6c>)
 8007182:	f7fe fcbb 	bl	8005afc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007186:	480c      	ldr	r0, [pc, #48]	; (80071b8 <prvInitialiseTaskLists+0x70>)
 8007188:	f7fe fcb8 	bl	8005afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800718c:	480b      	ldr	r0, [pc, #44]	; (80071bc <prvInitialiseTaskLists+0x74>)
 800718e:	f7fe fcb5 	bl	8005afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007192:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <prvInitialiseTaskLists+0x78>)
 8007194:	4a05      	ldr	r2, [pc, #20]	; (80071ac <prvInitialiseTaskLists+0x64>)
 8007196:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007198:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <prvInitialiseTaskLists+0x7c>)
 800719a:	4a05      	ldr	r2, [pc, #20]	; (80071b0 <prvInitialiseTaskLists+0x68>)
 800719c:	601a      	str	r2, [r3, #0]
}
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	24000818 	.word	0x24000818
 80071ac:	24000c78 	.word	0x24000c78
 80071b0:	24000c8c 	.word	0x24000c8c
 80071b4:	24000ca8 	.word	0x24000ca8
 80071b8:	24000cbc 	.word	0x24000cbc
 80071bc:	24000cd4 	.word	0x24000cd4
 80071c0:	24000ca0 	.word	0x24000ca0
 80071c4:	24000ca4 	.word	0x24000ca4

080071c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071ce:	e019      	b.n	8007204 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071d0:	f000 fdd8 	bl	8007d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d4:	4b10      	ldr	r3, [pc, #64]	; (8007218 <prvCheckTasksWaitingTermination+0x50>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3304      	adds	r3, #4
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fe fd15 	bl	8005c10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071e6:	4b0d      	ldr	r3, [pc, #52]	; (800721c <prvCheckTasksWaitingTermination+0x54>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	4a0b      	ldr	r2, [pc, #44]	; (800721c <prvCheckTasksWaitingTermination+0x54>)
 80071ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <prvCheckTasksWaitingTermination+0x58>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	4a0a      	ldr	r2, [pc, #40]	; (8007220 <prvCheckTasksWaitingTermination+0x58>)
 80071f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071fa:	f000 fdf3 	bl	8007de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f810 	bl	8007224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007204:	4b06      	ldr	r3, [pc, #24]	; (8007220 <prvCheckTasksWaitingTermination+0x58>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e1      	bne.n	80071d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	24000cbc 	.word	0x24000cbc
 800721c:	24000ce8 	.word	0x24000ce8
 8007220:	24000cd0 	.word	0x24000cd0

08007224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3354      	adds	r3, #84	; 0x54
 8007230:	4618      	mov	r0, r3
 8007232:	f001 fa55 	bl	80086e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800723c:	2b00      	cmp	r3, #0
 800723e:	d108      	bne.n	8007252 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	4618      	mov	r0, r3
 8007246:	f000 ff8b 	bl	8008160 <vPortFree>
				vPortFree( pxTCB );
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 ff88 	bl	8008160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007250:	e018      	b.n	8007284 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007258:	2b01      	cmp	r3, #1
 800725a:	d103      	bne.n	8007264 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 ff7f 	bl	8008160 <vPortFree>
	}
 8007262:	e00f      	b.n	8007284 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800726a:	2b02      	cmp	r3, #2
 800726c:	d00a      	beq.n	8007284 <prvDeleteTCB+0x60>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60fb      	str	r3, [r7, #12]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <prvDeleteTCB+0x5e>
	}
 8007284:	bf00      	nop
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007292:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <prvResetNextTaskUnblockTime+0x38>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800729c:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <prvResetNextTaskUnblockTime+0x3c>)
 800729e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072a4:	e008      	b.n	80072b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a6:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <prvResetNextTaskUnblockTime+0x38>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	4a04      	ldr	r2, [pc, #16]	; (80072c8 <prvResetNextTaskUnblockTime+0x3c>)
 80072b6:	6013      	str	r3, [r2, #0]
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	24000ca0 	.word	0x24000ca0
 80072c8:	24000d08 	.word	0x24000d08

080072cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072d2:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <xTaskGetSchedulerState+0x34>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d102      	bne.n	80072e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072da:	2301      	movs	r3, #1
 80072dc:	607b      	str	r3, [r7, #4]
 80072de:	e008      	b.n	80072f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072e0:	4b08      	ldr	r3, [pc, #32]	; (8007304 <xTaskGetSchedulerState+0x38>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d102      	bne.n	80072ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072e8:	2302      	movs	r3, #2
 80072ea:	607b      	str	r3, [r7, #4]
 80072ec:	e001      	b.n	80072f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072ee:	2300      	movs	r3, #0
 80072f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072f2:	687b      	ldr	r3, [r7, #4]
	}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	24000cf4 	.word	0x24000cf4
 8007304:	24000d10 	.word	0x24000d10

08007308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d056      	beq.n	80073cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800731e:	4b2e      	ldr	r3, [pc, #184]	; (80073d8 <xTaskPriorityDisinherit+0xd0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	429a      	cmp	r2, r3
 8007326:	d00a      	beq.n	800733e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	60fb      	str	r3, [r7, #12]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60bb      	str	r3, [r7, #8]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007360:	1e5a      	subs	r2, r3, #1
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736e:	429a      	cmp	r2, r3
 8007370:	d02c      	beq.n	80073cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007376:	2b00      	cmp	r3, #0
 8007378:	d128      	bne.n	80073cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	3304      	adds	r3, #4
 800737e:	4618      	mov	r0, r3
 8007380:	f7fe fc46 	bl	8005c10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739c:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <xTaskPriorityDisinherit+0xd4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d903      	bls.n	80073ac <xTaskPriorityDisinherit+0xa4>
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	4a0c      	ldr	r2, [pc, #48]	; (80073dc <xTaskPriorityDisinherit+0xd4>)
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4a09      	ldr	r2, [pc, #36]	; (80073e0 <xTaskPriorityDisinherit+0xd8>)
 80073ba:	441a      	add	r2, r3
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3304      	adds	r3, #4
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f7fe fbc7 	bl	8005b56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073c8:	2301      	movs	r3, #1
 80073ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073cc:	697b      	ldr	r3, [r7, #20]
	}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	24000814 	.word	0x24000814
 80073dc:	24000cf0 	.word	0x24000cf0
 80073e0:	24000818 	.word	0x24000818

080073e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073ee:	4b21      	ldr	r3, [pc, #132]	; (8007474 <prvAddCurrentTaskToDelayedList+0x90>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073f4:	4b20      	ldr	r3, [pc, #128]	; (8007478 <prvAddCurrentTaskToDelayedList+0x94>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fc08 	bl	8005c10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007406:	d10a      	bne.n	800741e <prvAddCurrentTaskToDelayedList+0x3a>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800740e:	4b1a      	ldr	r3, [pc, #104]	; (8007478 <prvAddCurrentTaskToDelayedList+0x94>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3304      	adds	r3, #4
 8007414:	4619      	mov	r1, r3
 8007416:	4819      	ldr	r0, [pc, #100]	; (800747c <prvAddCurrentTaskToDelayedList+0x98>)
 8007418:	f7fe fb9d 	bl	8005b56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800741c:	e026      	b.n	800746c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4413      	add	r3, r2
 8007424:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007426:	4b14      	ldr	r3, [pc, #80]	; (8007478 <prvAddCurrentTaskToDelayedList+0x94>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	429a      	cmp	r2, r3
 8007434:	d209      	bcs.n	800744a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007436:	4b12      	ldr	r3, [pc, #72]	; (8007480 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <prvAddCurrentTaskToDelayedList+0x94>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3304      	adds	r3, #4
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7fe fbab 	bl	8005b9e <vListInsert>
}
 8007448:	e010      	b.n	800746c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800744a:	4b0e      	ldr	r3, [pc, #56]	; (8007484 <prvAddCurrentTaskToDelayedList+0xa0>)
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	4b0a      	ldr	r3, [pc, #40]	; (8007478 <prvAddCurrentTaskToDelayedList+0x94>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3304      	adds	r3, #4
 8007454:	4619      	mov	r1, r3
 8007456:	4610      	mov	r0, r2
 8007458:	f7fe fba1 	bl	8005b9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <prvAddCurrentTaskToDelayedList+0xa4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	429a      	cmp	r2, r3
 8007464:	d202      	bcs.n	800746c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007466:	4a08      	ldr	r2, [pc, #32]	; (8007488 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6013      	str	r3, [r2, #0]
}
 800746c:	bf00      	nop
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	24000cec 	.word	0x24000cec
 8007478:	24000814 	.word	0x24000814
 800747c:	24000cd4 	.word	0x24000cd4
 8007480:	24000ca4 	.word	0x24000ca4
 8007484:	24000ca0 	.word	0x24000ca0
 8007488:	24000d08 	.word	0x24000d08

0800748c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	; 0x28
 8007490:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007492:	2300      	movs	r3, #0
 8007494:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007496:	f000 fb07 	bl	8007aa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800749a:	4b1c      	ldr	r3, [pc, #112]	; (800750c <xTimerCreateTimerTask+0x80>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d021      	beq.n	80074e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074aa:	1d3a      	adds	r2, r7, #4
 80074ac:	f107 0108 	add.w	r1, r7, #8
 80074b0:	f107 030c 	add.w	r3, r7, #12
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe fb07 	bl	8005ac8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	9202      	str	r2, [sp, #8]
 80074c2:	9301      	str	r3, [sp, #4]
 80074c4:	2302      	movs	r3, #2
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	2300      	movs	r3, #0
 80074ca:	460a      	mov	r2, r1
 80074cc:	4910      	ldr	r1, [pc, #64]	; (8007510 <xTimerCreateTimerTask+0x84>)
 80074ce:	4811      	ldr	r0, [pc, #68]	; (8007514 <xTimerCreateTimerTask+0x88>)
 80074d0:	f7ff f8b4 	bl	800663c <xTaskCreateStatic>
 80074d4:	4603      	mov	r3, r0
 80074d6:	4a10      	ldr	r2, [pc, #64]	; (8007518 <xTimerCreateTimerTask+0x8c>)
 80074d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074da:	4b0f      	ldr	r3, [pc, #60]	; (8007518 <xTimerCreateTimerTask+0x8c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074e2:	2301      	movs	r3, #1
 80074e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	613b      	str	r3, [r7, #16]
}
 80074fe:	bf00      	nop
 8007500:	e7fe      	b.n	8007500 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007502:	697b      	ldr	r3, [r7, #20]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	24000d44 	.word	0x24000d44
 8007510:	08008d44 	.word	0x08008d44
 8007514:	08007651 	.word	0x08007651
 8007518:	24000d48 	.word	0x24000d48

0800751c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	; 0x28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800752a:	2300      	movs	r3, #0
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	623b      	str	r3, [r7, #32]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800754a:	4b1a      	ldr	r3, [pc, #104]	; (80075b4 <xTimerGenericCommand+0x98>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d02a      	beq.n	80075a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b05      	cmp	r3, #5
 8007562:	dc18      	bgt.n	8007596 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007564:	f7ff feb2 	bl	80072cc <xTaskGetSchedulerState>
 8007568:	4603      	mov	r3, r0
 800756a:	2b02      	cmp	r3, #2
 800756c:	d109      	bne.n	8007582 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800756e:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <xTimerGenericCommand+0x98>)
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	f107 0110 	add.w	r1, r7, #16
 8007576:	2300      	movs	r3, #0
 8007578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800757a:	f7fe fc77 	bl	8005e6c <xQueueGenericSend>
 800757e:	6278      	str	r0, [r7, #36]	; 0x24
 8007580:	e012      	b.n	80075a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007582:	4b0c      	ldr	r3, [pc, #48]	; (80075b4 <xTimerGenericCommand+0x98>)
 8007584:	6818      	ldr	r0, [r3, #0]
 8007586:	f107 0110 	add.w	r1, r7, #16
 800758a:	2300      	movs	r3, #0
 800758c:	2200      	movs	r2, #0
 800758e:	f7fe fc6d 	bl	8005e6c <xQueueGenericSend>
 8007592:	6278      	str	r0, [r7, #36]	; 0x24
 8007594:	e008      	b.n	80075a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007596:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <xTimerGenericCommand+0x98>)
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	f107 0110 	add.w	r1, r7, #16
 800759e:	2300      	movs	r3, #0
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	f7fe fd61 	bl	8006068 <xQueueGenericSendFromISR>
 80075a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3728      	adds	r7, #40	; 0x28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	24000d44 	.word	0x24000d44

080075b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af02      	add	r7, sp, #8
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c2:	4b22      	ldr	r3, [pc, #136]	; (800764c <prvProcessExpiredTimer+0x94>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fe fb1d 	bl	8005c10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d022      	beq.n	800762a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	699a      	ldr	r2, [r3, #24]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	18d1      	adds	r1, r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	6978      	ldr	r0, [r7, #20]
 80075f2:	f000 f8d1 	bl	8007798 <prvInsertTimerInActiveList>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01f      	beq.n	800763c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075fc:	2300      	movs	r3, #0
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	2300      	movs	r3, #0
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	2100      	movs	r1, #0
 8007606:	6978      	ldr	r0, [r7, #20]
 8007608:	f7ff ff88 	bl	800751c <xTimerGenericCommand>
 800760c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d113      	bne.n	800763c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	60fb      	str	r3, [r7, #12]
}
 8007626:	bf00      	nop
 8007628:	e7fe      	b.n	8007628 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007630:	f023 0301 	bic.w	r3, r3, #1
 8007634:	b2da      	uxtb	r2, r3
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	6978      	ldr	r0, [r7, #20]
 8007642:	4798      	blx	r3
}
 8007644:	bf00      	nop
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	24000d3c 	.word	0x24000d3c

08007650 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007658:	f107 0308 	add.w	r3, r7, #8
 800765c:	4618      	mov	r0, r3
 800765e:	f000 f857 	bl	8007710 <prvGetNextExpireTime>
 8007662:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	4619      	mov	r1, r3
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f803 	bl	8007674 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800766e:	f000 f8d5 	bl	800781c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007672:	e7f1      	b.n	8007658 <prvTimerTask+0x8>

08007674 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800767e:	f7ff fa39 	bl	8006af4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007682:	f107 0308 	add.w	r3, r7, #8
 8007686:	4618      	mov	r0, r3
 8007688:	f000 f866 	bl	8007758 <prvSampleTimeNow>
 800768c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d130      	bne.n	80076f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <prvProcessTimerOrBlockTask+0x3c>
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d806      	bhi.n	80076b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076a2:	f7ff fa35 	bl	8006b10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076a6:	68f9      	ldr	r1, [r7, #12]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff ff85 	bl	80075b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076ae:	e024      	b.n	80076fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d008      	beq.n	80076c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076b6:	4b13      	ldr	r3, [pc, #76]	; (8007704 <prvProcessTimerOrBlockTask+0x90>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <prvProcessTimerOrBlockTask+0x50>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <prvProcessTimerOrBlockTask+0x52>
 80076c4:	2300      	movs	r3, #0
 80076c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076c8:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <prvProcessTimerOrBlockTask+0x94>)
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4619      	mov	r1, r3
 80076d6:	f7fe ff7d 	bl	80065d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076da:	f7ff fa19 	bl	8006b10 <xTaskResumeAll>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10a      	bne.n	80076fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076e4:	4b09      	ldr	r3, [pc, #36]	; (800770c <prvProcessTimerOrBlockTask+0x98>)
 80076e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	f3bf 8f6f 	isb	sy
}
 80076f4:	e001      	b.n	80076fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076f6:	f7ff fa0b 	bl	8006b10 <xTaskResumeAll>
}
 80076fa:	bf00      	nop
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	24000d40 	.word	0x24000d40
 8007708:	24000d44 	.word	0x24000d44
 800770c:	e000ed04 	.word	0xe000ed04

08007710 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007718:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <prvGetNextExpireTime+0x44>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <prvGetNextExpireTime+0x16>
 8007722:	2201      	movs	r2, #1
 8007724:	e000      	b.n	8007728 <prvGetNextExpireTime+0x18>
 8007726:	2200      	movs	r2, #0
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d105      	bne.n	8007740 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007734:	4b07      	ldr	r3, [pc, #28]	; (8007754 <prvGetNextExpireTime+0x44>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]
 800773e:	e001      	b.n	8007744 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007744:	68fb      	ldr	r3, [r7, #12]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	24000d3c 	.word	0x24000d3c

08007758 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007760:	f7ff fa74 	bl	8006c4c <xTaskGetTickCount>
 8007764:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007766:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <prvSampleTimeNow+0x3c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	429a      	cmp	r2, r3
 800776e:	d205      	bcs.n	800777c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007770:	f000 f936 	bl	80079e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	e002      	b.n	8007782 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007782:	4a04      	ldr	r2, [pc, #16]	; (8007794 <prvSampleTimeNow+0x3c>)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007788:	68fb      	ldr	r3, [r7, #12]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	24000d4c 	.word	0x24000d4c

08007798 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077a6:	2300      	movs	r3, #0
 80077a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d812      	bhi.n	80077e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	1ad2      	subs	r2, r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d302      	bcc.n	80077d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077cc:	2301      	movs	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e01b      	b.n	800780a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077d2:	4b10      	ldr	r3, [pc, #64]	; (8007814 <prvInsertTimerInActiveList+0x7c>)
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3304      	adds	r3, #4
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f7fe f9de 	bl	8005b9e <vListInsert>
 80077e2:	e012      	b.n	800780a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d206      	bcs.n	80077fa <prvInsertTimerInActiveList+0x62>
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d302      	bcc.n	80077fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077f4:	2301      	movs	r3, #1
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	e007      	b.n	800780a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077fa:	4b07      	ldr	r3, [pc, #28]	; (8007818 <prvInsertTimerInActiveList+0x80>)
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3304      	adds	r3, #4
 8007802:	4619      	mov	r1, r3
 8007804:	4610      	mov	r0, r2
 8007806:	f7fe f9ca 	bl	8005b9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800780a:	697b      	ldr	r3, [r7, #20]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	24000d40 	.word	0x24000d40
 8007818:	24000d3c 	.word	0x24000d3c

0800781c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08e      	sub	sp, #56	; 0x38
 8007820:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007822:	e0ca      	b.n	80079ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	da18      	bge.n	800785c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800782a:	1d3b      	adds	r3, r7, #4
 800782c:	3304      	adds	r3, #4
 800782e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	61fb      	str	r3, [r7, #28]
}
 8007848:	bf00      	nop
 800784a:	e7fe      	b.n	800784a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007852:	6850      	ldr	r0, [r2, #4]
 8007854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007856:	6892      	ldr	r2, [r2, #8]
 8007858:	4611      	mov	r1, r2
 800785a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	f2c0 80aa 	blt.w	80079b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d004      	beq.n	800787a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	3304      	adds	r3, #4
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe f9cb 	bl	8005c10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800787a:	463b      	mov	r3, r7
 800787c:	4618      	mov	r0, r3
 800787e:	f7ff ff6b 	bl	8007758 <prvSampleTimeNow>
 8007882:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b09      	cmp	r3, #9
 8007888:	f200 8097 	bhi.w	80079ba <prvProcessReceivedCommands+0x19e>
 800788c:	a201      	add	r2, pc, #4	; (adr r2, 8007894 <prvProcessReceivedCommands+0x78>)
 800788e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007892:	bf00      	nop
 8007894:	080078bd 	.word	0x080078bd
 8007898:	080078bd 	.word	0x080078bd
 800789c:	080078bd 	.word	0x080078bd
 80078a0:	08007931 	.word	0x08007931
 80078a4:	08007945 	.word	0x08007945
 80078a8:	0800798f 	.word	0x0800798f
 80078ac:	080078bd 	.word	0x080078bd
 80078b0:	080078bd 	.word	0x080078bd
 80078b4:	08007931 	.word	0x08007931
 80078b8:	08007945 	.word	0x08007945
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078c2:	f043 0301 	orr.w	r3, r3, #1
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	18d1      	adds	r1, r2, r3
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078dc:	f7ff ff5c 	bl	8007798 <prvInsertTimerInActiveList>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d069      	beq.n	80079ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d05e      	beq.n	80079ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	441a      	add	r2, r3
 8007904:	2300      	movs	r3, #0
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	2300      	movs	r3, #0
 800790a:	2100      	movs	r1, #0
 800790c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800790e:	f7ff fe05 	bl	800751c <xTimerGenericCommand>
 8007912:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d14f      	bne.n	80079ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	61bb      	str	r3, [r7, #24]
}
 800792c:	bf00      	nop
 800792e:	e7fe      	b.n	800792e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007936:	f023 0301 	bic.w	r3, r3, #1
 800793a:	b2da      	uxtb	r2, r3
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007942:	e03a      	b.n	80079ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800794a:	f043 0301 	orr.w	r3, r3, #1
 800794e:	b2da      	uxtb	r2, r3
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10a      	bne.n	800797a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	617b      	str	r3, [r7, #20]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	699a      	ldr	r2, [r3, #24]
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	18d1      	adds	r1, r2, r3
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007988:	f7ff ff06 	bl	8007798 <prvInsertTimerInActiveList>
					break;
 800798c:	e015      	b.n	80079ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d103      	bne.n	80079a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800799c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800799e:	f000 fbdf 	bl	8008160 <vPortFree>
 80079a2:	e00a      	b.n	80079ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079b6:	e000      	b.n	80079ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ba:	4b08      	ldr	r3, [pc, #32]	; (80079dc <prvProcessReceivedCommands+0x1c0>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	1d39      	adds	r1, r7, #4
 80079c0:	2200      	movs	r2, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe fbec 	bl	80061a0 <xQueueReceive>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f47f af2a 	bne.w	8007824 <prvProcessReceivedCommands+0x8>
	}
}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	3730      	adds	r7, #48	; 0x30
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	24000d44 	.word	0x24000d44

080079e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079e6:	e048      	b.n	8007a7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079e8:	4b2d      	ldr	r3, [pc, #180]	; (8007aa0 <prvSwitchTimerLists+0xc0>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f2:	4b2b      	ldr	r3, [pc, #172]	; (8007aa0 <prvSwitchTimerLists+0xc0>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3304      	adds	r3, #4
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe f905 	bl	8005c10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d02e      	beq.n	8007a7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4413      	add	r3, r2
 8007a24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d90e      	bls.n	8007a4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a3a:	4b19      	ldr	r3, [pc, #100]	; (8007aa0 <prvSwitchTimerLists+0xc0>)
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3304      	adds	r3, #4
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f7fe f8aa 	bl	8005b9e <vListInsert>
 8007a4a:	e016      	b.n	8007a7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	2300      	movs	r3, #0
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	2100      	movs	r1, #0
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff fd60 	bl	800751c <xTimerGenericCommand>
 8007a5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	603b      	str	r3, [r7, #0]
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a7a:	4b09      	ldr	r3, [pc, #36]	; (8007aa0 <prvSwitchTimerLists+0xc0>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1b1      	bne.n	80079e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a84:	4b06      	ldr	r3, [pc, #24]	; (8007aa0 <prvSwitchTimerLists+0xc0>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a8a:	4b06      	ldr	r3, [pc, #24]	; (8007aa4 <prvSwitchTimerLists+0xc4>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a04      	ldr	r2, [pc, #16]	; (8007aa0 <prvSwitchTimerLists+0xc0>)
 8007a90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a92:	4a04      	ldr	r2, [pc, #16]	; (8007aa4 <prvSwitchTimerLists+0xc4>)
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	6013      	str	r3, [r2, #0]
}
 8007a98:	bf00      	nop
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	24000d3c 	.word	0x24000d3c
 8007aa4:	24000d40 	.word	0x24000d40

08007aa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007aae:	f000 f969 	bl	8007d84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ab2:	4b15      	ldr	r3, [pc, #84]	; (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d120      	bne.n	8007afc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007aba:	4814      	ldr	r0, [pc, #80]	; (8007b0c <prvCheckForValidListAndQueue+0x64>)
 8007abc:	f7fe f81e 	bl	8005afc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ac0:	4813      	ldr	r0, [pc, #76]	; (8007b10 <prvCheckForValidListAndQueue+0x68>)
 8007ac2:	f7fe f81b 	bl	8005afc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ac6:	4b13      	ldr	r3, [pc, #76]	; (8007b14 <prvCheckForValidListAndQueue+0x6c>)
 8007ac8:	4a10      	ldr	r2, [pc, #64]	; (8007b0c <prvCheckForValidListAndQueue+0x64>)
 8007aca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007acc:	4b12      	ldr	r3, [pc, #72]	; (8007b18 <prvCheckForValidListAndQueue+0x70>)
 8007ace:	4a10      	ldr	r2, [pc, #64]	; (8007b10 <prvCheckForValidListAndQueue+0x68>)
 8007ad0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	4b11      	ldr	r3, [pc, #68]	; (8007b1c <prvCheckForValidListAndQueue+0x74>)
 8007ad8:	4a11      	ldr	r2, [pc, #68]	; (8007b20 <prvCheckForValidListAndQueue+0x78>)
 8007ada:	2110      	movs	r1, #16
 8007adc:	200a      	movs	r0, #10
 8007ade:	f7fe f929 	bl	8005d34 <xQueueGenericCreateStatic>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4a08      	ldr	r2, [pc, #32]	; (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007ae6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ae8:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d005      	beq.n	8007afc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	490b      	ldr	r1, [pc, #44]	; (8007b24 <prvCheckForValidListAndQueue+0x7c>)
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fd42 	bl	8006580 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007afc:	f000 f972 	bl	8007de4 <vPortExitCritical>
}
 8007b00:	bf00      	nop
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	24000d44 	.word	0x24000d44
 8007b0c:	24000d14 	.word	0x24000d14
 8007b10:	24000d28 	.word	0x24000d28
 8007b14:	24000d3c 	.word	0x24000d3c
 8007b18:	24000d40 	.word	0x24000d40
 8007b1c:	24000df0 	.word	0x24000df0
 8007b20:	24000d50 	.word	0x24000d50
 8007b24:	08008d4c 	.word	0x08008d4c

08007b28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3b04      	subs	r3, #4
 8007b38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3b04      	subs	r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f023 0201 	bic.w	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3b04      	subs	r3, #4
 8007b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b58:	4a0c      	ldr	r2, [pc, #48]	; (8007b8c <pxPortInitialiseStack+0x64>)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3b14      	subs	r3, #20
 8007b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3b04      	subs	r3, #4
 8007b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f06f 0202 	mvn.w	r2, #2
 8007b76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3b20      	subs	r3, #32
 8007b7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	08007b91 	.word	0x08007b91

08007b90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b9a:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <prvTaskExitError+0x54>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba2:	d00a      	beq.n	8007bba <prvTaskExitError+0x2a>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	60fb      	str	r3, [r7, #12]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <prvTaskExitError+0x28>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	60bb      	str	r3, [r7, #8]
}
 8007bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bce:	bf00      	nop
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0fc      	beq.n	8007bd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bd6:	bf00      	nop
 8007bd8:	bf00      	nop
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	24000010 	.word	0x24000010
	...

08007bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bf0:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <pxCurrentTCBConst2>)
 8007bf2:	6819      	ldr	r1, [r3, #0]
 8007bf4:	6808      	ldr	r0, [r1, #0]
 8007bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfa:	f380 8809 	msr	PSP, r0
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f04f 0000 	mov.w	r0, #0
 8007c06:	f380 8811 	msr	BASEPRI, r0
 8007c0a:	4770      	bx	lr
 8007c0c:	f3af 8000 	nop.w

08007c10 <pxCurrentTCBConst2>:
 8007c10:	24000814 	.word	0x24000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop

08007c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c18:	4808      	ldr	r0, [pc, #32]	; (8007c3c <prvPortStartFirstTask+0x24>)
 8007c1a:	6800      	ldr	r0, [r0, #0]
 8007c1c:	6800      	ldr	r0, [r0, #0]
 8007c1e:	f380 8808 	msr	MSP, r0
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f380 8814 	msr	CONTROL, r0
 8007c2a:	b662      	cpsie	i
 8007c2c:	b661      	cpsie	f
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	df00      	svc	0
 8007c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c3a:	bf00      	nop
 8007c3c:	e000ed08 	.word	0xe000ed08

08007c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c46:	4b46      	ldr	r3, [pc, #280]	; (8007d60 <xPortStartScheduler+0x120>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a46      	ldr	r2, [pc, #280]	; (8007d64 <xPortStartScheduler+0x124>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d10a      	bne.n	8007c66 <xPortStartScheduler+0x26>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	613b      	str	r3, [r7, #16]
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c66:	4b3e      	ldr	r3, [pc, #248]	; (8007d60 <xPortStartScheduler+0x120>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a3f      	ldr	r2, [pc, #252]	; (8007d68 <xPortStartScheduler+0x128>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10a      	bne.n	8007c86 <xPortStartScheduler+0x46>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	60fb      	str	r3, [r7, #12]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c86:	4b39      	ldr	r3, [pc, #228]	; (8007d6c <xPortStartScheduler+0x12c>)
 8007c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	22ff      	movs	r2, #255	; 0xff
 8007c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	4b31      	ldr	r3, [pc, #196]	; (8007d70 <xPortStartScheduler+0x130>)
 8007cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cae:	4b31      	ldr	r3, [pc, #196]	; (8007d74 <xPortStartScheduler+0x134>)
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cb4:	e009      	b.n	8007cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007cb6:	4b2f      	ldr	r3, [pc, #188]	; (8007d74 <xPortStartScheduler+0x134>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	4a2d      	ldr	r2, [pc, #180]	; (8007d74 <xPortStartScheduler+0x134>)
 8007cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd2:	2b80      	cmp	r3, #128	; 0x80
 8007cd4:	d0ef      	beq.n	8007cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cd6:	4b27      	ldr	r3, [pc, #156]	; (8007d74 <xPortStartScheduler+0x134>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f1c3 0307 	rsb	r3, r3, #7
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d00a      	beq.n	8007cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	60bb      	str	r3, [r7, #8]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cf8:	4b1e      	ldr	r3, [pc, #120]	; (8007d74 <xPortStartScheduler+0x134>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	021b      	lsls	r3, r3, #8
 8007cfe:	4a1d      	ldr	r2, [pc, #116]	; (8007d74 <xPortStartScheduler+0x134>)
 8007d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d02:	4b1c      	ldr	r3, [pc, #112]	; (8007d74 <xPortStartScheduler+0x134>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d0a:	4a1a      	ldr	r2, [pc, #104]	; (8007d74 <xPortStartScheduler+0x134>)
 8007d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d16:	4b18      	ldr	r3, [pc, #96]	; (8007d78 <xPortStartScheduler+0x138>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a17      	ldr	r2, [pc, #92]	; (8007d78 <xPortStartScheduler+0x138>)
 8007d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d22:	4b15      	ldr	r3, [pc, #84]	; (8007d78 <xPortStartScheduler+0x138>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a14      	ldr	r2, [pc, #80]	; (8007d78 <xPortStartScheduler+0x138>)
 8007d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d2e:	f000 f8dd 	bl	8007eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d32:	4b12      	ldr	r3, [pc, #72]	; (8007d7c <xPortStartScheduler+0x13c>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d38:	f000 f8fc 	bl	8007f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d3c:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <xPortStartScheduler+0x140>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a0f      	ldr	r2, [pc, #60]	; (8007d80 <xPortStartScheduler+0x140>)
 8007d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d48:	f7ff ff66 	bl	8007c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d4c:	f7ff f848 	bl	8006de0 <vTaskSwitchContext>
	prvTaskExitError();
 8007d50:	f7ff ff1e 	bl	8007b90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	e000ed00 	.word	0xe000ed00
 8007d64:	410fc271 	.word	0x410fc271
 8007d68:	410fc270 	.word	0x410fc270
 8007d6c:	e000e400 	.word	0xe000e400
 8007d70:	24000e40 	.word	0x24000e40
 8007d74:	24000e44 	.word	0x24000e44
 8007d78:	e000ed20 	.word	0xe000ed20
 8007d7c:	24000010 	.word	0x24000010
 8007d80:	e000ef34 	.word	0xe000ef34

08007d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	607b      	str	r3, [r7, #4]
}
 8007d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d9e:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <vPortEnterCritical+0x58>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3301      	adds	r3, #1
 8007da4:	4a0d      	ldr	r2, [pc, #52]	; (8007ddc <vPortEnterCritical+0x58>)
 8007da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007da8:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <vPortEnterCritical+0x58>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d10f      	bne.n	8007dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <vPortEnterCritical+0x5c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	603b      	str	r3, [r7, #0]
}
 8007dcc:	bf00      	nop
 8007dce:	e7fe      	b.n	8007dce <vPortEnterCritical+0x4a>
	}
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	24000010 	.word	0x24000010
 8007de0:	e000ed04 	.word	0xe000ed04

08007de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dea:	4b12      	ldr	r3, [pc, #72]	; (8007e34 <vPortExitCritical+0x50>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <vPortExitCritical+0x24>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	607b      	str	r3, [r7, #4]
}
 8007e04:	bf00      	nop
 8007e06:	e7fe      	b.n	8007e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <vPortExitCritical+0x50>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	4a09      	ldr	r2, [pc, #36]	; (8007e34 <vPortExitCritical+0x50>)
 8007e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e12:	4b08      	ldr	r3, [pc, #32]	; (8007e34 <vPortExitCritical+0x50>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d105      	bne.n	8007e26 <vPortExitCritical+0x42>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	f383 8811 	msr	BASEPRI, r3
}
 8007e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	24000010 	.word	0x24000010
	...

08007e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e40:	f3ef 8009 	mrs	r0, PSP
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <pxCurrentTCBConst>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f01e 0f10 	tst.w	lr, #16
 8007e50:	bf08      	it	eq
 8007e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	6010      	str	r0, [r2, #0]
 8007e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e64:	f380 8811 	msr	BASEPRI, r0
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f7fe ffb6 	bl	8006de0 <vTaskSwitchContext>
 8007e74:	f04f 0000 	mov.w	r0, #0
 8007e78:	f380 8811 	msr	BASEPRI, r0
 8007e7c:	bc09      	pop	{r0, r3}
 8007e7e:	6819      	ldr	r1, [r3, #0]
 8007e80:	6808      	ldr	r0, [r1, #0]
 8007e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e86:	f01e 0f10 	tst.w	lr, #16
 8007e8a:	bf08      	it	eq
 8007e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e90:	f380 8809 	msr	PSP, r0
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst>:
 8007ea0:	24000814 	.word	0x24000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	607b      	str	r3, [r7, #4]
}
 8007ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ec2:	f7fe fed3 	bl	8006c6c <xTaskIncrementTick>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ecc:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <xPortSysTickHandler+0x40>)
 8007ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f383 8811 	msr	BASEPRI, r3
}
 8007ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <vPortSetupTimerInterrupt+0x34>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <vPortSetupTimerInterrupt+0x38>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <vPortSetupTimerInterrupt+0x3c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <vPortSetupTimerInterrupt+0x40>)
 8007f02:	fba2 2303 	umull	r2, r3, r2, r3
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <vPortSetupTimerInterrupt+0x44>)
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f0e:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <vPortSetupTimerInterrupt+0x34>)
 8007f10:	2207      	movs	r2, #7
 8007f12:	601a      	str	r2, [r3, #0]
}
 8007f14:	bf00      	nop
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	e000e010 	.word	0xe000e010
 8007f24:	e000e018 	.word	0xe000e018
 8007f28:	24000000 	.word	0x24000000
 8007f2c:	10624dd3 	.word	0x10624dd3
 8007f30:	e000e014 	.word	0xe000e014

08007f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f44 <vPortEnableVFP+0x10>
 8007f38:	6801      	ldr	r1, [r0, #0]
 8007f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f3e:	6001      	str	r1, [r0, #0]
 8007f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f42:	bf00      	nop
 8007f44:	e000ed88 	.word	0xe000ed88

08007f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f4e:	f3ef 8305 	mrs	r3, IPSR
 8007f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b0f      	cmp	r3, #15
 8007f58:	d914      	bls.n	8007f84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f5a:	4a17      	ldr	r2, [pc, #92]	; (8007fb8 <vPortValidateInterruptPriority+0x70>)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f64:	4b15      	ldr	r3, [pc, #84]	; (8007fbc <vPortValidateInterruptPriority+0x74>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	7afa      	ldrb	r2, [r7, #11]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d20a      	bcs.n	8007f84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	607b      	str	r3, [r7, #4]
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f84:	4b0e      	ldr	r3, [pc, #56]	; (8007fc0 <vPortValidateInterruptPriority+0x78>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <vPortValidateInterruptPriority+0x7c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d90a      	bls.n	8007faa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	603b      	str	r3, [r7, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	e7fe      	b.n	8007fa8 <vPortValidateInterruptPriority+0x60>
	}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	e000e3f0 	.word	0xe000e3f0
 8007fbc:	24000e40 	.word	0x24000e40
 8007fc0:	e000ed0c 	.word	0xe000ed0c
 8007fc4:	24000e44 	.word	0x24000e44

08007fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08a      	sub	sp, #40	; 0x28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fd4:	f7fe fd8e 	bl	8006af4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fd8:	4b5b      	ldr	r3, [pc, #364]	; (8008148 <pvPortMalloc+0x180>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fe0:	f000 f920 	bl	8008224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fe4:	4b59      	ldr	r3, [pc, #356]	; (800814c <pvPortMalloc+0x184>)
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4013      	ands	r3, r2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f040 8093 	bne.w	8008118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01d      	beq.n	8008034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ff8:	2208      	movs	r2, #8
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	2b00      	cmp	r3, #0
 8008008:	d014      	beq.n	8008034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f023 0307 	bic.w	r3, r3, #7
 8008010:	3308      	adds	r3, #8
 8008012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <pvPortMalloc+0x6c>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	617b      	str	r3, [r7, #20]
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d06e      	beq.n	8008118 <pvPortMalloc+0x150>
 800803a:	4b45      	ldr	r3, [pc, #276]	; (8008150 <pvPortMalloc+0x188>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d869      	bhi.n	8008118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008044:	4b43      	ldr	r3, [pc, #268]	; (8008154 <pvPortMalloc+0x18c>)
 8008046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008048:	4b42      	ldr	r3, [pc, #264]	; (8008154 <pvPortMalloc+0x18c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800804e:	e004      	b.n	800805a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	d903      	bls.n	800806c <pvPortMalloc+0xa4>
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f1      	bne.n	8008050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800806c:	4b36      	ldr	r3, [pc, #216]	; (8008148 <pvPortMalloc+0x180>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008072:	429a      	cmp	r2, r3
 8008074:	d050      	beq.n	8008118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2208      	movs	r2, #8
 800807c:	4413      	add	r3, r2
 800807e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	1ad2      	subs	r2, r2, r3
 8008090:	2308      	movs	r3, #8
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	429a      	cmp	r2, r3
 8008096:	d91f      	bls.n	80080d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4413      	add	r3, r2
 800809e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	f003 0307 	and.w	r3, r3, #7
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00a      	beq.n	80080c0 <pvPortMalloc+0xf8>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	613b      	str	r3, [r7, #16]
}
 80080bc:	bf00      	nop
 80080be:	e7fe      	b.n	80080be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	1ad2      	subs	r2, r2, r3
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080d2:	69b8      	ldr	r0, [r7, #24]
 80080d4:	f000 f908 	bl	80082e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080d8:	4b1d      	ldr	r3, [pc, #116]	; (8008150 <pvPortMalloc+0x188>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	4a1b      	ldr	r2, [pc, #108]	; (8008150 <pvPortMalloc+0x188>)
 80080e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080e6:	4b1a      	ldr	r3, [pc, #104]	; (8008150 <pvPortMalloc+0x188>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	4b1b      	ldr	r3, [pc, #108]	; (8008158 <pvPortMalloc+0x190>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d203      	bcs.n	80080fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080f2:	4b17      	ldr	r3, [pc, #92]	; (8008150 <pvPortMalloc+0x188>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a18      	ldr	r2, [pc, #96]	; (8008158 <pvPortMalloc+0x190>)
 80080f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <pvPortMalloc+0x184>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	431a      	orrs	r2, r3
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800810e:	4b13      	ldr	r3, [pc, #76]	; (800815c <pvPortMalloc+0x194>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3301      	adds	r3, #1
 8008114:	4a11      	ldr	r2, [pc, #68]	; (800815c <pvPortMalloc+0x194>)
 8008116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008118:	f7fe fcfa 	bl	8006b10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <pvPortMalloc+0x174>
	__asm volatile
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	60fb      	str	r3, [r7, #12]
}
 8008138:	bf00      	nop
 800813a:	e7fe      	b.n	800813a <pvPortMalloc+0x172>
	return pvReturn;
 800813c:	69fb      	ldr	r3, [r7, #28]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3728      	adds	r7, #40	; 0x28
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	24004a50 	.word	0x24004a50
 800814c:	24004a64 	.word	0x24004a64
 8008150:	24004a54 	.word	0x24004a54
 8008154:	24004a48 	.word	0x24004a48
 8008158:	24004a58 	.word	0x24004a58
 800815c:	24004a5c 	.word	0x24004a5c

08008160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d04d      	beq.n	800820e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008172:	2308      	movs	r3, #8
 8008174:	425b      	negs	r3, r3
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	4413      	add	r3, r2
 800817a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	4b24      	ldr	r3, [pc, #144]	; (8008218 <vPortFree+0xb8>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4013      	ands	r3, r2
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <vPortFree+0x44>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	60fb      	str	r3, [r7, #12]
}
 80081a0:	bf00      	nop
 80081a2:	e7fe      	b.n	80081a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <vPortFree+0x62>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	60bb      	str	r3, [r7, #8]
}
 80081be:	bf00      	nop
 80081c0:	e7fe      	b.n	80081c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <vPortFree+0xb8>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4013      	ands	r3, r2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d01e      	beq.n	800820e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d11a      	bne.n	800820e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	4b0e      	ldr	r3, [pc, #56]	; (8008218 <vPortFree+0xb8>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	43db      	mvns	r3, r3
 80081e2:	401a      	ands	r2, r3
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081e8:	f7fe fc84 	bl	8006af4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	4b0a      	ldr	r3, [pc, #40]	; (800821c <vPortFree+0xbc>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4413      	add	r3, r2
 80081f6:	4a09      	ldr	r2, [pc, #36]	; (800821c <vPortFree+0xbc>)
 80081f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081fa:	6938      	ldr	r0, [r7, #16]
 80081fc:	f000 f874 	bl	80082e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008200:	4b07      	ldr	r3, [pc, #28]	; (8008220 <vPortFree+0xc0>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3301      	adds	r3, #1
 8008206:	4a06      	ldr	r2, [pc, #24]	; (8008220 <vPortFree+0xc0>)
 8008208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800820a:	f7fe fc81 	bl	8006b10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800820e:	bf00      	nop
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	24004a64 	.word	0x24004a64
 800821c:	24004a54 	.word	0x24004a54
 8008220:	24004a60 	.word	0x24004a60

08008224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800822a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800822e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008230:	4b27      	ldr	r3, [pc, #156]	; (80082d0 <prvHeapInit+0xac>)
 8008232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f003 0307 	and.w	r3, r3, #7
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00c      	beq.n	8008258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3307      	adds	r3, #7
 8008242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f023 0307 	bic.w	r3, r3, #7
 800824a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	4a1f      	ldr	r2, [pc, #124]	; (80082d0 <prvHeapInit+0xac>)
 8008254:	4413      	add	r3, r2
 8008256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800825c:	4a1d      	ldr	r2, [pc, #116]	; (80082d4 <prvHeapInit+0xb0>)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008262:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <prvHeapInit+0xb0>)
 8008264:	2200      	movs	r2, #0
 8008266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	4413      	add	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008270:	2208      	movs	r2, #8
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	1a9b      	subs	r3, r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0307 	bic.w	r3, r3, #7
 800827e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	4a15      	ldr	r2, [pc, #84]	; (80082d8 <prvHeapInit+0xb4>)
 8008284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008286:	4b14      	ldr	r3, [pc, #80]	; (80082d8 <prvHeapInit+0xb4>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2200      	movs	r2, #0
 800828c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800828e:	4b12      	ldr	r3, [pc, #72]	; (80082d8 <prvHeapInit+0xb4>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	1ad2      	subs	r2, r2, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082a4:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <prvHeapInit+0xb4>)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	4a0a      	ldr	r2, [pc, #40]	; (80082dc <prvHeapInit+0xb8>)
 80082b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	4a09      	ldr	r2, [pc, #36]	; (80082e0 <prvHeapInit+0xbc>)
 80082ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <prvHeapInit+0xc0>)
 80082be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082c2:	601a      	str	r2, [r3, #0]
}
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	24000e48 	.word	0x24000e48
 80082d4:	24004a48 	.word	0x24004a48
 80082d8:	24004a50 	.word	0x24004a50
 80082dc:	24004a58 	.word	0x24004a58
 80082e0:	24004a54 	.word	0x24004a54
 80082e4:	24004a64 	.word	0x24004a64

080082e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082f0:	4b28      	ldr	r3, [pc, #160]	; (8008394 <prvInsertBlockIntoFreeList+0xac>)
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	e002      	b.n	80082fc <prvInsertBlockIntoFreeList+0x14>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d8f7      	bhi.n	80082f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	4413      	add	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	429a      	cmp	r2, r3
 8008316:	d108      	bne.n	800832a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	441a      	add	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	441a      	add	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	d118      	bne.n	8008370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	4b15      	ldr	r3, [pc, #84]	; (8008398 <prvInsertBlockIntoFreeList+0xb0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	429a      	cmp	r2, r3
 8008348:	d00d      	beq.n	8008366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	441a      	add	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	e008      	b.n	8008378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008366:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <prvInsertBlockIntoFreeList+0xb0>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	e003      	b.n	8008378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	429a      	cmp	r2, r3
 800837e:	d002      	beq.n	8008386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008386:	bf00      	nop
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	24004a48 	.word	0x24004a48
 8008398:	24004a50 	.word	0x24004a50

0800839c <__errno>:
 800839c:	4b01      	ldr	r3, [pc, #4]	; (80083a4 <__errno+0x8>)
 800839e:	6818      	ldr	r0, [r3, #0]
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	24000014 	.word	0x24000014

080083a8 <std>:
 80083a8:	2300      	movs	r3, #0
 80083aa:	b510      	push	{r4, lr}
 80083ac:	4604      	mov	r4, r0
 80083ae:	e9c0 3300 	strd	r3, r3, [r0]
 80083b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083b6:	6083      	str	r3, [r0, #8]
 80083b8:	8181      	strh	r1, [r0, #12]
 80083ba:	6643      	str	r3, [r0, #100]	; 0x64
 80083bc:	81c2      	strh	r2, [r0, #14]
 80083be:	6183      	str	r3, [r0, #24]
 80083c0:	4619      	mov	r1, r3
 80083c2:	2208      	movs	r2, #8
 80083c4:	305c      	adds	r0, #92	; 0x5c
 80083c6:	f000 f91a 	bl	80085fe <memset>
 80083ca:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <std+0x38>)
 80083cc:	6263      	str	r3, [r4, #36]	; 0x24
 80083ce:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <std+0x3c>)
 80083d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80083d2:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <std+0x40>)
 80083d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083d6:	4b05      	ldr	r3, [pc, #20]	; (80083ec <std+0x44>)
 80083d8:	6224      	str	r4, [r4, #32]
 80083da:	6323      	str	r3, [r4, #48]	; 0x30
 80083dc:	bd10      	pop	{r4, pc}
 80083de:	bf00      	nop
 80083e0:	08008945 	.word	0x08008945
 80083e4:	08008967 	.word	0x08008967
 80083e8:	0800899f 	.word	0x0800899f
 80083ec:	080089c3 	.word	0x080089c3

080083f0 <_cleanup_r>:
 80083f0:	4901      	ldr	r1, [pc, #4]	; (80083f8 <_cleanup_r+0x8>)
 80083f2:	f000 b8af 	b.w	8008554 <_fwalk_reent>
 80083f6:	bf00      	nop
 80083f8:	08008b1d 	.word	0x08008b1d

080083fc <__sfmoreglue>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	1e4a      	subs	r2, r1, #1
 8008400:	2568      	movs	r5, #104	; 0x68
 8008402:	4355      	muls	r5, r2
 8008404:	460e      	mov	r6, r1
 8008406:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800840a:	f000 f901 	bl	8008610 <_malloc_r>
 800840e:	4604      	mov	r4, r0
 8008410:	b140      	cbz	r0, 8008424 <__sfmoreglue+0x28>
 8008412:	2100      	movs	r1, #0
 8008414:	e9c0 1600 	strd	r1, r6, [r0]
 8008418:	300c      	adds	r0, #12
 800841a:	60a0      	str	r0, [r4, #8]
 800841c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008420:	f000 f8ed 	bl	80085fe <memset>
 8008424:	4620      	mov	r0, r4
 8008426:	bd70      	pop	{r4, r5, r6, pc}

08008428 <__sfp_lock_acquire>:
 8008428:	4801      	ldr	r0, [pc, #4]	; (8008430 <__sfp_lock_acquire+0x8>)
 800842a:	f000 b8d8 	b.w	80085de <__retarget_lock_acquire_recursive>
 800842e:	bf00      	nop
 8008430:	24004c08 	.word	0x24004c08

08008434 <__sfp_lock_release>:
 8008434:	4801      	ldr	r0, [pc, #4]	; (800843c <__sfp_lock_release+0x8>)
 8008436:	f000 b8d3 	b.w	80085e0 <__retarget_lock_release_recursive>
 800843a:	bf00      	nop
 800843c:	24004c08 	.word	0x24004c08

08008440 <__sinit_lock_acquire>:
 8008440:	4801      	ldr	r0, [pc, #4]	; (8008448 <__sinit_lock_acquire+0x8>)
 8008442:	f000 b8cc 	b.w	80085de <__retarget_lock_acquire_recursive>
 8008446:	bf00      	nop
 8008448:	24004c03 	.word	0x24004c03

0800844c <__sinit_lock_release>:
 800844c:	4801      	ldr	r0, [pc, #4]	; (8008454 <__sinit_lock_release+0x8>)
 800844e:	f000 b8c7 	b.w	80085e0 <__retarget_lock_release_recursive>
 8008452:	bf00      	nop
 8008454:	24004c03 	.word	0x24004c03

08008458 <__sinit>:
 8008458:	b510      	push	{r4, lr}
 800845a:	4604      	mov	r4, r0
 800845c:	f7ff fff0 	bl	8008440 <__sinit_lock_acquire>
 8008460:	69a3      	ldr	r3, [r4, #24]
 8008462:	b11b      	cbz	r3, 800846c <__sinit+0x14>
 8008464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008468:	f7ff bff0 	b.w	800844c <__sinit_lock_release>
 800846c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008470:	6523      	str	r3, [r4, #80]	; 0x50
 8008472:	4b13      	ldr	r3, [pc, #76]	; (80084c0 <__sinit+0x68>)
 8008474:	4a13      	ldr	r2, [pc, #76]	; (80084c4 <__sinit+0x6c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	62a2      	str	r2, [r4, #40]	; 0x28
 800847a:	42a3      	cmp	r3, r4
 800847c:	bf04      	itt	eq
 800847e:	2301      	moveq	r3, #1
 8008480:	61a3      	streq	r3, [r4, #24]
 8008482:	4620      	mov	r0, r4
 8008484:	f000 f820 	bl	80084c8 <__sfp>
 8008488:	6060      	str	r0, [r4, #4]
 800848a:	4620      	mov	r0, r4
 800848c:	f000 f81c 	bl	80084c8 <__sfp>
 8008490:	60a0      	str	r0, [r4, #8]
 8008492:	4620      	mov	r0, r4
 8008494:	f000 f818 	bl	80084c8 <__sfp>
 8008498:	2200      	movs	r2, #0
 800849a:	60e0      	str	r0, [r4, #12]
 800849c:	2104      	movs	r1, #4
 800849e:	6860      	ldr	r0, [r4, #4]
 80084a0:	f7ff ff82 	bl	80083a8 <std>
 80084a4:	68a0      	ldr	r0, [r4, #8]
 80084a6:	2201      	movs	r2, #1
 80084a8:	2109      	movs	r1, #9
 80084aa:	f7ff ff7d 	bl	80083a8 <std>
 80084ae:	68e0      	ldr	r0, [r4, #12]
 80084b0:	2202      	movs	r2, #2
 80084b2:	2112      	movs	r1, #18
 80084b4:	f7ff ff78 	bl	80083a8 <std>
 80084b8:	2301      	movs	r3, #1
 80084ba:	61a3      	str	r3, [r4, #24]
 80084bc:	e7d2      	b.n	8008464 <__sinit+0xc>
 80084be:	bf00      	nop
 80084c0:	08008e34 	.word	0x08008e34
 80084c4:	080083f1 	.word	0x080083f1

080084c8 <__sfp>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	4607      	mov	r7, r0
 80084cc:	f7ff ffac 	bl	8008428 <__sfp_lock_acquire>
 80084d0:	4b1e      	ldr	r3, [pc, #120]	; (800854c <__sfp+0x84>)
 80084d2:	681e      	ldr	r6, [r3, #0]
 80084d4:	69b3      	ldr	r3, [r6, #24]
 80084d6:	b913      	cbnz	r3, 80084de <__sfp+0x16>
 80084d8:	4630      	mov	r0, r6
 80084da:	f7ff ffbd 	bl	8008458 <__sinit>
 80084de:	3648      	adds	r6, #72	; 0x48
 80084e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	d503      	bpl.n	80084f0 <__sfp+0x28>
 80084e8:	6833      	ldr	r3, [r6, #0]
 80084ea:	b30b      	cbz	r3, 8008530 <__sfp+0x68>
 80084ec:	6836      	ldr	r6, [r6, #0]
 80084ee:	e7f7      	b.n	80084e0 <__sfp+0x18>
 80084f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084f4:	b9d5      	cbnz	r5, 800852c <__sfp+0x64>
 80084f6:	4b16      	ldr	r3, [pc, #88]	; (8008550 <__sfp+0x88>)
 80084f8:	60e3      	str	r3, [r4, #12]
 80084fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084fe:	6665      	str	r5, [r4, #100]	; 0x64
 8008500:	f000 f86c 	bl	80085dc <__retarget_lock_init_recursive>
 8008504:	f7ff ff96 	bl	8008434 <__sfp_lock_release>
 8008508:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800850c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008510:	6025      	str	r5, [r4, #0]
 8008512:	61a5      	str	r5, [r4, #24]
 8008514:	2208      	movs	r2, #8
 8008516:	4629      	mov	r1, r5
 8008518:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800851c:	f000 f86f 	bl	80085fe <memset>
 8008520:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008524:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008528:	4620      	mov	r0, r4
 800852a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800852c:	3468      	adds	r4, #104	; 0x68
 800852e:	e7d9      	b.n	80084e4 <__sfp+0x1c>
 8008530:	2104      	movs	r1, #4
 8008532:	4638      	mov	r0, r7
 8008534:	f7ff ff62 	bl	80083fc <__sfmoreglue>
 8008538:	4604      	mov	r4, r0
 800853a:	6030      	str	r0, [r6, #0]
 800853c:	2800      	cmp	r0, #0
 800853e:	d1d5      	bne.n	80084ec <__sfp+0x24>
 8008540:	f7ff ff78 	bl	8008434 <__sfp_lock_release>
 8008544:	230c      	movs	r3, #12
 8008546:	603b      	str	r3, [r7, #0]
 8008548:	e7ee      	b.n	8008528 <__sfp+0x60>
 800854a:	bf00      	nop
 800854c:	08008e34 	.word	0x08008e34
 8008550:	ffff0001 	.word	0xffff0001

08008554 <_fwalk_reent>:
 8008554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008558:	4606      	mov	r6, r0
 800855a:	4688      	mov	r8, r1
 800855c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008560:	2700      	movs	r7, #0
 8008562:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008566:	f1b9 0901 	subs.w	r9, r9, #1
 800856a:	d505      	bpl.n	8008578 <_fwalk_reent+0x24>
 800856c:	6824      	ldr	r4, [r4, #0]
 800856e:	2c00      	cmp	r4, #0
 8008570:	d1f7      	bne.n	8008562 <_fwalk_reent+0xe>
 8008572:	4638      	mov	r0, r7
 8008574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008578:	89ab      	ldrh	r3, [r5, #12]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d907      	bls.n	800858e <_fwalk_reent+0x3a>
 800857e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008582:	3301      	adds	r3, #1
 8008584:	d003      	beq.n	800858e <_fwalk_reent+0x3a>
 8008586:	4629      	mov	r1, r5
 8008588:	4630      	mov	r0, r6
 800858a:	47c0      	blx	r8
 800858c:	4307      	orrs	r7, r0
 800858e:	3568      	adds	r5, #104	; 0x68
 8008590:	e7e9      	b.n	8008566 <_fwalk_reent+0x12>
	...

08008594 <__libc_init_array>:
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	4d0d      	ldr	r5, [pc, #52]	; (80085cc <__libc_init_array+0x38>)
 8008598:	4c0d      	ldr	r4, [pc, #52]	; (80085d0 <__libc_init_array+0x3c>)
 800859a:	1b64      	subs	r4, r4, r5
 800859c:	10a4      	asrs	r4, r4, #2
 800859e:	2600      	movs	r6, #0
 80085a0:	42a6      	cmp	r6, r4
 80085a2:	d109      	bne.n	80085b8 <__libc_init_array+0x24>
 80085a4:	4d0b      	ldr	r5, [pc, #44]	; (80085d4 <__libc_init_array+0x40>)
 80085a6:	4c0c      	ldr	r4, [pc, #48]	; (80085d8 <__libc_init_array+0x44>)
 80085a8:	f000 fbb2 	bl	8008d10 <_init>
 80085ac:	1b64      	subs	r4, r4, r5
 80085ae:	10a4      	asrs	r4, r4, #2
 80085b0:	2600      	movs	r6, #0
 80085b2:	42a6      	cmp	r6, r4
 80085b4:	d105      	bne.n	80085c2 <__libc_init_array+0x2e>
 80085b6:	bd70      	pop	{r4, r5, r6, pc}
 80085b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085bc:	4798      	blx	r3
 80085be:	3601      	adds	r6, #1
 80085c0:	e7ee      	b.n	80085a0 <__libc_init_array+0xc>
 80085c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c6:	4798      	blx	r3
 80085c8:	3601      	adds	r6, #1
 80085ca:	e7f2      	b.n	80085b2 <__libc_init_array+0x1e>
 80085cc:	08008e40 	.word	0x08008e40
 80085d0:	08008e40 	.word	0x08008e40
 80085d4:	08008e40 	.word	0x08008e40
 80085d8:	08008e44 	.word	0x08008e44

080085dc <__retarget_lock_init_recursive>:
 80085dc:	4770      	bx	lr

080085de <__retarget_lock_acquire_recursive>:
 80085de:	4770      	bx	lr

080085e0 <__retarget_lock_release_recursive>:
 80085e0:	4770      	bx	lr

080085e2 <memcpy>:
 80085e2:	440a      	add	r2, r1
 80085e4:	4291      	cmp	r1, r2
 80085e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085ea:	d100      	bne.n	80085ee <memcpy+0xc>
 80085ec:	4770      	bx	lr
 80085ee:	b510      	push	{r4, lr}
 80085f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085f8:	4291      	cmp	r1, r2
 80085fa:	d1f9      	bne.n	80085f0 <memcpy+0xe>
 80085fc:	bd10      	pop	{r4, pc}

080085fe <memset>:
 80085fe:	4402      	add	r2, r0
 8008600:	4603      	mov	r3, r0
 8008602:	4293      	cmp	r3, r2
 8008604:	d100      	bne.n	8008608 <memset+0xa>
 8008606:	4770      	bx	lr
 8008608:	f803 1b01 	strb.w	r1, [r3], #1
 800860c:	e7f9      	b.n	8008602 <memset+0x4>
	...

08008610 <_malloc_r>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	1ccd      	adds	r5, r1, #3
 8008614:	f025 0503 	bic.w	r5, r5, #3
 8008618:	3508      	adds	r5, #8
 800861a:	2d0c      	cmp	r5, #12
 800861c:	bf38      	it	cc
 800861e:	250c      	movcc	r5, #12
 8008620:	2d00      	cmp	r5, #0
 8008622:	4606      	mov	r6, r0
 8008624:	db01      	blt.n	800862a <_malloc_r+0x1a>
 8008626:	42a9      	cmp	r1, r5
 8008628:	d903      	bls.n	8008632 <_malloc_r+0x22>
 800862a:	230c      	movs	r3, #12
 800862c:	6033      	str	r3, [r6, #0]
 800862e:	2000      	movs	r0, #0
 8008630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008632:	f000 faed 	bl	8008c10 <__malloc_lock>
 8008636:	4921      	ldr	r1, [pc, #132]	; (80086bc <_malloc_r+0xac>)
 8008638:	680a      	ldr	r2, [r1, #0]
 800863a:	4614      	mov	r4, r2
 800863c:	b99c      	cbnz	r4, 8008666 <_malloc_r+0x56>
 800863e:	4f20      	ldr	r7, [pc, #128]	; (80086c0 <_malloc_r+0xb0>)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	b923      	cbnz	r3, 800864e <_malloc_r+0x3e>
 8008644:	4621      	mov	r1, r4
 8008646:	4630      	mov	r0, r6
 8008648:	f000 f8a6 	bl	8008798 <_sbrk_r>
 800864c:	6038      	str	r0, [r7, #0]
 800864e:	4629      	mov	r1, r5
 8008650:	4630      	mov	r0, r6
 8008652:	f000 f8a1 	bl	8008798 <_sbrk_r>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	d123      	bne.n	80086a2 <_malloc_r+0x92>
 800865a:	230c      	movs	r3, #12
 800865c:	6033      	str	r3, [r6, #0]
 800865e:	4630      	mov	r0, r6
 8008660:	f000 fadc 	bl	8008c1c <__malloc_unlock>
 8008664:	e7e3      	b.n	800862e <_malloc_r+0x1e>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	1b5b      	subs	r3, r3, r5
 800866a:	d417      	bmi.n	800869c <_malloc_r+0x8c>
 800866c:	2b0b      	cmp	r3, #11
 800866e:	d903      	bls.n	8008678 <_malloc_r+0x68>
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	441c      	add	r4, r3
 8008674:	6025      	str	r5, [r4, #0]
 8008676:	e004      	b.n	8008682 <_malloc_r+0x72>
 8008678:	6863      	ldr	r3, [r4, #4]
 800867a:	42a2      	cmp	r2, r4
 800867c:	bf0c      	ite	eq
 800867e:	600b      	streq	r3, [r1, #0]
 8008680:	6053      	strne	r3, [r2, #4]
 8008682:	4630      	mov	r0, r6
 8008684:	f000 faca 	bl	8008c1c <__malloc_unlock>
 8008688:	f104 000b 	add.w	r0, r4, #11
 800868c:	1d23      	adds	r3, r4, #4
 800868e:	f020 0007 	bic.w	r0, r0, #7
 8008692:	1ac2      	subs	r2, r0, r3
 8008694:	d0cc      	beq.n	8008630 <_malloc_r+0x20>
 8008696:	1a1b      	subs	r3, r3, r0
 8008698:	50a3      	str	r3, [r4, r2]
 800869a:	e7c9      	b.n	8008630 <_malloc_r+0x20>
 800869c:	4622      	mov	r2, r4
 800869e:	6864      	ldr	r4, [r4, #4]
 80086a0:	e7cc      	b.n	800863c <_malloc_r+0x2c>
 80086a2:	1cc4      	adds	r4, r0, #3
 80086a4:	f024 0403 	bic.w	r4, r4, #3
 80086a8:	42a0      	cmp	r0, r4
 80086aa:	d0e3      	beq.n	8008674 <_malloc_r+0x64>
 80086ac:	1a21      	subs	r1, r4, r0
 80086ae:	4630      	mov	r0, r6
 80086b0:	f000 f872 	bl	8008798 <_sbrk_r>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d1dd      	bne.n	8008674 <_malloc_r+0x64>
 80086b8:	e7cf      	b.n	800865a <_malloc_r+0x4a>
 80086ba:	bf00      	nop
 80086bc:	24004a68 	.word	0x24004a68
 80086c0:	24004a6c 	.word	0x24004a6c

080086c4 <cleanup_glue>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	460c      	mov	r4, r1
 80086c8:	6809      	ldr	r1, [r1, #0]
 80086ca:	4605      	mov	r5, r0
 80086cc:	b109      	cbz	r1, 80086d2 <cleanup_glue+0xe>
 80086ce:	f7ff fff9 	bl	80086c4 <cleanup_glue>
 80086d2:	4621      	mov	r1, r4
 80086d4:	4628      	mov	r0, r5
 80086d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086da:	f000 baa5 	b.w	8008c28 <_free_r>
	...

080086e0 <_reclaim_reent>:
 80086e0:	4b2c      	ldr	r3, [pc, #176]	; (8008794 <_reclaim_reent+0xb4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4283      	cmp	r3, r0
 80086e6:	b570      	push	{r4, r5, r6, lr}
 80086e8:	4604      	mov	r4, r0
 80086ea:	d051      	beq.n	8008790 <_reclaim_reent+0xb0>
 80086ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80086ee:	b143      	cbz	r3, 8008702 <_reclaim_reent+0x22>
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d14a      	bne.n	800878c <_reclaim_reent+0xac>
 80086f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f8:	6819      	ldr	r1, [r3, #0]
 80086fa:	b111      	cbz	r1, 8008702 <_reclaim_reent+0x22>
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 fa93 	bl	8008c28 <_free_r>
 8008702:	6961      	ldr	r1, [r4, #20]
 8008704:	b111      	cbz	r1, 800870c <_reclaim_reent+0x2c>
 8008706:	4620      	mov	r0, r4
 8008708:	f000 fa8e 	bl	8008c28 <_free_r>
 800870c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800870e:	b111      	cbz	r1, 8008716 <_reclaim_reent+0x36>
 8008710:	4620      	mov	r0, r4
 8008712:	f000 fa89 	bl	8008c28 <_free_r>
 8008716:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008718:	b111      	cbz	r1, 8008720 <_reclaim_reent+0x40>
 800871a:	4620      	mov	r0, r4
 800871c:	f000 fa84 	bl	8008c28 <_free_r>
 8008720:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008722:	b111      	cbz	r1, 800872a <_reclaim_reent+0x4a>
 8008724:	4620      	mov	r0, r4
 8008726:	f000 fa7f 	bl	8008c28 <_free_r>
 800872a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800872c:	b111      	cbz	r1, 8008734 <_reclaim_reent+0x54>
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fa7a 	bl	8008c28 <_free_r>
 8008734:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008736:	b111      	cbz	r1, 800873e <_reclaim_reent+0x5e>
 8008738:	4620      	mov	r0, r4
 800873a:	f000 fa75 	bl	8008c28 <_free_r>
 800873e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008740:	b111      	cbz	r1, 8008748 <_reclaim_reent+0x68>
 8008742:	4620      	mov	r0, r4
 8008744:	f000 fa70 	bl	8008c28 <_free_r>
 8008748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800874a:	b111      	cbz	r1, 8008752 <_reclaim_reent+0x72>
 800874c:	4620      	mov	r0, r4
 800874e:	f000 fa6b 	bl	8008c28 <_free_r>
 8008752:	69a3      	ldr	r3, [r4, #24]
 8008754:	b1e3      	cbz	r3, 8008790 <_reclaim_reent+0xb0>
 8008756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008758:	4620      	mov	r0, r4
 800875a:	4798      	blx	r3
 800875c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800875e:	b1b9      	cbz	r1, 8008790 <_reclaim_reent+0xb0>
 8008760:	4620      	mov	r0, r4
 8008762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008766:	f7ff bfad 	b.w	80086c4 <cleanup_glue>
 800876a:	5949      	ldr	r1, [r1, r5]
 800876c:	b941      	cbnz	r1, 8008780 <_reclaim_reent+0xa0>
 800876e:	3504      	adds	r5, #4
 8008770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008772:	2d80      	cmp	r5, #128	; 0x80
 8008774:	68d9      	ldr	r1, [r3, #12]
 8008776:	d1f8      	bne.n	800876a <_reclaim_reent+0x8a>
 8008778:	4620      	mov	r0, r4
 800877a:	f000 fa55 	bl	8008c28 <_free_r>
 800877e:	e7ba      	b.n	80086f6 <_reclaim_reent+0x16>
 8008780:	680e      	ldr	r6, [r1, #0]
 8008782:	4620      	mov	r0, r4
 8008784:	f000 fa50 	bl	8008c28 <_free_r>
 8008788:	4631      	mov	r1, r6
 800878a:	e7ef      	b.n	800876c <_reclaim_reent+0x8c>
 800878c:	2500      	movs	r5, #0
 800878e:	e7ef      	b.n	8008770 <_reclaim_reent+0x90>
 8008790:	bd70      	pop	{r4, r5, r6, pc}
 8008792:	bf00      	nop
 8008794:	24000014 	.word	0x24000014

08008798 <_sbrk_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	; (80087b4 <_sbrk_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7f8 fa9e 	bl	8000ce4 <_sbrk>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_sbrk_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_sbrk_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	24004c0c 	.word	0x24004c0c

080087b8 <setvbuf>:
 80087b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087bc:	461d      	mov	r5, r3
 80087be:	4b5d      	ldr	r3, [pc, #372]	; (8008934 <setvbuf+0x17c>)
 80087c0:	681f      	ldr	r7, [r3, #0]
 80087c2:	4604      	mov	r4, r0
 80087c4:	460e      	mov	r6, r1
 80087c6:	4690      	mov	r8, r2
 80087c8:	b127      	cbz	r7, 80087d4 <setvbuf+0x1c>
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	b913      	cbnz	r3, 80087d4 <setvbuf+0x1c>
 80087ce:	4638      	mov	r0, r7
 80087d0:	f7ff fe42 	bl	8008458 <__sinit>
 80087d4:	4b58      	ldr	r3, [pc, #352]	; (8008938 <setvbuf+0x180>)
 80087d6:	429c      	cmp	r4, r3
 80087d8:	d167      	bne.n	80088aa <setvbuf+0xf2>
 80087da:	687c      	ldr	r4, [r7, #4]
 80087dc:	f1b8 0f02 	cmp.w	r8, #2
 80087e0:	d006      	beq.n	80087f0 <setvbuf+0x38>
 80087e2:	f1b8 0f01 	cmp.w	r8, #1
 80087e6:	f200 809f 	bhi.w	8008928 <setvbuf+0x170>
 80087ea:	2d00      	cmp	r5, #0
 80087ec:	f2c0 809c 	blt.w	8008928 <setvbuf+0x170>
 80087f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087f2:	07db      	lsls	r3, r3, #31
 80087f4:	d405      	bmi.n	8008802 <setvbuf+0x4a>
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	0598      	lsls	r0, r3, #22
 80087fa:	d402      	bmi.n	8008802 <setvbuf+0x4a>
 80087fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087fe:	f7ff feee 	bl	80085de <__retarget_lock_acquire_recursive>
 8008802:	4621      	mov	r1, r4
 8008804:	4638      	mov	r0, r7
 8008806:	f000 f989 	bl	8008b1c <_fflush_r>
 800880a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800880c:	b141      	cbz	r1, 8008820 <setvbuf+0x68>
 800880e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008812:	4299      	cmp	r1, r3
 8008814:	d002      	beq.n	800881c <setvbuf+0x64>
 8008816:	4638      	mov	r0, r7
 8008818:	f000 fa06 	bl	8008c28 <_free_r>
 800881c:	2300      	movs	r3, #0
 800881e:	6363      	str	r3, [r4, #52]	; 0x34
 8008820:	2300      	movs	r3, #0
 8008822:	61a3      	str	r3, [r4, #24]
 8008824:	6063      	str	r3, [r4, #4]
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	0619      	lsls	r1, r3, #24
 800882a:	d503      	bpl.n	8008834 <setvbuf+0x7c>
 800882c:	6921      	ldr	r1, [r4, #16]
 800882e:	4638      	mov	r0, r7
 8008830:	f000 f9fa 	bl	8008c28 <_free_r>
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800883a:	f023 0303 	bic.w	r3, r3, #3
 800883e:	f1b8 0f02 	cmp.w	r8, #2
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	d06c      	beq.n	8008920 <setvbuf+0x168>
 8008846:	ab01      	add	r3, sp, #4
 8008848:	466a      	mov	r2, sp
 800884a:	4621      	mov	r1, r4
 800884c:	4638      	mov	r0, r7
 800884e:	f000 f9b3 	bl	8008bb8 <__swhatbuf_r>
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	4318      	orrs	r0, r3
 8008856:	81a0      	strh	r0, [r4, #12]
 8008858:	2d00      	cmp	r5, #0
 800885a:	d130      	bne.n	80088be <setvbuf+0x106>
 800885c:	9d00      	ldr	r5, [sp, #0]
 800885e:	4628      	mov	r0, r5
 8008860:	f000 f9ce 	bl	8008c00 <malloc>
 8008864:	4606      	mov	r6, r0
 8008866:	2800      	cmp	r0, #0
 8008868:	d155      	bne.n	8008916 <setvbuf+0x15e>
 800886a:	f8dd 9000 	ldr.w	r9, [sp]
 800886e:	45a9      	cmp	r9, r5
 8008870:	d14a      	bne.n	8008908 <setvbuf+0x150>
 8008872:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008876:	2200      	movs	r2, #0
 8008878:	60a2      	str	r2, [r4, #8]
 800887a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800887e:	6022      	str	r2, [r4, #0]
 8008880:	6122      	str	r2, [r4, #16]
 8008882:	2201      	movs	r2, #1
 8008884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008888:	6162      	str	r2, [r4, #20]
 800888a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800888c:	f043 0302 	orr.w	r3, r3, #2
 8008890:	07d2      	lsls	r2, r2, #31
 8008892:	81a3      	strh	r3, [r4, #12]
 8008894:	d405      	bmi.n	80088a2 <setvbuf+0xea>
 8008896:	f413 7f00 	tst.w	r3, #512	; 0x200
 800889a:	d102      	bne.n	80088a2 <setvbuf+0xea>
 800889c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800889e:	f7ff fe9f 	bl	80085e0 <__retarget_lock_release_recursive>
 80088a2:	4628      	mov	r0, r5
 80088a4:	b003      	add	sp, #12
 80088a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088aa:	4b24      	ldr	r3, [pc, #144]	; (800893c <setvbuf+0x184>)
 80088ac:	429c      	cmp	r4, r3
 80088ae:	d101      	bne.n	80088b4 <setvbuf+0xfc>
 80088b0:	68bc      	ldr	r4, [r7, #8]
 80088b2:	e793      	b.n	80087dc <setvbuf+0x24>
 80088b4:	4b22      	ldr	r3, [pc, #136]	; (8008940 <setvbuf+0x188>)
 80088b6:	429c      	cmp	r4, r3
 80088b8:	bf08      	it	eq
 80088ba:	68fc      	ldreq	r4, [r7, #12]
 80088bc:	e78e      	b.n	80087dc <setvbuf+0x24>
 80088be:	2e00      	cmp	r6, #0
 80088c0:	d0cd      	beq.n	800885e <setvbuf+0xa6>
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	b913      	cbnz	r3, 80088cc <setvbuf+0x114>
 80088c6:	4638      	mov	r0, r7
 80088c8:	f7ff fdc6 	bl	8008458 <__sinit>
 80088cc:	f1b8 0f01 	cmp.w	r8, #1
 80088d0:	bf08      	it	eq
 80088d2:	89a3      	ldrheq	r3, [r4, #12]
 80088d4:	6026      	str	r6, [r4, #0]
 80088d6:	bf04      	itt	eq
 80088d8:	f043 0301 	orreq.w	r3, r3, #1
 80088dc:	81a3      	strheq	r3, [r4, #12]
 80088de:	89a2      	ldrh	r2, [r4, #12]
 80088e0:	f012 0308 	ands.w	r3, r2, #8
 80088e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80088e8:	d01c      	beq.n	8008924 <setvbuf+0x16c>
 80088ea:	07d3      	lsls	r3, r2, #31
 80088ec:	bf41      	itttt	mi
 80088ee:	2300      	movmi	r3, #0
 80088f0:	426d      	negmi	r5, r5
 80088f2:	60a3      	strmi	r3, [r4, #8]
 80088f4:	61a5      	strmi	r5, [r4, #24]
 80088f6:	bf58      	it	pl
 80088f8:	60a5      	strpl	r5, [r4, #8]
 80088fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80088fc:	f015 0501 	ands.w	r5, r5, #1
 8008900:	d115      	bne.n	800892e <setvbuf+0x176>
 8008902:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008906:	e7c8      	b.n	800889a <setvbuf+0xe2>
 8008908:	4648      	mov	r0, r9
 800890a:	f000 f979 	bl	8008c00 <malloc>
 800890e:	4606      	mov	r6, r0
 8008910:	2800      	cmp	r0, #0
 8008912:	d0ae      	beq.n	8008872 <setvbuf+0xba>
 8008914:	464d      	mov	r5, r9
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800891c:	81a3      	strh	r3, [r4, #12]
 800891e:	e7d0      	b.n	80088c2 <setvbuf+0x10a>
 8008920:	2500      	movs	r5, #0
 8008922:	e7a8      	b.n	8008876 <setvbuf+0xbe>
 8008924:	60a3      	str	r3, [r4, #8]
 8008926:	e7e8      	b.n	80088fa <setvbuf+0x142>
 8008928:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800892c:	e7b9      	b.n	80088a2 <setvbuf+0xea>
 800892e:	2500      	movs	r5, #0
 8008930:	e7b7      	b.n	80088a2 <setvbuf+0xea>
 8008932:	bf00      	nop
 8008934:	24000014 	.word	0x24000014
 8008938:	08008df4 	.word	0x08008df4
 800893c:	08008e14 	.word	0x08008e14
 8008940:	08008dd4 	.word	0x08008dd4

08008944 <__sread>:
 8008944:	b510      	push	{r4, lr}
 8008946:	460c      	mov	r4, r1
 8008948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894c:	f000 f9bc 	bl	8008cc8 <_read_r>
 8008950:	2800      	cmp	r0, #0
 8008952:	bfab      	itete	ge
 8008954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008956:	89a3      	ldrhlt	r3, [r4, #12]
 8008958:	181b      	addge	r3, r3, r0
 800895a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800895e:	bfac      	ite	ge
 8008960:	6563      	strge	r3, [r4, #84]	; 0x54
 8008962:	81a3      	strhlt	r3, [r4, #12]
 8008964:	bd10      	pop	{r4, pc}

08008966 <__swrite>:
 8008966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896a:	461f      	mov	r7, r3
 800896c:	898b      	ldrh	r3, [r1, #12]
 800896e:	05db      	lsls	r3, r3, #23
 8008970:	4605      	mov	r5, r0
 8008972:	460c      	mov	r4, r1
 8008974:	4616      	mov	r6, r2
 8008976:	d505      	bpl.n	8008984 <__swrite+0x1e>
 8008978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800897c:	2302      	movs	r3, #2
 800897e:	2200      	movs	r2, #0
 8008980:	f000 f908 	bl	8008b94 <_lseek_r>
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800898a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800898e:	81a3      	strh	r3, [r4, #12]
 8008990:	4632      	mov	r2, r6
 8008992:	463b      	mov	r3, r7
 8008994:	4628      	mov	r0, r5
 8008996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	f000 b817 	b.w	80089cc <_write_r>

0800899e <__sseek>:
 800899e:	b510      	push	{r4, lr}
 80089a0:	460c      	mov	r4, r1
 80089a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a6:	f000 f8f5 	bl	8008b94 <_lseek_r>
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	bf15      	itete	ne
 80089b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80089b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089ba:	81a3      	strheq	r3, [r4, #12]
 80089bc:	bf18      	it	ne
 80089be:	81a3      	strhne	r3, [r4, #12]
 80089c0:	bd10      	pop	{r4, pc}

080089c2 <__sclose>:
 80089c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c6:	f000 b813 	b.w	80089f0 <_close_r>
	...

080089cc <_write_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4d07      	ldr	r5, [pc, #28]	; (80089ec <_write_r+0x20>)
 80089d0:	4604      	mov	r4, r0
 80089d2:	4608      	mov	r0, r1
 80089d4:	4611      	mov	r1, r2
 80089d6:	2200      	movs	r2, #0
 80089d8:	602a      	str	r2, [r5, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	f7f8 f840 	bl	8000a60 <_write>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_write_r+0x1e>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_write_r+0x1e>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	24004c0c 	.word	0x24004c0c

080089f0 <_close_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4d06      	ldr	r5, [pc, #24]	; (8008a0c <_close_r+0x1c>)
 80089f4:	2300      	movs	r3, #0
 80089f6:	4604      	mov	r4, r0
 80089f8:	4608      	mov	r0, r1
 80089fa:	602b      	str	r3, [r5, #0]
 80089fc:	f7f8 f85c 	bl	8000ab8 <_close>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d102      	bne.n	8008a0a <_close_r+0x1a>
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	b103      	cbz	r3, 8008a0a <_close_r+0x1a>
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	24004c0c 	.word	0x24004c0c

08008a10 <__sflush_r>:
 8008a10:	898a      	ldrh	r2, [r1, #12]
 8008a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	4605      	mov	r5, r0
 8008a18:	0710      	lsls	r0, r2, #28
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	d458      	bmi.n	8008ad0 <__sflush_r+0xc0>
 8008a1e:	684b      	ldr	r3, [r1, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dc05      	bgt.n	8008a30 <__sflush_r+0x20>
 8008a24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	dc02      	bgt.n	8008a30 <__sflush_r+0x20>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a32:	2e00      	cmp	r6, #0
 8008a34:	d0f9      	beq.n	8008a2a <__sflush_r+0x1a>
 8008a36:	2300      	movs	r3, #0
 8008a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a3c:	682f      	ldr	r7, [r5, #0]
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	d032      	beq.n	8008aa8 <__sflush_r+0x98>
 8008a42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	075a      	lsls	r2, r3, #29
 8008a48:	d505      	bpl.n	8008a56 <__sflush_r+0x46>
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	1ac0      	subs	r0, r0, r3
 8008a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a50:	b10b      	cbz	r3, 8008a56 <__sflush_r+0x46>
 8008a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a54:	1ac0      	subs	r0, r0, r3
 8008a56:	2300      	movs	r3, #0
 8008a58:	4602      	mov	r2, r0
 8008a5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a5c:	6a21      	ldr	r1, [r4, #32]
 8008a5e:	4628      	mov	r0, r5
 8008a60:	47b0      	blx	r6
 8008a62:	1c43      	adds	r3, r0, #1
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	d106      	bne.n	8008a76 <__sflush_r+0x66>
 8008a68:	6829      	ldr	r1, [r5, #0]
 8008a6a:	291d      	cmp	r1, #29
 8008a6c:	d82c      	bhi.n	8008ac8 <__sflush_r+0xb8>
 8008a6e:	4a2a      	ldr	r2, [pc, #168]	; (8008b18 <__sflush_r+0x108>)
 8008a70:	40ca      	lsrs	r2, r1
 8008a72:	07d6      	lsls	r6, r2, #31
 8008a74:	d528      	bpl.n	8008ac8 <__sflush_r+0xb8>
 8008a76:	2200      	movs	r2, #0
 8008a78:	6062      	str	r2, [r4, #4]
 8008a7a:	04d9      	lsls	r1, r3, #19
 8008a7c:	6922      	ldr	r2, [r4, #16]
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	d504      	bpl.n	8008a8c <__sflush_r+0x7c>
 8008a82:	1c42      	adds	r2, r0, #1
 8008a84:	d101      	bne.n	8008a8a <__sflush_r+0x7a>
 8008a86:	682b      	ldr	r3, [r5, #0]
 8008a88:	b903      	cbnz	r3, 8008a8c <__sflush_r+0x7c>
 8008a8a:	6560      	str	r0, [r4, #84]	; 0x54
 8008a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a8e:	602f      	str	r7, [r5, #0]
 8008a90:	2900      	cmp	r1, #0
 8008a92:	d0ca      	beq.n	8008a2a <__sflush_r+0x1a>
 8008a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a98:	4299      	cmp	r1, r3
 8008a9a:	d002      	beq.n	8008aa2 <__sflush_r+0x92>
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f000 f8c3 	bl	8008c28 <_free_r>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8008aa6:	e7c1      	b.n	8008a2c <__sflush_r+0x1c>
 8008aa8:	6a21      	ldr	r1, [r4, #32]
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b0      	blx	r6
 8008ab0:	1c41      	adds	r1, r0, #1
 8008ab2:	d1c7      	bne.n	8008a44 <__sflush_r+0x34>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0c4      	beq.n	8008a44 <__sflush_r+0x34>
 8008aba:	2b1d      	cmp	r3, #29
 8008abc:	d001      	beq.n	8008ac2 <__sflush_r+0xb2>
 8008abe:	2b16      	cmp	r3, #22
 8008ac0:	d101      	bne.n	8008ac6 <__sflush_r+0xb6>
 8008ac2:	602f      	str	r7, [r5, #0]
 8008ac4:	e7b1      	b.n	8008a2a <__sflush_r+0x1a>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008acc:	81a3      	strh	r3, [r4, #12]
 8008ace:	e7ad      	b.n	8008a2c <__sflush_r+0x1c>
 8008ad0:	690f      	ldr	r7, [r1, #16]
 8008ad2:	2f00      	cmp	r7, #0
 8008ad4:	d0a9      	beq.n	8008a2a <__sflush_r+0x1a>
 8008ad6:	0793      	lsls	r3, r2, #30
 8008ad8:	680e      	ldr	r6, [r1, #0]
 8008ada:	bf08      	it	eq
 8008adc:	694b      	ldreq	r3, [r1, #20]
 8008ade:	600f      	str	r7, [r1, #0]
 8008ae0:	bf18      	it	ne
 8008ae2:	2300      	movne	r3, #0
 8008ae4:	eba6 0807 	sub.w	r8, r6, r7
 8008ae8:	608b      	str	r3, [r1, #8]
 8008aea:	f1b8 0f00 	cmp.w	r8, #0
 8008aee:	dd9c      	ble.n	8008a2a <__sflush_r+0x1a>
 8008af0:	6a21      	ldr	r1, [r4, #32]
 8008af2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008af4:	4643      	mov	r3, r8
 8008af6:	463a      	mov	r2, r7
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b0      	blx	r6
 8008afc:	2800      	cmp	r0, #0
 8008afe:	dc06      	bgt.n	8008b0e <__sflush_r+0xfe>
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b0c:	e78e      	b.n	8008a2c <__sflush_r+0x1c>
 8008b0e:	4407      	add	r7, r0
 8008b10:	eba8 0800 	sub.w	r8, r8, r0
 8008b14:	e7e9      	b.n	8008aea <__sflush_r+0xda>
 8008b16:	bf00      	nop
 8008b18:	20400001 	.word	0x20400001

08008b1c <_fflush_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	690b      	ldr	r3, [r1, #16]
 8008b20:	4605      	mov	r5, r0
 8008b22:	460c      	mov	r4, r1
 8008b24:	b913      	cbnz	r3, 8008b2c <_fflush_r+0x10>
 8008b26:	2500      	movs	r5, #0
 8008b28:	4628      	mov	r0, r5
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	b118      	cbz	r0, 8008b36 <_fflush_r+0x1a>
 8008b2e:	6983      	ldr	r3, [r0, #24]
 8008b30:	b90b      	cbnz	r3, 8008b36 <_fflush_r+0x1a>
 8008b32:	f7ff fc91 	bl	8008458 <__sinit>
 8008b36:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <_fflush_r+0x6c>)
 8008b38:	429c      	cmp	r4, r3
 8008b3a:	d11b      	bne.n	8008b74 <_fflush_r+0x58>
 8008b3c:	686c      	ldr	r4, [r5, #4]
 8008b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0ef      	beq.n	8008b26 <_fflush_r+0xa>
 8008b46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b48:	07d0      	lsls	r0, r2, #31
 8008b4a:	d404      	bmi.n	8008b56 <_fflush_r+0x3a>
 8008b4c:	0599      	lsls	r1, r3, #22
 8008b4e:	d402      	bmi.n	8008b56 <_fflush_r+0x3a>
 8008b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b52:	f7ff fd44 	bl	80085de <__retarget_lock_acquire_recursive>
 8008b56:	4628      	mov	r0, r5
 8008b58:	4621      	mov	r1, r4
 8008b5a:	f7ff ff59 	bl	8008a10 <__sflush_r>
 8008b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b60:	07da      	lsls	r2, r3, #31
 8008b62:	4605      	mov	r5, r0
 8008b64:	d4e0      	bmi.n	8008b28 <_fflush_r+0xc>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	059b      	lsls	r3, r3, #22
 8008b6a:	d4dd      	bmi.n	8008b28 <_fflush_r+0xc>
 8008b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b6e:	f7ff fd37 	bl	80085e0 <__retarget_lock_release_recursive>
 8008b72:	e7d9      	b.n	8008b28 <_fflush_r+0xc>
 8008b74:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <_fflush_r+0x70>)
 8008b76:	429c      	cmp	r4, r3
 8008b78:	d101      	bne.n	8008b7e <_fflush_r+0x62>
 8008b7a:	68ac      	ldr	r4, [r5, #8]
 8008b7c:	e7df      	b.n	8008b3e <_fflush_r+0x22>
 8008b7e:	4b04      	ldr	r3, [pc, #16]	; (8008b90 <_fflush_r+0x74>)
 8008b80:	429c      	cmp	r4, r3
 8008b82:	bf08      	it	eq
 8008b84:	68ec      	ldreq	r4, [r5, #12]
 8008b86:	e7da      	b.n	8008b3e <_fflush_r+0x22>
 8008b88:	08008df4 	.word	0x08008df4
 8008b8c:	08008e14 	.word	0x08008e14
 8008b90:	08008dd4 	.word	0x08008dd4

08008b94 <_lseek_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4d07      	ldr	r5, [pc, #28]	; (8008bb4 <_lseek_r+0x20>)
 8008b98:	4604      	mov	r4, r0
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	602a      	str	r2, [r5, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	f7f7 ff9f 	bl	8000ae6 <_lseek>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d102      	bne.n	8008bb2 <_lseek_r+0x1e>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b103      	cbz	r3, 8008bb2 <_lseek_r+0x1e>
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	24004c0c 	.word	0x24004c0c

08008bb8 <__swhatbuf_r>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	460e      	mov	r6, r1
 8008bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc0:	2900      	cmp	r1, #0
 8008bc2:	b096      	sub	sp, #88	; 0x58
 8008bc4:	4614      	mov	r4, r2
 8008bc6:	461d      	mov	r5, r3
 8008bc8:	da07      	bge.n	8008bda <__swhatbuf_r+0x22>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	89b3      	ldrh	r3, [r6, #12]
 8008bd0:	061a      	lsls	r2, r3, #24
 8008bd2:	d410      	bmi.n	8008bf6 <__swhatbuf_r+0x3e>
 8008bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bd8:	e00e      	b.n	8008bf8 <__swhatbuf_r+0x40>
 8008bda:	466a      	mov	r2, sp
 8008bdc:	f000 f886 	bl	8008cec <_fstat_r>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	dbf2      	blt.n	8008bca <__swhatbuf_r+0x12>
 8008be4:	9a01      	ldr	r2, [sp, #4]
 8008be6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bee:	425a      	negs	r2, r3
 8008bf0:	415a      	adcs	r2, r3
 8008bf2:	602a      	str	r2, [r5, #0]
 8008bf4:	e7ee      	b.n	8008bd4 <__swhatbuf_r+0x1c>
 8008bf6:	2340      	movs	r3, #64	; 0x40
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	b016      	add	sp, #88	; 0x58
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}

08008c00 <malloc>:
 8008c00:	4b02      	ldr	r3, [pc, #8]	; (8008c0c <malloc+0xc>)
 8008c02:	4601      	mov	r1, r0
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	f7ff bd03 	b.w	8008610 <_malloc_r>
 8008c0a:	bf00      	nop
 8008c0c:	24000014 	.word	0x24000014

08008c10 <__malloc_lock>:
 8008c10:	4801      	ldr	r0, [pc, #4]	; (8008c18 <__malloc_lock+0x8>)
 8008c12:	f7ff bce4 	b.w	80085de <__retarget_lock_acquire_recursive>
 8008c16:	bf00      	nop
 8008c18:	24004c04 	.word	0x24004c04

08008c1c <__malloc_unlock>:
 8008c1c:	4801      	ldr	r0, [pc, #4]	; (8008c24 <__malloc_unlock+0x8>)
 8008c1e:	f7ff bcdf 	b.w	80085e0 <__retarget_lock_release_recursive>
 8008c22:	bf00      	nop
 8008c24:	24004c04 	.word	0x24004c04

08008c28 <_free_r>:
 8008c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c2a:	2900      	cmp	r1, #0
 8008c2c:	d048      	beq.n	8008cc0 <_free_r+0x98>
 8008c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c32:	9001      	str	r0, [sp, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f1a1 0404 	sub.w	r4, r1, #4
 8008c3a:	bfb8      	it	lt
 8008c3c:	18e4      	addlt	r4, r4, r3
 8008c3e:	f7ff ffe7 	bl	8008c10 <__malloc_lock>
 8008c42:	4a20      	ldr	r2, [pc, #128]	; (8008cc4 <_free_r+0x9c>)
 8008c44:	9801      	ldr	r0, [sp, #4]
 8008c46:	6813      	ldr	r3, [r2, #0]
 8008c48:	4615      	mov	r5, r2
 8008c4a:	b933      	cbnz	r3, 8008c5a <_free_r+0x32>
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	6014      	str	r4, [r2, #0]
 8008c50:	b003      	add	sp, #12
 8008c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c56:	f7ff bfe1 	b.w	8008c1c <__malloc_unlock>
 8008c5a:	42a3      	cmp	r3, r4
 8008c5c:	d90b      	bls.n	8008c76 <_free_r+0x4e>
 8008c5e:	6821      	ldr	r1, [r4, #0]
 8008c60:	1862      	adds	r2, r4, r1
 8008c62:	4293      	cmp	r3, r2
 8008c64:	bf04      	itt	eq
 8008c66:	681a      	ldreq	r2, [r3, #0]
 8008c68:	685b      	ldreq	r3, [r3, #4]
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	bf04      	itt	eq
 8008c6e:	1852      	addeq	r2, r2, r1
 8008c70:	6022      	streq	r2, [r4, #0]
 8008c72:	602c      	str	r4, [r5, #0]
 8008c74:	e7ec      	b.n	8008c50 <_free_r+0x28>
 8008c76:	461a      	mov	r2, r3
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	b10b      	cbz	r3, 8008c80 <_free_r+0x58>
 8008c7c:	42a3      	cmp	r3, r4
 8008c7e:	d9fa      	bls.n	8008c76 <_free_r+0x4e>
 8008c80:	6811      	ldr	r1, [r2, #0]
 8008c82:	1855      	adds	r5, r2, r1
 8008c84:	42a5      	cmp	r5, r4
 8008c86:	d10b      	bne.n	8008ca0 <_free_r+0x78>
 8008c88:	6824      	ldr	r4, [r4, #0]
 8008c8a:	4421      	add	r1, r4
 8008c8c:	1854      	adds	r4, r2, r1
 8008c8e:	42a3      	cmp	r3, r4
 8008c90:	6011      	str	r1, [r2, #0]
 8008c92:	d1dd      	bne.n	8008c50 <_free_r+0x28>
 8008c94:	681c      	ldr	r4, [r3, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	6053      	str	r3, [r2, #4]
 8008c9a:	4421      	add	r1, r4
 8008c9c:	6011      	str	r1, [r2, #0]
 8008c9e:	e7d7      	b.n	8008c50 <_free_r+0x28>
 8008ca0:	d902      	bls.n	8008ca8 <_free_r+0x80>
 8008ca2:	230c      	movs	r3, #12
 8008ca4:	6003      	str	r3, [r0, #0]
 8008ca6:	e7d3      	b.n	8008c50 <_free_r+0x28>
 8008ca8:	6825      	ldr	r5, [r4, #0]
 8008caa:	1961      	adds	r1, r4, r5
 8008cac:	428b      	cmp	r3, r1
 8008cae:	bf04      	itt	eq
 8008cb0:	6819      	ldreq	r1, [r3, #0]
 8008cb2:	685b      	ldreq	r3, [r3, #4]
 8008cb4:	6063      	str	r3, [r4, #4]
 8008cb6:	bf04      	itt	eq
 8008cb8:	1949      	addeq	r1, r1, r5
 8008cba:	6021      	streq	r1, [r4, #0]
 8008cbc:	6054      	str	r4, [r2, #4]
 8008cbe:	e7c7      	b.n	8008c50 <_free_r+0x28>
 8008cc0:	b003      	add	sp, #12
 8008cc2:	bd30      	pop	{r4, r5, pc}
 8008cc4:	24004a68 	.word	0x24004a68

08008cc8 <_read_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d07      	ldr	r5, [pc, #28]	; (8008ce8 <_read_r+0x20>)
 8008ccc:	4604      	mov	r4, r0
 8008cce:	4608      	mov	r0, r1
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	602a      	str	r2, [r5, #0]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f7f7 ff16 	bl	8000b08 <_read>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d102      	bne.n	8008ce6 <_read_r+0x1e>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	b103      	cbz	r3, 8008ce6 <_read_r+0x1e>
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	24004c0c 	.word	0x24004c0c

08008cec <_fstat_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d07      	ldr	r5, [pc, #28]	; (8008d0c <_fstat_r+0x20>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	602b      	str	r3, [r5, #0]
 8008cfa:	f7f7 ff2d 	bl	8000b58 <_fstat>
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	d102      	bne.n	8008d08 <_fstat_r+0x1c>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	b103      	cbz	r3, 8008d08 <_fstat_r+0x1c>
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	bd38      	pop	{r3, r4, r5, pc}
 8008d0a:	bf00      	nop
 8008d0c:	24004c0c 	.word	0x24004c0c

08008d10 <_init>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr

08008d1c <_fini>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	bf00      	nop
 8008d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d22:	bc08      	pop	{r3}
 8008d24:	469e      	mov	lr, r3
 8008d26:	4770      	bx	lr
