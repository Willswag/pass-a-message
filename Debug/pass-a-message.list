
pass-a-message.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a68  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08008e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ba0  24000078  08008eb0  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c18  08008eb0  00024c18  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031ddf  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004fd3  00000000  00000000  00051e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018c8  00000000  00000000  00056e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001730  00000000  00000000  00058720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003480a  00000000  00000000  00059e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f6bf  00000000  00000000  0008e65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014bb29  00000000  00000000  000add19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f9842  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006d68  00000000  00000000  001f9898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008d00 	.word	0x08008d00

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	08008d00 	.word	0x08008d00

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Listener */
  ListenerHandle = osThreadNew(StartListener, NULL, &Listener_attributes);
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <MX_FREERTOS_Init+0x28>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <MX_FREERTOS_Init+0x2c>)
 80005f2:	f005 f99d 	bl	8005930 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of Speaker */
  SpeakerHandle = osThreadNew(StartSpeaker, NULL, &Speaker_attributes);
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <MX_FREERTOS_Init+0x34>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <MX_FREERTOS_Init+0x38>)
 8000602:	f005 f995 	bl	8005930 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <MX_FREERTOS_Init+0x3c>)
 800060a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	08008d44 	.word	0x08008d44
 8000614:	08000629 	.word	0x08000629
 8000618:	24004ae0 	.word	0x24004ae0
 800061c:	08008d68 	.word	0x08008d68
 8000620:	080006a9 	.word	0x080006a9
 8000624:	24004ad8 	.word	0x24004ad8

08000628 <StartListener>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartListener */
void StartListener(void *argument)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartListener */
	uint8_t local_pointer = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
  for(;;)
  {
	 HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3,rx_buffer ,1, 100);
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	2201      	movs	r2, #1
 8000638:	4917      	ldr	r1, [pc, #92]	; (8000698 <StartListener+0x70>)
 800063a:	4818      	ldr	r0, [pc, #96]	; (800069c <StartListener+0x74>)
 800063c:	f003 ff00 	bl	8004440 <HAL_UART_Receive>
 8000640:	4603      	mov	r3, r0
 8000642:	73bb      	strb	r3, [r7, #14]
	 if(ret == HAL_OK){
 8000644:	7bbb      	ldrb	r3, [r7, #14]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d121      	bne.n	800068e <StartListener+0x66>
		 local_buffer[local_pointer] = rx_buffer[0];
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <StartListener+0x70>)
 800064e:	7811      	ldrb	r1, [r2, #0]
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <StartListener+0x78>)
 8000652:	54d1      	strb	r1, [r2, r3]
		 if(local_buffer[local_pointer] == '\n' || local_buffer[local_pointer] == '\r'){
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <StartListener+0x78>)
 8000658:	5cd3      	ldrb	r3, [r2, r3]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d004      	beq.n	8000668 <StartListener+0x40>
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <StartListener+0x78>)
 8000662:	5cd3      	ldrb	r3, [r2, r3]
 8000664:	2b0d      	cmp	r3, #13
 8000666:	d10a      	bne.n	800067e <StartListener+0x56>
			 new_message_flag = 1;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <StartListener+0x7c>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
			 memset(local_buffer,0,RX_BUFFER_LENGTH);
 800066e:	2264      	movs	r2, #100	; 0x64
 8000670:	2100      	movs	r1, #0
 8000672:	480b      	ldr	r0, [pc, #44]	; (80006a0 <StartListener+0x78>)
 8000674:	f007 ffbb 	bl	80085ee <memset>
			 local_pointer = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
 800067c:	e007      	b.n	800068e <StartListener+0x66>
		 }else{
			 local_pointer++;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
			 if(local_pointer > RX_BUFFER_LENGTH){
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	2b64      	cmp	r3, #100	; 0x64
 8000688:	d901      	bls.n	800068e <StartListener+0x66>
				 local_pointer = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
			 }
		 }
	 }
    osDelay(100);
 800068e:	2064      	movs	r0, #100	; 0x64
 8000690:	f005 f9e0 	bl	8005a54 <osDelay>
  {
 8000694:	e7ce      	b.n	8000634 <StartListener+0xc>
 8000696:	bf00      	nop
 8000698:	24004adc 	.word	0x24004adc
 800069c:	24004b34 	.word	0x24004b34
 80006a0:	24004a74 	.word	0x24004a74
 80006a4:	24000094 	.word	0x24000094

080006a8 <StartSpeaker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSpeaker */
void StartSpeaker(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSpeaker */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f005 f9cf 	bl	8005a54 <osDelay>
 80006b6:	e7fb      	b.n	80006b0 <StartSpeaker+0x8>

080006b8 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08e      	sub	sp, #56	; 0x38
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b80      	ldr	r3, [pc, #512]	; (80008d0 <MX_GPIO_Init+0x218>)
 80006d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d4:	4a7e      	ldr	r2, [pc, #504]	; (80008d0 <MX_GPIO_Init+0x218>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006de:	4b7c      	ldr	r3, [pc, #496]	; (80008d0 <MX_GPIO_Init+0x218>)
 80006e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	623b      	str	r3, [r7, #32]
 80006ea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ec:	4b78      	ldr	r3, [pc, #480]	; (80008d0 <MX_GPIO_Init+0x218>)
 80006ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006f2:	4a77      	ldr	r2, [pc, #476]	; (80008d0 <MX_GPIO_Init+0x218>)
 80006f4:	f043 0320 	orr.w	r3, r3, #32
 80006f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006fc:	4b74      	ldr	r3, [pc, #464]	; (80008d0 <MX_GPIO_Init+0x218>)
 80006fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000702:	f003 0320 	and.w	r3, r3, #32
 8000706:	61fb      	str	r3, [r7, #28]
 8000708:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	4b71      	ldr	r3, [pc, #452]	; (80008d0 <MX_GPIO_Init+0x218>)
 800070c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000710:	4a6f      	ldr	r2, [pc, #444]	; (80008d0 <MX_GPIO_Init+0x218>)
 8000712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000716:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800071a:	4b6d      	ldr	r3, [pc, #436]	; (80008d0 <MX_GPIO_Init+0x218>)
 800071c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000724:	61bb      	str	r3, [r7, #24]
 8000726:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000728:	4b69      	ldr	r3, [pc, #420]	; (80008d0 <MX_GPIO_Init+0x218>)
 800072a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800072e:	4a68      	ldr	r2, [pc, #416]	; (80008d0 <MX_GPIO_Init+0x218>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000738:	4b65      	ldr	r3, [pc, #404]	; (80008d0 <MX_GPIO_Init+0x218>)
 800073a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	4b62      	ldr	r3, [pc, #392]	; (80008d0 <MX_GPIO_Init+0x218>)
 8000748:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800074c:	4a60      	ldr	r2, [pc, #384]	; (80008d0 <MX_GPIO_Init+0x218>)
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000756:	4b5e      	ldr	r3, [pc, #376]	; (80008d0 <MX_GPIO_Init+0x218>)
 8000758:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800075c:	f003 0308 	and.w	r3, r3, #8
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000764:	4b5a      	ldr	r3, [pc, #360]	; (80008d0 <MX_GPIO_Init+0x218>)
 8000766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800076a:	4a59      	ldr	r2, [pc, #356]	; (80008d0 <MX_GPIO_Init+0x218>)
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000774:	4b56      	ldr	r3, [pc, #344]	; (80008d0 <MX_GPIO_Init+0x218>)
 8000776:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800077a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b53      	ldr	r3, [pc, #332]	; (80008d0 <MX_GPIO_Init+0x218>)
 8000784:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000788:	4a51      	ldr	r2, [pc, #324]	; (80008d0 <MX_GPIO_Init+0x218>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000792:	4b4f      	ldr	r3, [pc, #316]	; (80008d0 <MX_GPIO_Init+0x218>)
 8000794:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a0:	4b4b      	ldr	r3, [pc, #300]	; (80008d0 <MX_GPIO_Init+0x218>)
 80007a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007a6:	4a4a      	ldr	r2, [pc, #296]	; (80008d0 <MX_GPIO_Init+0x218>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007b0:	4b47      	ldr	r3, [pc, #284]	; (80008d0 <MX_GPIO_Init+0x218>)
 80007b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c4:	4843      	ldr	r0, [pc, #268]	; (80008d4 <MX_GPIO_Init+0x21c>)
 80007c6:	f000 ff07 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f244 0101 	movw	r1, #16385	; 0x4001
 80007d0:	4841      	ldr	r0, [pc, #260]	; (80008d8 <MX_GPIO_Init+0x220>)
 80007d2:	f000 ff01 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2102      	movs	r1, #2
 80007da:	4840      	ldr	r0, [pc, #256]	; (80008dc <MX_GPIO_Init+0x224>)
 80007dc:	f000 fefc 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f2:	4619      	mov	r1, r3
 80007f4:	483a      	ldr	r0, [pc, #232]	; (80008e0 <MX_GPIO_Init+0x228>)
 80007f6:	f000 fd3f 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80007fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	4830      	ldr	r0, [pc, #192]	; (80008d4 <MX_GPIO_Init+0x21c>)
 8000814:	f000 fd30 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000818:	f244 0301 	movw	r3, #16385	; 0x4001
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	4619      	mov	r1, r3
 8000830:	4829      	ldr	r0, [pc, #164]	; (80008d8 <MX_GPIO_Init+0x220>)
 8000832:	f000 fd21 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4826      	ldr	r0, [pc, #152]	; (80008e4 <MX_GPIO_Init+0x22c>)
 800084c:	f000 fd14 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4820      	ldr	r0, [pc, #128]	; (80008e8 <MX_GPIO_Init+0x230>)
 8000866:	f000 fd07 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800086a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800087c:	230a      	movs	r3, #10
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4818      	ldr	r0, [pc, #96]	; (80008e8 <MX_GPIO_Init+0x230>)
 8000888:	f000 fcf6 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800088c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	4810      	ldr	r0, [pc, #64]	; (80008e8 <MX_GPIO_Init+0x230>)
 80008a6:	f000 fce7 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008aa:	2302      	movs	r3, #2
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	4619      	mov	r1, r3
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <MX_GPIO_Init+0x224>)
 80008c2:	f000 fcd9 	bl	8001278 <HAL_GPIO_Init>

}
 80008c6:	bf00      	nop
 80008c8:	3738      	adds	r7, #56	; 0x38
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	58024400 	.word	0x58024400
 80008d4:	58021400 	.word	0x58021400
 80008d8:	58020400 	.word	0x58020400
 80008dc:	58021000 	.word	0x58021000
 80008e0:	58020800 	.word	0x58020800
 80008e4:	58021800 	.word	0x58021800
 80008e8:	58020000 	.word	0x58020000

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 fb86 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f812 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f7ff fede 	bl	80006b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008fc:	f000 fa9c 	bl	8000e38 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000900:	f000 fb4c 	bl	8000f9c <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <main+0x2c>)
 8000906:	f000 f88f 	bl	8000a28 <RetargetInit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800090a:	f004 ffc7 	bl	800589c <osKernelInitialize>
  MX_FREERTOS_Init();
 800090e:	f7ff fe6b 	bl	80005e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000912:	f004 ffe7 	bl	80058e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000916:	e7fe      	b.n	8000916 <main+0x2a>
 8000918:	24004b34 	.word	0x24004b34

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09c      	sub	sp, #112	; 0x70
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	224c      	movs	r2, #76	; 0x4c
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f007 fe5f 	bl	80085ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2220      	movs	r2, #32
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f007 fe59 	bl	80085ee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800093c:	2004      	movs	r0, #4
 800093e:	f000 fe65 	bl	800160c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <SystemClock_Config+0xd8>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a2a      	ldr	r2, [pc, #168]	; (80009f4 <SystemClock_Config+0xd8>)
 800094c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <SystemClock_Config+0xd8>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800095e:	bf00      	nop
 8000960:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <SystemClock_Config+0xd8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800096c:	d1f8      	bne.n	8000960 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800096e:	2321      	movs	r3, #33	; 0x21
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000972:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000980:	2302      	movs	r3, #2
 8000982:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000984:	2301      	movs	r3, #1
 8000986:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000988:	2318      	movs	r3, #24
 800098a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000990:	2304      	movs	r3, #4
 8000992:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000994:	2302      	movs	r3, #2
 8000996:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000998:	230c      	movs	r3, #12
 800099a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800099c:	2300      	movs	r3, #0
 800099e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fe89 	bl	80016c0 <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009b4:	f000 f832 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	233f      	movs	r3, #63	; 0x3f
 80009ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	2303      	movs	r3, #3
 80009be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2102      	movs	r1, #2
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fa73 	bl	8001ec8 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009e8:	f000 f818 	bl	8000a1c <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3770      	adds	r7, #112	; 0x70
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	58024800 	.word	0x58024800

080009f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0a:	f000 fb35 	bl	8001078 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40001400 	.word	0x40001400

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <RetargetInit+0x28>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <RetargetInit+0x2c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6898      	ldr	r0, [r3, #8]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	2202      	movs	r2, #2
 8000a40:	2100      	movs	r1, #0
 8000a42:	f007 feb1 	bl	80087a8 <setvbuf>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	24004ae4 	.word	0x24004ae4
 8000a54:	24000014 	.word	0x24000014

08000a58 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d002      	beq.n	8000a70 <_write+0x18>
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d111      	bne.n	8000a94 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <_write+0x54>)
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	f003 fc49 	bl	8004314 <HAL_UART_Transmit>
 8000a82:	4603      	mov	r3, r0
 8000a84:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a86:	7dfb      	ldrb	r3, [r7, #23]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d101      	bne.n	8000a90 <_write+0x38>
      return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	e008      	b.n	8000aa2 <_write+0x4a>
    else
      return EIO;
 8000a90:	2305      	movs	r3, #5
 8000a92:	e006      	b.n	8000aa2 <_write+0x4a>
  }
  errno = EBADF;
 8000a94:	f007 fc7a 	bl	800838c <__errno>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2209      	movs	r2, #9
 8000a9c:	601a      	str	r2, [r3, #0]
  return -1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	24004ae4 	.word	0x24004ae4

08000ab0 <_close>:

int _close(int fd) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db04      	blt.n	8000ac8 <_close+0x18>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	dc01      	bgt.n	8000ac8 <_close+0x18>
    return 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e006      	b.n	8000ad6 <_close+0x26>

  errno = EBADF;
 8000ac8:	f007 fc60 	bl	800838c <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2209      	movs	r2, #9
 8000ad0:	601a      	str	r2, [r3, #0]
  return -1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000aea:	f007 fc4f 	bl	800838c <__errno>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2209      	movs	r2, #9
 8000af2:	601a      	str	r2, [r3, #0]
  return -1;
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_read>:

int _read(int fd, char* ptr, int len) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d110      	bne.n	8000b34 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <_read+0x4c>)
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	f003 fc8f 	bl	8004440 <HAL_UART_Receive>
 8000b22:	4603      	mov	r3, r0
 8000b24:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b26:	7dfb      	ldrb	r3, [r7, #23]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <_read+0x30>
      return 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e008      	b.n	8000b42 <_read+0x42>
    else
      return EIO;
 8000b30:	2305      	movs	r3, #5
 8000b32:	e006      	b.n	8000b42 <_read+0x42>
  }
  errno = EBADF;
 8000b34:	f007 fc2a 	bl	800838c <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2209      	movs	r2, #9
 8000b3c:	601a      	str	r2, [r3, #0]
  return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	24004ae4 	.word	0x24004ae4

08000b50 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db08      	blt.n	8000b72 <_fstat+0x22>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	dc05      	bgt.n	8000b72 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6c:	605a      	str	r2, [r3, #4]
    return 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e005      	b.n	8000b7e <_fstat+0x2e>
  }

  errno = EBADF;
 8000b72:	f007 fc0b 	bl	800838c <__errno>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2209      	movs	r2, #9
 8000b7a:	601a      	str	r2, [r3, #0]
  return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x38>)
 8000b90:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_MspInit+0x38>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_MspInit+0x38>)
 8000ba0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f06f 0001 	mvn.w	r0, #1
 8000bb4:	f000 fb38 	bl	8001228 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	58024400 	.word	0x58024400

08000bc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b090      	sub	sp, #64	; 0x40
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b0f      	cmp	r3, #15
 8000bd0:	d827      	bhi.n	8000c22 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	2037      	movs	r0, #55	; 0x37
 8000bd8:	f000 fb26 	bl	8001228 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bdc:	2037      	movs	r0, #55	; 0x37
 8000bde:	f000 fb3d 	bl	800125c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000be2:	4a29      	ldr	r2, [pc, #164]	; (8000c88 <HAL_InitTick+0xc4>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <HAL_InitTick+0xc8>)
 8000bea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bee:	4a27      	ldr	r2, [pc, #156]	; (8000c8c <HAL_InitTick+0xc8>)
 8000bf0:	f043 0320 	orr.w	r3, r3, #32
 8000bf4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <HAL_InitTick+0xc8>)
 8000bfa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bfe:	f003 0320 	and.w	r3, r3, #32
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c06:	f107 0210 	add.w	r2, r7, #16
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 fce5 	bl	80025e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d106      	bne.n	8000c2e <HAL_InitTick+0x6a>
 8000c20:	e001      	b.n	8000c26 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e02b      	b.n	8000c7e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c26:	f001 fcaf 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8000c2a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000c2c:	e004      	b.n	8000c38 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c2e:	f001 fcab 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8000c32:	4603      	mov	r3, r0
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c3a:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <HAL_InitTick+0xcc>)
 8000c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c40:	0c9b      	lsrs	r3, r3, #18
 8000c42:	3b01      	subs	r3, #1
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <HAL_InitTick+0xd0>)
 8000c48:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <HAL_InitTick+0xd4>)
 8000c4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_InitTick+0xd0>)
 8000c4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c52:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c54:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <HAL_InitTick+0xd0>)
 8000c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c58:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_InitTick+0xd0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_InitTick+0xd0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <HAL_InitTick+0xd0>)
 8000c68:	f003 f82a 	bl	8003cc0 <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d104      	bne.n	8000c7c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <HAL_InitTick+0xd0>)
 8000c74:	f003 f886 	bl	8003d84 <HAL_TIM_Base_Start_IT>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	e000      	b.n	8000c7e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3740      	adds	r7, #64	; 0x40
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	24000008 	.word	0x24000008
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	431bde83 	.word	0x431bde83
 8000c94:	24004ae8 	.word	0x24004ae8
 8000c98:	40001400 	.word	0x40001400

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM7_IRQHandler+0x10>)
 8000cce:	f003 f8d1 	bl	8003e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24004ae8 	.word	0x24004ae8

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f007 fb3e 	bl	800838c <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	24100000 	.word	0x24100000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	24000098 	.word	0x24000098
 8000d44:	24004c18 	.word	0x24004c18

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <SystemInit+0xd0>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a31      	ldr	r2, [pc, #196]	; (8000e18 <SystemInit+0xd0>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <SystemInit+0xd4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 030f 	and.w	r3, r3, #15
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d807      	bhi.n	8000d78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <SystemInit+0xd4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 030f 	bic.w	r3, r3, #15
 8000d70:	4a2a      	ldr	r2, [pc, #168]	; (8000e1c <SystemInit+0xd4>)
 8000d72:	f043 0303 	orr.w	r3, r3, #3
 8000d76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <SystemInit+0xd8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a28      	ldr	r2, [pc, #160]	; (8000e20 <SystemInit+0xd8>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d84:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <SystemInit+0xd8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <SystemInit+0xd8>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4924      	ldr	r1, [pc, #144]	; (8000e20 <SystemInit+0xd8>)
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <SystemInit+0xdc>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <SystemInit+0xd4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d007      	beq.n	8000db2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <SystemInit+0xd4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 030f 	bic.w	r3, r3, #15
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <SystemInit+0xd4>)
 8000dac:	f043 0303 	orr.w	r3, r3, #3
 8000db0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <SystemInit+0xd8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <SystemInit+0xd8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <SystemInit+0xd8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <SystemInit+0xd8>)
 8000dc6:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <SystemInit+0xe0>)
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <SystemInit+0xd8>)
 8000dcc:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <SystemInit+0xe4>)
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <SystemInit+0xd8>)
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <SystemInit+0xe8>)
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <SystemInit+0xd8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <SystemInit+0xd8>)
 8000dde:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <SystemInit+0xe8>)
 8000de0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <SystemInit+0xd8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <SystemInit+0xd8>)
 8000dea:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <SystemInit+0xe8>)
 8000dec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <SystemInit+0xd8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <SystemInit+0xd8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <SystemInit+0xd8>)
 8000dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <SystemInit+0xd8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <SystemInit+0xec>)
 8000e08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e0c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00
 8000e1c:	52002000 	.word	0x52002000
 8000e20:	58024400 	.word	0x58024400
 8000e24:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e28:	02020200 	.word	0x02020200
 8000e2c:	01ff0000 	.word	0x01ff0000
 8000e30:	01010280 	.word	0x01010280
 8000e34:	52004000 	.word	0x52004000

08000e38 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e3e:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <MX_USART3_UART_Init+0x94>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e80:	4811      	ldr	r0, [pc, #68]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e82:	f003 f9f7 	bl	8004274 <HAL_UART_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e8c:	f7ff fdc6 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e90:	2100      	movs	r1, #0
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e94:	f004 fbf4 	bl	8005680 <HAL_UARTEx_SetTxFifoThreshold>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e9e:	f7ff fdbd 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000ea6:	f004 fc29 	bl	80056fc <HAL_UARTEx_SetRxFifoThreshold>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000eb0:	f7ff fdb4 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000eb6:	f004 fbaa 	bl	800560e <HAL_UARTEx_DisableFifoMode>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ec0:	f7ff fdac 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	24004b34 	.word	0x24004b34
 8000ecc:	40004800 	.word	0x40004800

08000ed0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0b8      	sub	sp, #224	; 0xe0
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	22b8      	movs	r2, #184	; 0xb8
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f007 fb7c 	bl	80085ee <memset>
  if(uartHandle->Instance==USART3)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a25      	ldr	r2, [pc, #148]	; (8000f90 <HAL_UART_MspInit+0xc0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d142      	bne.n	8000f86 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f00:	2302      	movs	r3, #2
 8000f02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fba8 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f1a:	f7ff fd7f 	bl	8000a1c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_UART_MspInit+0xc4>)
 8000f20:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <HAL_UART_MspInit+0xc4>)
 8000f26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_UART_MspInit+0xc4>)
 8000f30:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_UART_MspInit+0xc4>)
 8000f3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f42:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <HAL_UART_MspInit+0xc4>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_UART_MspInit+0xc4>)
 8000f4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f74:	2307      	movs	r3, #7
 8000f76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_UART_MspInit+0xc8>)
 8000f82:	f000 f979 	bl	8001278 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f86:	bf00      	nop
 8000f88:	37e0      	adds	r7, #224	; 0xe0
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40004800 	.word	0x40004800
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020c00 	.word	0x58020c00

08000f9c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb0:	f7ff feca 	bl	8000d48 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	; (8000ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f007 fad3 	bl	8008584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fc85 	bl	80008ec <main>
  bx  lr
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000fe8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fec:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000ff0:	08008e38 	.word	0x08008e38
  ldr r2, =_sbss
 8000ff4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000ff8:	24004c18 	.word	0x24004c18

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001006:	2003      	movs	r0, #3
 8001008:	f000 f903 	bl	8001212 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800100c:	f001 f912 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8001010:	4602      	mov	r2, r0
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_Init+0x68>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	f003 030f 	and.w	r3, r3, #15
 800101c:	4913      	ldr	r1, [pc, #76]	; (800106c <HAL_Init+0x6c>)
 800101e:	5ccb      	ldrb	r3, [r1, r3]
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
 8001028:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_Init+0x68>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <HAL_Init+0x6c>)
 8001034:	5cd3      	ldrb	r3, [r2, r3]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <HAL_Init+0x70>)
 8001042:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <HAL_Init+0x74>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104a:	200f      	movs	r0, #15
 800104c:	f7ff fdba 	bl	8000bc4 <HAL_InitTick>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e002      	b.n	8001060 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800105a:	f7ff fd95 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58024400 	.word	0x58024400
 800106c:	08008d8c 	.word	0x08008d8c
 8001070:	24000004 	.word	0x24000004
 8001074:	24000000 	.word	0x24000000

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2400000c 	.word	0x2400000c
 800109c:	24004bc4 	.word	0x24004bc4

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	24004bc4 	.word	0x24004bc4

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <__NVIC_SetPriorityGrouping+0x40>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x40>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	05fa0000 	.word	0x05fa0000

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff4c 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001236:	f7ff ff63 	bl	8001100 <__NVIC_GetPriorityGrouping>
 800123a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	6978      	ldr	r0, [r7, #20]
 8001242:	f7ff ffb3 	bl	80011ac <NVIC_EncodePriority>
 8001246:	4602      	mov	r2, r0
 8001248:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff82 	bl	8001158 <__NVIC_SetPriority>
}
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff56 	bl	800111c <__NVIC_EnableIRQ>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001286:	4b89      	ldr	r3, [pc, #548]	; (80014ac <HAL_GPIO_Init+0x234>)
 8001288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800128a:	e194      	b.n	80015b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8186 	beq.w	80015b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d005      	beq.n	80012bc <HAL_GPIO_Init+0x44>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	f003 0201 	and.w	r2, r3, #1
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b03      	cmp	r3, #3
 8001328:	d017      	beq.n	800135a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d123      	bne.n	80013ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	69b9      	ldr	r1, [r7, #24]
 80013aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0203 	and.w	r2, r3, #3
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 80e0 	beq.w	80015b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_GPIO_Init+0x238>)
 80013f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013f6:	4a2e      	ldr	r2, [pc, #184]	; (80014b0 <HAL_GPIO_Init+0x238>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_GPIO_Init+0x238>)
 8001402:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a29      	ldr	r2, [pc, #164]	; (80014b4 <HAL_GPIO_Init+0x23c>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <HAL_GPIO_Init+0x240>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d052      	beq.n	80014e0 <HAL_GPIO_Init+0x268>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <HAL_GPIO_Init+0x244>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d031      	beq.n	80014a6 <HAL_GPIO_Init+0x22e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_GPIO_Init+0x248>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d02b      	beq.n	80014a2 <HAL_GPIO_Init+0x22a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_GPIO_Init+0x24c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d025      	beq.n	800149e <HAL_GPIO_Init+0x226>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <HAL_GPIO_Init+0x250>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01f      	beq.n	800149a <HAL_GPIO_Init+0x222>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_GPIO_Init+0x254>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d019      	beq.n	8001496 <HAL_GPIO_Init+0x21e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a1a      	ldr	r2, [pc, #104]	; (80014d0 <HAL_GPIO_Init+0x258>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0x21a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_GPIO_Init+0x25c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x216>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <HAL_GPIO_Init+0x260>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x212>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a17      	ldr	r2, [pc, #92]	; (80014dc <HAL_GPIO_Init+0x264>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x20e>
 8001482:	2309      	movs	r3, #9
 8001484:	e02d      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 8001486:	230a      	movs	r3, #10
 8001488:	e02b      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 800148a:	2308      	movs	r3, #8
 800148c:	e029      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 800148e:	2307      	movs	r3, #7
 8001490:	e027      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 8001492:	2306      	movs	r3, #6
 8001494:	e025      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 8001496:	2305      	movs	r3, #5
 8001498:	e023      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 800149a:	2304      	movs	r3, #4
 800149c:	e021      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 800149e:	2303      	movs	r3, #3
 80014a0:	e01f      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e01d      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e01b      	b.n	80014e2 <HAL_GPIO_Init+0x26a>
 80014aa:	bf00      	nop
 80014ac:	58000080 	.word	0x58000080
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58000400 	.word	0x58000400
 80014b8:	58020000 	.word	0x58020000
 80014bc:	58020400 	.word	0x58020400
 80014c0:	58020800 	.word	0x58020800
 80014c4:	58020c00 	.word	0x58020c00
 80014c8:	58021000 	.word	0x58021000
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58021800 	.word	0x58021800
 80014d4:	58021c00 	.word	0x58021c00
 80014d8:	58022000 	.word	0x58022000
 80014dc:	58022400 	.word	0x58022400
 80014e0:	2300      	movs	r3, #0
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	f002 0203 	and.w	r2, r2, #3
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	4093      	lsls	r3, r2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f2:	4938      	ldr	r1, [pc, #224]	; (80015d4 <HAL_GPIO_Init+0x35c>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	3301      	adds	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f ae63 	bne.w	800128c <HAL_GPIO_Init+0x14>
  }
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	3724      	adds	r7, #36	; 0x24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	58000400 	.word	0x58000400

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015f4:	e003      	b.n	80015fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	041a      	lsls	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	619a      	str	r2, [r3, #24]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001614:	4b29      	ldr	r3, [pc, #164]	; (80016bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	2b06      	cmp	r3, #6
 800161e:	d00a      	beq.n	8001636 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001620:	4b26      	ldr	r3, [pc, #152]	; (80016bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	d001      	beq.n	8001632 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e040      	b.n	80016b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e03e      	b.n	80016b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800163e:	491f      	ldr	r1, [pc, #124]	; (80016bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4313      	orrs	r3, r2
 8001644:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001646:	f7ff fd2b 	bl	80010a0 <HAL_GetTick>
 800164a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800164c:	e009      	b.n	8001662 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800164e:	f7ff fd27 	bl	80010a0 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800165c:	d901      	bls.n	8001662 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e028      	b.n	80016b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800166a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166e:	d1ee      	bne.n	800164e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b1e      	cmp	r3, #30
 8001674:	d008      	beq.n	8001688 <HAL_PWREx_ConfigSupply+0x7c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b2e      	cmp	r3, #46	; 0x2e
 800167a:	d005      	beq.n	8001688 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b1d      	cmp	r3, #29
 8001680:	d002      	beq.n	8001688 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b2d      	cmp	r3, #45	; 0x2d
 8001686:	d114      	bne.n	80016b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001688:	f7ff fd0a 	bl	80010a0 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800168e:	e009      	b.n	80016a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001690:	f7ff fd06 	bl	80010a0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169e:	d901      	bls.n	80016a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e007      	b.n	80016b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_PWREx_ConfigSupply+0xb0>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b0:	d1ee      	bne.n	8001690 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	58024800 	.word	0x58024800

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	; 0x30
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e3f3      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 80b3 	beq.w	8001846 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e0:	4b9e      	ldr	r3, [pc, #632]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016ea:	4b9c      	ldr	r3, [pc, #624]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d007      	beq.n	8001706 <HAL_RCC_OscConfig+0x46>
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	2b18      	cmp	r3, #24
 80016fa:	d112      	bne.n	8001722 <HAL_RCC_OscConfig+0x62>
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d10d      	bne.n	8001722 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001706:	4b95      	ldr	r3, [pc, #596]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8098 	beq.w	8001844 <HAL_RCC_OscConfig+0x184>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f040 8093 	bne.w	8001844 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e3cb      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x7a>
 800172c:	4b8b      	ldr	r3, [pc, #556]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a8a      	ldr	r2, [pc, #552]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e058      	b.n	80017ec <HAL_RCC_OscConfig+0x12c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d112      	bne.n	8001768 <HAL_RCC_OscConfig+0xa8>
 8001742:	4b86      	ldr	r3, [pc, #536]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a85      	ldr	r2, [pc, #532]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b83      	ldr	r3, [pc, #524]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a82      	ldr	r2, [pc, #520]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001754:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b80      	ldr	r3, [pc, #512]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7f      	ldr	r2, [pc, #508]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e041      	b.n	80017ec <HAL_RCC_OscConfig+0x12c>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001770:	d112      	bne.n	8001798 <HAL_RCC_OscConfig+0xd8>
 8001772:	4b7a      	ldr	r3, [pc, #488]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a79      	ldr	r2, [pc, #484]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b77      	ldr	r3, [pc, #476]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a76      	ldr	r2, [pc, #472]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001784:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b74      	ldr	r3, [pc, #464]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a73      	ldr	r2, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e029      	b.n	80017ec <HAL_RCC_OscConfig+0x12c>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80017a0:	d112      	bne.n	80017c8 <HAL_RCC_OscConfig+0x108>
 80017a2:	4b6e      	ldr	r3, [pc, #440]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6d      	ldr	r2, [pc, #436]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b6b      	ldr	r3, [pc, #428]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6a      	ldr	r2, [pc, #424]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b68      	ldr	r3, [pc, #416]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a67      	ldr	r2, [pc, #412]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e011      	b.n	80017ec <HAL_RCC_OscConfig+0x12c>
 80017c8:	4b64      	ldr	r3, [pc, #400]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a63      	ldr	r2, [pc, #396]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b61      	ldr	r3, [pc, #388]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a60      	ldr	r2, [pc, #384]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b5e      	ldr	r3, [pc, #376]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a5d      	ldr	r2, [pc, #372]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80017e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d013      	beq.n	800181c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fc54 	bl	80010a0 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fc50 	bl	80010a0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e355      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800180e:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x13c>
 800181a:	e014      	b.n	8001846 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fc40 	bl	80010a0 <HAL_GetTick>
 8001820:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fc3c 	bl	80010a0 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e341      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001836:	4b49      	ldr	r3, [pc, #292]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x164>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 808c 	beq.w	800196c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001854:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800185c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800185e:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_RCC_OscConfig+0x1ba>
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	2b18      	cmp	r3, #24
 800186e:	d137      	bne.n	80018e0 <HAL_RCC_OscConfig+0x220>
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d132      	bne.n	80018e0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187a:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_RCC_OscConfig+0x1d2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e313      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 0219 	bic.w	r2, r3, #25
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	492f      	ldr	r1, [pc, #188]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018a4:	f7ff fbfc 	bl	80010a0 <HAL_GetTick>
 80018a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ac:	f7ff fbf8 	bl	80010a0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e2fd      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	061b      	lsls	r3, r3, #24
 80018d8:	4920      	ldr	r1, [pc, #128]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018de:	e045      	b.n	800196c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d026      	beq.n	8001936 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 0219 	bic.w	r2, r3, #25
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4919      	ldr	r1, [pc, #100]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff fbd1 	bl	80010a0 <HAL_GetTick>
 80018fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff fbcd 	bl	80010a0 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e2d2      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	490b      	ldr	r1, [pc, #44]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	e01a      	b.n	800196c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_RCC_OscConfig+0x29c>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff fbad 	bl	80010a0 <HAL_GetTick>
 8001946:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff fba9 	bl	80010a0 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d903      	bls.n	8001960 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e2ae      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
 800195c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001960:	4b99      	ldr	r3, [pc, #612]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ee      	bne.n	800194a <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d06a      	beq.n	8001a4e <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001978:	4b93      	ldr	r3, [pc, #588]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001980:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001982:	4b91      	ldr	r3, [pc, #580]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b08      	cmp	r3, #8
 800198c:	d007      	beq.n	800199e <HAL_RCC_OscConfig+0x2de>
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b18      	cmp	r3, #24
 8001992:	d11b      	bne.n	80019cc <HAL_RCC_OscConfig+0x30c>
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d116      	bne.n	80019cc <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800199e:	4b8a      	ldr	r3, [pc, #552]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2f6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	2b80      	cmp	r3, #128	; 0x80
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e281      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019b6:	4b84      	ldr	r3, [pc, #528]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	061b      	lsls	r3, r3, #24
 80019c4:	4980      	ldr	r1, [pc, #512]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019ca:	e040      	b.n	8001a4e <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d023      	beq.n	8001a1c <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019d4:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a7b      	ldr	r2, [pc, #492]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 80019da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff fb5e 	bl	80010a0 <HAL_GetTick>
 80019e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80019e8:	f7ff fb5a 	bl	80010a0 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e25f      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019fa:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a06:	4b70      	ldr	r3, [pc, #448]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	061b      	lsls	r3, r3, #24
 8001a14:	496c      	ldr	r1, [pc, #432]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60cb      	str	r3, [r1, #12]
 8001a1a:	e018      	b.n	8001a4e <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a69      	ldr	r2, [pc, #420]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fb3a 	bl	80010a0 <HAL_GetTick>
 8001a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a30:	f7ff fb36 	bl	80010a0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e23b      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a42:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d036      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d019      	beq.n	8001a96 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a62:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a66:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fb17 	bl	80010a0 <HAL_GetTick>
 8001a72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a76:	f7ff fb13 	bl	80010a0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e218      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a88:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x3b6>
 8001a94:	e018      	b.n	8001ac8 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a96:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9a:	4a4b      	ldr	r2, [pc, #300]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fafd 	bl	80010a0 <HAL_GetTick>
 8001aa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff faf9 	bl	80010a0 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1fe      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001abc:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d036      	beq.n	8001b42 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d019      	beq.n	8001b10 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001adc:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a39      	ldr	r2, [pc, #228]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001ae2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ae6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ae8:	f7ff fada 	bl	80010a0 <HAL_GetTick>
 8001aec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001af0:	f7ff fad6 	bl	80010a0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1db      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x430>
 8001b0e:	e018      	b.n	8001b42 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a2c      	ldr	r2, [pc, #176]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fac0 	bl	80010a0 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b24:	f7ff fabc 	bl	80010a0 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1c1      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80af 	beq.w	8001cae <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_RCC_OscConfig+0x50c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_RCC_OscConfig+0x50c>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b5c:	f7ff faa0 	bl	80010a0 <HAL_GetTick>
 8001b60:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b64:	f7ff fa9c 	bl	80010a0 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1a1      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_RCC_OscConfig+0x50c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d106      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4d8>
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6713      	str	r3, [r2, #112]	; 0x70
 8001b96:	e05b      	b.n	8001c50 <HAL_RCC_OscConfig+0x590>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d117      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x510>
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a02      	ldr	r2, [pc, #8]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	e044      	b.n	8001c50 <HAL_RCC_OscConfig+0x590>
 8001bc6:	bf00      	nop
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	58024800 	.word	0x58024800
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d112      	bne.n	8001bfe <HAL_RCC_OscConfig+0x53e>
 8001bd8:	4b95      	ldr	r3, [pc, #596]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4a94      	ldr	r2, [pc, #592]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6713      	str	r3, [r2, #112]	; 0x70
 8001be4:	4b92      	ldr	r3, [pc, #584]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	4a91      	ldr	r2, [pc, #580]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf0:	4b8f      	ldr	r3, [pc, #572]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	4a8e      	ldr	r2, [pc, #568]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfc:	e028      	b.n	8001c50 <HAL_RCC_OscConfig+0x590>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b85      	cmp	r3, #133	; 0x85
 8001c04:	d112      	bne.n	8001c2c <HAL_RCC_OscConfig+0x56c>
 8001c06:	4b8a      	ldr	r3, [pc, #552]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	4a89      	ldr	r2, [pc, #548]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6713      	str	r3, [r2, #112]	; 0x70
 8001c12:	4b87      	ldr	r3, [pc, #540]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	4a86      	ldr	r2, [pc, #536]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1e:	4b84      	ldr	r3, [pc, #528]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	4a83      	ldr	r2, [pc, #524]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2a:	e011      	b.n	8001c50 <HAL_RCC_OscConfig+0x590>
 8001c2c:	4b80      	ldr	r3, [pc, #512]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c30:	4a7f      	ldr	r2, [pc, #508]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	6713      	str	r3, [r2, #112]	; 0x70
 8001c38:	4b7d      	ldr	r3, [pc, #500]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	4a7c      	ldr	r2, [pc, #496]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c3e:	f023 0304 	bic.w	r3, r3, #4
 8001c42:	6713      	str	r3, [r2, #112]	; 0x70
 8001c44:	4b7a      	ldr	r3, [pc, #488]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	4a79      	ldr	r2, [pc, #484]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d015      	beq.n	8001c84 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c58:	f7ff fa22 	bl	80010a0 <HAL_GetTick>
 8001c5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7ff fa1e 	bl	80010a0 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e121      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c76:	4b6e      	ldr	r3, [pc, #440]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0ee      	beq.n	8001c60 <HAL_RCC_OscConfig+0x5a0>
 8001c82:	e014      	b.n	8001cae <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff fa0c 	bl	80010a0 <HAL_GetTick>
 8001c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fa08 	bl	80010a0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e10b      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ee      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8100 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001cb8:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cc0:	2b18      	cmp	r3, #24
 8001cc2:	f000 80bb 	beq.w	8001e3c <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	f040 8095 	bne.w	8001dfa <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd0:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a56      	ldr	r2, [pc, #344]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f9e0 	bl	80010a0 <HAL_GetTick>
 8001ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f9dc 	bl	80010a0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0e1      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cf6:	4b4e      	ldr	r3, [pc, #312]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d02:	4b4b      	ldr	r3, [pc, #300]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d06:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_RCC_OscConfig+0x774>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	430a      	orrs	r2, r1
 8001d16:	4946      	ldr	r1, [pc, #280]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	628b      	str	r3, [r1, #40]	; 0x28
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	3b01      	subs	r3, #1
 8001d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d36:	3b01      	subs	r3, #1
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	3b01      	subs	r3, #1
 8001d46:	061b      	lsls	r3, r3, #24
 8001d48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d4c:	4938      	ldr	r1, [pc, #224]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001d52:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	4a36      	ldr	r2, [pc, #216]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d62:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_RCC_OscConfig+0x778>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d6a:	00d2      	lsls	r2, r2, #3
 8001d6c:	4930      	ldr	r1, [pc, #192]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d72:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	f023 020c 	bic.w	r2, r3, #12
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	492c      	ldr	r1, [pc, #176]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	f023 0202 	bic.w	r2, r3, #2
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	4927      	ldr	r1, [pc, #156]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	4a25      	ldr	r2, [pc, #148]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001da2:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001dcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7ff f965 	bl	80010a0 <HAL_GetTick>
 8001dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dda:	f7ff f961 	bl	80010a0 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e066      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x71a>
 8001df8:	e05e      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001e00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff f94b 	bl	80010a0 <HAL_GetTick>
 8001e0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff f947 	bl	80010a0 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e04c      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_RCC_OscConfig+0x770>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x74e>
 8001e2c:	e044      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7f8>
 8001e2e:	bf00      	nop
 8001e30:	58024400 	.word	0x58024400
 8001e34:	fffffc0c 	.word	0xfffffc0c
 8001e38:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCC_OscConfig+0x804>)
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_RCC_OscConfig+0x804>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d031      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f003 0203 	and.w	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d12a      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d122      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d11a      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	0a5b      	lsrs	r3, r3, #9
 8001e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d111      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	0c1b      	lsrs	r3, r3, #16
 8001e94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	0e1b      	lsrs	r3, r3, #24
 8001ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3730      	adds	r7, #48	; 0x30
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	58024400 	.word	0x58024400

08001ec8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e19c      	b.n	8002216 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001edc:	4b8a      	ldr	r3, [pc, #552]	; (8002108 <HAL_RCC_ClockConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d910      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b87      	ldr	r3, [pc, #540]	; (8002108 <HAL_RCC_ClockConfig+0x240>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 020f 	bic.w	r2, r3, #15
 8001ef2:	4985      	ldr	r1, [pc, #532]	; (8002108 <HAL_RCC_ClockConfig+0x240>)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b83      	ldr	r3, [pc, #524]	; (8002108 <HAL_RCC_ClockConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e184      	b.n	8002216 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d010      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	4b7b      	ldr	r3, [pc, #492]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d908      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f28:	4b78      	ldr	r3, [pc, #480]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	4975      	ldr	r1, [pc, #468]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d010      	beq.n	8001f68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	4b70      	ldr	r3, [pc, #448]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d908      	bls.n	8001f68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f56:	4b6d      	ldr	r3, [pc, #436]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	496a      	ldr	r1, [pc, #424]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d010      	beq.n	8001f96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	4b64      	ldr	r3, [pc, #400]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d908      	bls.n	8001f96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f84:	4b61      	ldr	r3, [pc, #388]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	495e      	ldr	r1, [pc, #376]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d908      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001fb2:	4b56      	ldr	r3, [pc, #344]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4953      	ldr	r1, [pc, #332]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	4b4d      	ldr	r3, [pc, #308]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d908      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4b4a      	ldr	r3, [pc, #296]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f023 020f 	bic.w	r2, r3, #15
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4947      	ldr	r1, [pc, #284]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d055      	beq.n	80020aa <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4940      	ldr	r1, [pc, #256]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 800200c:	4313      	orrs	r3, r2
 800200e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d107      	bne.n	8002028 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002018:	4b3c      	ldr	r3, [pc, #240]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d121      	bne.n	8002068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0f6      	b.n	8002216 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d107      	bne.n	8002040 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002030:	4b36      	ldr	r3, [pc, #216]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d115      	bne.n	8002068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0ea      	b.n	8002216 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002048:	4b30      	ldr	r3, [pc, #192]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d109      	bne.n	8002068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0de      	b.n	8002216 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002058:	4b2c      	ldr	r3, [pc, #176]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0d6      	b.n	8002216 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002068:	4b28      	ldr	r3, [pc, #160]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f023 0207 	bic.w	r2, r3, #7
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4925      	ldr	r1, [pc, #148]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 8002076:	4313      	orrs	r3, r2
 8002078:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207a:	f7ff f811 	bl	80010a0 <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002080:	e00a      	b.n	8002098 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002082:	f7ff f80d 	bl	80010a0 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0be      	b.n	8002216 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d1eb      	bne.n	8002082 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d010      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d208      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f023 020f 	bic.w	r2, r3, #15
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	490e      	ldr	r1, [pc, #56]	; (800210c <HAL_RCC_ClockConfig+0x244>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_ClockConfig+0x240>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d214      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_RCC_ClockConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 020f 	bic.w	r2, r3, #15
 80020ee:	4906      	ldr	r1, [pc, #24]	; (8002108 <HAL_RCC_ClockConfig+0x240>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <HAL_RCC_ClockConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d005      	beq.n	8002110 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e086      	b.n	8002216 <HAL_RCC_ClockConfig+0x34e>
 8002108:	52002000 	.word	0x52002000
 800210c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d010      	beq.n	800213e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	4b3f      	ldr	r3, [pc, #252]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002128:	429a      	cmp	r2, r3
 800212a:	d208      	bcs.n	800213e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800212c:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	4939      	ldr	r1, [pc, #228]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 800213a:	4313      	orrs	r3, r2
 800213c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	4b34      	ldr	r3, [pc, #208]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002156:	429a      	cmp	r2, r3
 8002158:	d208      	bcs.n	800216c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	492e      	ldr	r1, [pc, #184]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 8002168:	4313      	orrs	r3, r2
 800216a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d010      	beq.n	800219a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002184:	429a      	cmp	r2, r3
 8002186:	d208      	bcs.n	800219a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4922      	ldr	r1, [pc, #136]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 8002196:	4313      	orrs	r3, r2
 8002198:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d208      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4917      	ldr	r1, [pc, #92]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80021c8:	f000 f834 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	4912      	ldr	r1, [pc, #72]	; (8002224 <HAL_RCC_ClockConfig+0x35c>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
 80021e4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_RCC_ClockConfig+0x358>)
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <HAL_RCC_ClockConfig+0x35c>)
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x360>)
 80021fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <HAL_RCC_ClockConfig+0x364>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x368>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fcda 	bl	8000bc4 <HAL_InitTick>
 8002210:	4603      	mov	r3, r0
 8002212:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	58024400 	.word	0x58024400
 8002224:	08008d8c 	.word	0x08008d8c
 8002228:	24000004 	.word	0x24000004
 800222c:	24000000 	.word	0x24000000
 8002230:	24000008 	.word	0x24000008

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800223a:	4bb3      	ldr	r3, [pc, #716]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002242:	2b18      	cmp	r3, #24
 8002244:	f200 8155 	bhi.w	80024f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002248:	a201      	add	r2, pc, #4	; (adr r2, 8002250 <HAL_RCC_GetSysClockFreq+0x1c>)
 800224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224e:	bf00      	nop
 8002250:	080022b5 	.word	0x080022b5
 8002254:	080024f3 	.word	0x080024f3
 8002258:	080024f3 	.word	0x080024f3
 800225c:	080024f3 	.word	0x080024f3
 8002260:	080024f3 	.word	0x080024f3
 8002264:	080024f3 	.word	0x080024f3
 8002268:	080024f3 	.word	0x080024f3
 800226c:	080024f3 	.word	0x080024f3
 8002270:	080022db 	.word	0x080022db
 8002274:	080024f3 	.word	0x080024f3
 8002278:	080024f3 	.word	0x080024f3
 800227c:	080024f3 	.word	0x080024f3
 8002280:	080024f3 	.word	0x080024f3
 8002284:	080024f3 	.word	0x080024f3
 8002288:	080024f3 	.word	0x080024f3
 800228c:	080024f3 	.word	0x080024f3
 8002290:	080022e1 	.word	0x080022e1
 8002294:	080024f3 	.word	0x080024f3
 8002298:	080024f3 	.word	0x080024f3
 800229c:	080024f3 	.word	0x080024f3
 80022a0:	080024f3 	.word	0x080024f3
 80022a4:	080024f3 	.word	0x080024f3
 80022a8:	080024f3 	.word	0x080024f3
 80022ac:	080024f3 	.word	0x080024f3
 80022b0:	080022e7 	.word	0x080022e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022b4:	4b94      	ldr	r3, [pc, #592]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d009      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022c0:	4b91      	ldr	r3, [pc, #580]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	08db      	lsrs	r3, r3, #3
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	4a90      	ldr	r2, [pc, #576]	; (800250c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
 80022d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80022d2:	e111      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022d4:	4b8d      	ldr	r3, [pc, #564]	; (800250c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022d6:	61bb      	str	r3, [r7, #24]
    break;
 80022d8:	e10e      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80022da:	4b8d      	ldr	r3, [pc, #564]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022dc:	61bb      	str	r3, [r7, #24]
    break;
 80022de:	e10b      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80022e0:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022e2:	61bb      	str	r3, [r7, #24]
    break;
 80022e4:	e108      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022e6:	4b88      	ldr	r3, [pc, #544]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80022f0:	4b85      	ldr	r3, [pc, #532]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022fc:	4b82      	ldr	r3, [pc, #520]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002306:	4b80      	ldr	r3, [pc, #512]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	08db      	lsrs	r3, r3, #3
 800230c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80e1 	beq.w	80024ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b02      	cmp	r3, #2
 800232e:	f000 8083 	beq.w	8002438 <HAL_RCC_GetSysClockFreq+0x204>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b02      	cmp	r3, #2
 8002336:	f200 80a1 	bhi.w	800247c <HAL_RCC_GetSysClockFreq+0x248>
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x114>
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d056      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002346:	e099      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002348:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d02d      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002354:	4b6c      	ldr	r3, [pc, #432]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	08db      	lsrs	r3, r3, #3
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	4a6b      	ldr	r2, [pc, #428]	; (800250c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
 8002364:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800237e:	4b62      	ldr	r3, [pc, #392]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800238e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002392:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002518 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800239a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800239e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80023ae:	e087      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800251c <HAL_RCC_GetSysClockFreq+0x2e8>
 80023be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023c2:	4b51      	ldr	r3, [pc, #324]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002518 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023f2:	e065      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002520 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002406:	4b40      	ldr	r3, [pc, #256]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002416:	ed97 6a02 	vldr	s12, [r7, #8]
 800241a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800241e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800242a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002436:	e043      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002442:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002524 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800244a:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800245a:	ed97 6a02 	vldr	s12, [r7, #8]
 800245e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002518 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800246a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800246e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800247a:	e021      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002486:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002520 <HAL_RCC_GetSysClockFreq+0x2ec>
 800248a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800249e:	ed97 6a02 	vldr	s12, [r7, #8]
 80024a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002518 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	0a5b      	lsrs	r3, r3, #9
 80024c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ca:	3301      	adds	r3, #1
 80024cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024e4:	ee17 3a90 	vmov	r3, s15
 80024e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
    break;
 80024f0:	e002      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024f4:	61bb      	str	r3, [r7, #24]
    break;
 80024f6:	bf00      	nop
  }

  return sysclockfreq;
 80024f8:	69bb      	ldr	r3, [r7, #24]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	58024400 	.word	0x58024400
 800250c:	03d09000 	.word	0x03d09000
 8002510:	003d0900 	.word	0x003d0900
 8002514:	007a1200 	.word	0x007a1200
 8002518:	46000000 	.word	0x46000000
 800251c:	4c742400 	.word	0x4c742400
 8002520:	4a742400 	.word	0x4a742400
 8002524:	4af42400 	.word	0x4af42400

08002528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800252e:	f7ff fe81 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_RCC_GetHCLKFreq+0x50>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490f      	ldr	r1, [pc, #60]	; (800257c <HAL_RCC_GetHCLKFreq+0x54>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_GetHCLKFreq+0x50>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	4a09      	ldr	r2, [pc, #36]	; (800257c <HAL_RCC_GetHCLKFreq+0x54>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_RCC_GetHCLKFreq+0x58>)
 8002564:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <HAL_RCC_GetHCLKFreq+0x58>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	58024400 	.word	0x58024400
 800257c:	08008d8c 	.word	0x08008d8c
 8002580:	24000004 	.word	0x24000004
 8002584:	24000000 	.word	0x24000000

08002588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800258c:	f7ff ffcc 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4904      	ldr	r1, [pc, #16]	; (80025b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	58024400 	.word	0x58024400
 80025b0:	08008d8c 	.word	0x08008d8c

080025b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80025b8:	f7ff ffb6 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4904      	ldr	r1, [pc, #16]	; (80025dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	58024400 	.word	0x58024400
 80025dc:	08008d8c 	.word	0x08008d8c

080025e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	223f      	movs	r2, #63	; 0x3f
 80025ee:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_RCC_GetClockConfig+0x7c>)
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f003 0207 	and.w	r2, r3, #7
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80025fc:	4b17      	ldr	r3, [pc, #92]	; (800265c <HAL_RCC_GetClockConfig+0x7c>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <HAL_RCC_GetClockConfig+0x7c>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 020f 	and.w	r2, r3, #15
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_RCC_GetClockConfig+0x7c>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <HAL_RCC_GetClockConfig+0x7c>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_GetClockConfig+0x7c>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_RCC_GetClockConfig+0x7c>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetClockConfig+0x80>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 020f 	and.w	r2, r3, #15
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	58024400 	.word	0x58024400
 8002660:	52002000 	.word	0x52002000

08002664 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800266c:	2300      	movs	r3, #0
 800266e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002670:	2300      	movs	r3, #0
 8002672:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d03f      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002684:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002688:	d02a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800268a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800268e:	d824      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002694:	d018      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800269a:	d81e      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a4:	d007      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026a6:	e018      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026a8:	4ba6      	ldr	r3, [pc, #664]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	4aa5      	ldr	r2, [pc, #660]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026b4:	e015      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2102      	movs	r1, #2
 80026bc:	4618      	mov	r0, r3
 80026be:	f001 f99b 	bl	80039f8 <RCCEx_PLL2_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026c6:	e00c      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3324      	adds	r3, #36	; 0x24
 80026cc:	2102      	movs	r1, #2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f001 fa44 	bl	8003b5c <RCCEx_PLL3_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026d8:	e003      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
      break;
 80026de:	e000      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d109      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026e8:	4b96      	ldr	r3, [pc, #600]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f4:	4993      	ldr	r1, [pc, #588]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	650b      	str	r3, [r1, #80]	; 0x50
 80026fa:	e001      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d03d      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	2b04      	cmp	r3, #4
 8002712:	d826      	bhi.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002714:	a201      	add	r2, pc, #4	; (adr r2, 800271c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271a:	bf00      	nop
 800271c:	08002731 	.word	0x08002731
 8002720:	0800273f 	.word	0x0800273f
 8002724:	08002751 	.word	0x08002751
 8002728:	08002769 	.word	0x08002769
 800272c:	08002769 	.word	0x08002769
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002730:	4b84      	ldr	r3, [pc, #528]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	4a83      	ldr	r2, [pc, #524]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800273c:	e015      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f001 f957 	bl	80039f8 <RCCEx_PLL2_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800274e:	e00c      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3324      	adds	r3, #36	; 0x24
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f001 fa00 	bl	8003b5c <RCCEx_PLL3_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002760:	e003      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
      break;
 8002766:	e000      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d109      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002770:	4b74      	ldr	r3, [pc, #464]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002774:	f023 0207 	bic.w	r2, r3, #7
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	4971      	ldr	r1, [pc, #452]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800277e:	4313      	orrs	r3, r2
 8002780:	650b      	str	r3, [r1, #80]	; 0x50
 8002782:	e001      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002790:	2b00      	cmp	r3, #0
 8002792:	d04a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800279c:	d031      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800279e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027a2:	d82b      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a8:	d02d      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80027aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ae:	d825      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027b0:	2bc0      	cmp	r3, #192	; 0xc0
 80027b2:	d02a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027b4:	2bc0      	cmp	r3, #192	; 0xc0
 80027b6:	d821      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d016      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x186>
 80027bc:	2b80      	cmp	r3, #128	; 0x80
 80027be:	d81d      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x166>
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d007      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80027c8:	e018      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ca:	4b5e      	ldr	r3, [pc, #376]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	4a5d      	ldr	r2, [pc, #372]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80027d6:	e019      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f001 f90a 	bl	80039f8 <RCCEx_PLL2_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80027e8:	e010      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3324      	adds	r3, #36	; 0x24
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 f9b3 	bl	8003b5c <RCCEx_PLL3_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80027fa:	e007      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002800:	e004      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002802:	bf00      	nop
 8002804:	e002      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002806:	bf00      	nop
 8002808:	e000      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800280a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002812:	4b4c      	ldr	r3, [pc, #304]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002816:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	4949      	ldr	r1, [pc, #292]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	650b      	str	r3, [r1, #80]	; 0x50
 8002824:	e001      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002832:	2b00      	cmp	r3, #0
 8002834:	d04f      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800283e:	d036      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002840:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002844:	d830      	bhi.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800284a:	d032      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800284c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002850:	d82a      	bhi.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002852:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002856:	d02e      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002858:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800285c:	d824      	bhi.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002862:	d018      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002868:	d81e      	bhi.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800286e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002872:	d007      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002874:	e018      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002876:	4b33      	ldr	r3, [pc, #204]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	4a32      	ldr	r2, [pc, #200]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800287c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002880:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002882:	e019      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3304      	adds	r3, #4
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f001 f8b4 	bl	80039f8 <RCCEx_PLL2_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002894:	e010      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3324      	adds	r3, #36	; 0x24
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f001 f95d 	bl	8003b5c <RCCEx_PLL3_Config>
 80028a2:	4603      	mov	r3, r0
 80028a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80028a6:	e007      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	75fb      	strb	r3, [r7, #23]
      break;
 80028ac:	e004      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028ae:	bf00      	nop
 80028b0:	e002      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c2:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	491e      	ldr	r1, [pc, #120]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	650b      	str	r3, [r1, #80]	; 0x50
 80028d0:	e001      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
 80028d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d034      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e6:	2b30      	cmp	r3, #48	; 0x30
 80028e8:	d01c      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80028ea:	2b30      	cmp	r3, #48	; 0x30
 80028ec:	d817      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d00c      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d813      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d016      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d10f      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002908:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800290a:	e00e      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	2102      	movs	r1, #2
 8002912:	4618      	mov	r0, r3
 8002914:	f001 f870 	bl	80039f8 <RCCEx_PLL2_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800291c:	e005      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
      break;
 8002922:	e002      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002924:	bf00      	nop
 8002926:	e000      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800292a:	7dfb      	ldrb	r3, [r7, #23]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002934:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293c:	4901      	ldr	r1, [pc, #4]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002942:	e003      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d047      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002960:	d030      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002966:	d82a      	bhi.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002968:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800296c:	d02c      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800296e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002972:	d824      	bhi.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002978:	d018      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x348>
 800297a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297e:	d81e      	bhi.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002988:	d007      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800298a:	e018      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298c:	4bb0      	ldr	r3, [pc, #704]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	4aaf      	ldr	r2, [pc, #700]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002998:	e017      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 f829 	bl	80039f8 <RCCEx_PLL2_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029aa:	e00e      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3324      	adds	r3, #36	; 0x24
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 f8d2 	bl	8003b5c <RCCEx_PLL3_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029bc:	e005      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	75fb      	strb	r3, [r7, #23]
      break;
 80029c2:	e002      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80029c4:	bf00      	nop
 80029c6:	e000      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80029c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029d0:	4b9f      	ldr	r3, [pc, #636]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029dc:	499c      	ldr	r1, [pc, #624]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	650b      	str	r3, [r1, #80]	; 0x50
 80029e2:	e001      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d049      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fc:	d02e      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80029fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a02:	d828      	bhi.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a08:	d02a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002a0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a0e:	d822      	bhi.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a14:	d026      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002a16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a1a:	d81c      	bhi.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a20:	d010      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a26:	d816      	bhi.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01d      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a30:	d111      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2101      	movs	r1, #1
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 ffdd 	bl	80039f8 <RCCEx_PLL2_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a42:	e012      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3324      	adds	r3, #36	; 0x24
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 f886 	bl	8003b5c <RCCEx_PLL3_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a54:	e009      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5a:	e006      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a5c:	bf00      	nop
 8002a5e:	e004      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a60:	bf00      	nop
 8002a62:	e002      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a64:	bf00      	nop
 8002a66:	e000      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d109      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a70:	4b77      	ldr	r3, [pc, #476]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a74:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a7c:	4974      	ldr	r1, [pc, #464]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	650b      	str	r3, [r1, #80]	; 0x50
 8002a82:	e001      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d053      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a9a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002a9e:	d034      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002aa0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002aa4:	d82e      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aaa:	d030      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab0:	d828      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab6:	d02c      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abc:	d822      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002abe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ac2:	d028      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002ac4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ac8:	d81c      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ace:	d010      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad4:	d816      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01f      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ade:	d111      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 ff86 	bl	80039f8 <RCCEx_PLL2_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002af0:	e014      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3324      	adds	r3, #36	; 0x24
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 f82f 	bl	8003b5c <RCCEx_PLL3_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b02:	e00b      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	75fb      	strb	r3, [r7, #23]
      break;
 8002b08:	e008      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e006      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e004      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b12:	bf00      	nop
 8002b14:	e002      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b22:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b30:	4947      	ldr	r1, [pc, #284]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	658b      	str	r3, [r1, #88]	; 0x58
 8002b36:	e001      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d02f      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b50:	d00e      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b56:	d814      	bhi.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d015      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b60:	d10f      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b62:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	4a3a      	ldr	r2, [pc, #232]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b6e:	e00c      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 ff3e 	bl	80039f8 <RCCEx_PLL2_Config>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b80:	e003      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
      break;
 8002b86:	e000      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b90:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9c:	492c      	ldr	r1, [pc, #176]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	650b      	str	r3, [r1, #80]	; 0x50
 8002ba2:	e001      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d032      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d81b      	bhi.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002bbc:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002bfb 	.word	0x08002bfb
 8002bc8:	08002bd5 	.word	0x08002bd5
 8002bcc:	08002be3 	.word	0x08002be3
 8002bd0:	08002bfb 	.word	0x08002bfb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd4:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002be0:	e00c      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2102      	movs	r1, #2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 ff05 	bl	80039f8 <RCCEx_PLL2_Config>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002bf2:	e003      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf8:	e000      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4910      	ldr	r1, [pc, #64]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c14:	e001      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 808a 	beq.w	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c34:	f7fe fa34 	bl	80010a0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c3a:	e00d      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3c:	f7fe fa30 	bl	80010a0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d906      	bls.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	75fb      	strb	r3, [r7, #23]
        break;
 8002c4e:	e009      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002c50:	58024400 	.word	0x58024400
 8002c54:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c58:	4bba      	ldr	r3, [pc, #744]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0eb      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d166      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c6a:	4bb7      	ldr	r3, [pc, #732]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c74:	4053      	eors	r3, r2
 8002c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d013      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c7e:	4bb2      	ldr	r3, [pc, #712]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c86:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c88:	4baf      	ldr	r3, [pc, #700]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	4aae      	ldr	r2, [pc, #696]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c92:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c94:	4bac      	ldr	r3, [pc, #688]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4aab      	ldr	r2, [pc, #684]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ca0:	4aa9      	ldr	r2, [pc, #676]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb0:	d115      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe f9f5 	bl	80010a0 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cb8:	e00b      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe f9f1 	bl	80010a0 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d902      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	75fb      	strb	r3, [r7, #23]
            break;
 8002cd0:	e005      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd2:	4b9d      	ldr	r3, [pc, #628]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ed      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d126      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002cf4:	4b94      	ldr	r3, [pc, #592]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d02:	0919      	lsrs	r1, r3, #4
 8002d04:	4b91      	ldr	r3, [pc, #580]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002d06:	400b      	ands	r3, r1
 8002d08:	498f      	ldr	r1, [pc, #572]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	610b      	str	r3, [r1, #16]
 8002d0e:	e005      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002d10:	4b8d      	ldr	r3, [pc, #564]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	4a8c      	ldr	r2, [pc, #560]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d1a:	6113      	str	r3, [r2, #16]
 8002d1c:	4b8a      	ldr	r3, [pc, #552]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2a:	4987      	ldr	r1, [pc, #540]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	670b      	str	r3, [r1, #112]	; 0x70
 8002d30:	e004      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	75bb      	strb	r3, [r7, #22]
 8002d36:	e001      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d07f      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4e:	2b28      	cmp	r3, #40	; 0x28
 8002d50:	d866      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002d52:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002e27 	.word	0x08002e27
 8002d5c:	08002e21 	.word	0x08002e21
 8002d60:	08002e21 	.word	0x08002e21
 8002d64:	08002e21 	.word	0x08002e21
 8002d68:	08002e21 	.word	0x08002e21
 8002d6c:	08002e21 	.word	0x08002e21
 8002d70:	08002e21 	.word	0x08002e21
 8002d74:	08002e21 	.word	0x08002e21
 8002d78:	08002dfd 	.word	0x08002dfd
 8002d7c:	08002e21 	.word	0x08002e21
 8002d80:	08002e21 	.word	0x08002e21
 8002d84:	08002e21 	.word	0x08002e21
 8002d88:	08002e21 	.word	0x08002e21
 8002d8c:	08002e21 	.word	0x08002e21
 8002d90:	08002e21 	.word	0x08002e21
 8002d94:	08002e21 	.word	0x08002e21
 8002d98:	08002e0f 	.word	0x08002e0f
 8002d9c:	08002e21 	.word	0x08002e21
 8002da0:	08002e21 	.word	0x08002e21
 8002da4:	08002e21 	.word	0x08002e21
 8002da8:	08002e21 	.word	0x08002e21
 8002dac:	08002e21 	.word	0x08002e21
 8002db0:	08002e21 	.word	0x08002e21
 8002db4:	08002e21 	.word	0x08002e21
 8002db8:	08002e27 	.word	0x08002e27
 8002dbc:	08002e21 	.word	0x08002e21
 8002dc0:	08002e21 	.word	0x08002e21
 8002dc4:	08002e21 	.word	0x08002e21
 8002dc8:	08002e21 	.word	0x08002e21
 8002dcc:	08002e21 	.word	0x08002e21
 8002dd0:	08002e21 	.word	0x08002e21
 8002dd4:	08002e21 	.word	0x08002e21
 8002dd8:	08002e27 	.word	0x08002e27
 8002ddc:	08002e21 	.word	0x08002e21
 8002de0:	08002e21 	.word	0x08002e21
 8002de4:	08002e21 	.word	0x08002e21
 8002de8:	08002e21 	.word	0x08002e21
 8002dec:	08002e21 	.word	0x08002e21
 8002df0:	08002e21 	.word	0x08002e21
 8002df4:	08002e21 	.word	0x08002e21
 8002df8:	08002e27 	.word	0x08002e27
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	2101      	movs	r1, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fdf8 	bl	80039f8 <RCCEx_PLL2_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e0c:	e00c      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3324      	adds	r3, #36	; 0x24
 8002e12:	2101      	movs	r1, #1
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fea1 	bl	8003b5c <RCCEx_PLL3_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e1e:	e003      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	75fb      	strb	r3, [r7, #23]
      break;
 8002e24:	e000      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e2e:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e3c:	4942      	ldr	r1, [pc, #264]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	654b      	str	r3, [r1, #84]	; 0x54
 8002e42:	e001      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d038      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d821      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002ea7 	.word	0x08002ea7
 8002e68:	08002e7d 	.word	0x08002e7d
 8002e6c:	08002e8f 	.word	0x08002e8f
 8002e70:	08002ea7 	.word	0x08002ea7
 8002e74:	08002ea7 	.word	0x08002ea7
 8002e78:	08002ea7 	.word	0x08002ea7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fdb8 	bl	80039f8 <RCCEx_PLL2_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e8c:	e00c      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3324      	adds	r3, #36	; 0x24
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fe61 	bl	8003b5c <RCCEx_PLL3_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e9e:	e003      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	f023 0207 	bic.w	r2, r3, #7
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eba:	4923      	ldr	r1, [pc, #140]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	654b      	str	r3, [r1, #84]	; 0x54
 8002ec0:	e001      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d040      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d821      	bhi.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002f27 	.word	0x08002f27
 8002ee8:	08002efd 	.word	0x08002efd
 8002eec:	08002f0f 	.word	0x08002f0f
 8002ef0:	08002f27 	.word	0x08002f27
 8002ef4:	08002f27 	.word	0x08002f27
 8002ef8:	08002f27 	.word	0x08002f27
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3304      	adds	r3, #4
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fd78 	bl	80039f8 <RCCEx_PLL2_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f0c:	e00c      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3324      	adds	r3, #36	; 0x24
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fe21 	bl	8003b5c <RCCEx_PLL3_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f1e:	e003      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	75fb      	strb	r3, [r7, #23]
      break;
 8002f24:	e000      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d110      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	f023 0207 	bic.w	r2, r3, #7
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f3c:	4902      	ldr	r1, [pc, #8]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	658b      	str	r3, [r1, #88]	; 0x58
 8002f42:	e007      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002f44:	58024800 	.word	0x58024800
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d04b      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f6a:	d02e      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f70:	d828      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f76:	d02a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d822      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002f7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f82:	d026      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002f84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f88:	d81c      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f94:	d816      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01d      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f9e:	d111      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fd26 	bl	80039f8 <RCCEx_PLL2_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fb0:	e012      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3324      	adds	r3, #36	; 0x24
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fdcf 	bl	8003b5c <RCCEx_PLL3_Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fc2:	e009      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc8:	e006      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e004      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e002      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fde:	4bb3      	ldr	r3, [pc, #716]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fec:	49af      	ldr	r1, [pc, #700]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	654b      	str	r3, [r1, #84]	; 0x54
 8002ff2:	e001      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d04b      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800300a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800300e:	d02e      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003010:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003014:	d828      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	d02a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	d822      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003022:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003026:	d026      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003028:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800302c:	d81c      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800302e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003032:	d010      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003038:	d816      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01d      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800303e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003042:	d111      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fcd4 	bl	80039f8 <RCCEx_PLL2_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003054:	e012      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3324      	adds	r3, #36	; 0x24
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fd7d 	bl	8003b5c <RCCEx_PLL3_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003066:	e009      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	75fb      	strb	r3, [r7, #23]
      break;
 800306c:	e006      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800306e:	bf00      	nop
 8003070:	e004      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003072:	bf00      	nop
 8003074:	e002      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003076:	bf00      	nop
 8003078:	e000      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800307a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003082:	4b8a      	ldr	r3, [pc, #552]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003090:	4986      	ldr	r1, [pc, #536]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003092:	4313      	orrs	r3, r2
 8003094:	658b      	str	r3, [r1, #88]	; 0x58
 8003096:	e001      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d04b      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030b2:	d02e      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80030b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030b8:	d828      	bhi.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030be:	d02a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80030c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c4:	d822      	bhi.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030ca:	d026      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80030cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030d0:	d81c      	bhi.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d6:	d010      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80030d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030dc:	d816      	bhi.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01d      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80030e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e6:	d111      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fc82 	bl	80039f8 <RCCEx_PLL2_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80030f8:	e012      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3324      	adds	r3, #36	; 0x24
 80030fe:	2102      	movs	r1, #2
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fd2b 	bl	8003b5c <RCCEx_PLL3_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800310a:	e009      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	75fb      	strb	r3, [r7, #23]
      break;
 8003110:	e006      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003112:	bf00      	nop
 8003114:	e004      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003116:	bf00      	nop
 8003118:	e002      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800311e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003126:	4b61      	ldr	r3, [pc, #388]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003134:	495d      	ldr	r1, [pc, #372]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003136:	4313      	orrs	r3, r2
 8003138:	658b      	str	r3, [r1, #88]	; 0x58
 800313a:	e001      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003156:	d10a      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3324      	adds	r3, #36	; 0x24
 800315c:	2102      	movs	r1, #2
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fcfc 	bl	8003b5c <RCCEx_PLL3_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800316e:	4b4f      	ldr	r3, [pc, #316]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	494b      	ldr	r1, [pc, #300]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800317e:	4313      	orrs	r3, r2
 8003180:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003198:	d10a      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3324      	adds	r3, #36	; 0x24
 800319e:	2102      	movs	r1, #2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fcdb 	bl	8003b5c <RCCEx_PLL3_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031b0:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031be:	493b      	ldr	r1, [pc, #236]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d034      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031da:	d01d      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80031dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031e0:	d817      	bhi.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80031e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ea:	d009      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80031ec:	e011      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3304      	adds	r3, #4
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fbff 	bl	80039f8 <RCCEx_PLL2_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80031fe:	e00c      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3324      	adds	r3, #36	; 0x24
 8003204:	2102      	movs	r1, #2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fca8 	bl	8003b5c <RCCEx_PLL3_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003210:	e003      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
      break;
 8003216:	e000      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10a      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003220:	4b22      	ldr	r3, [pc, #136]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800322e:	491f      	ldr	r1, [pc, #124]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003230:	4313      	orrs	r3, r2
 8003232:	658b      	str	r3, [r1, #88]	; 0x58
 8003234:	e001      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d036      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800324c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003250:	d01c      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003252:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003256:	d816      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003258:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800325c:	d003      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800325e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003262:	d007      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003264:	e00f      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	4a10      	ldr	r2, [pc, #64]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800326c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003270:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003272:	e00c      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3324      	adds	r3, #36	; 0x24
 8003278:	2101      	movs	r1, #1
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fc6e 	bl	8003b5c <RCCEx_PLL3_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003284:	e003      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
      break;
 800328a:	e000      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800328c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800328e:	7dfb      	ldrb	r3, [r7, #23]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10d      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a2:	4902      	ldr	r1, [pc, #8]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	654b      	str	r3, [r1, #84]	; 0x54
 80032a8:	e004      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80032aa:	bf00      	nop
 80032ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d029      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d007      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80032ce:	e00f      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d0:	4b69      	ldr	r3, [pc, #420]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	4a68      	ldr	r2, [pc, #416]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80032dc:	e00b      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2102      	movs	r1, #2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fb87 	bl	80039f8 <RCCEx_PLL2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80032ee:	e002      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	75fb      	strb	r3, [r7, #23]
      break;
 80032f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80032fc:	4b5e      	ldr	r3, [pc, #376]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	495b      	ldr	r1, [pc, #364]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800330a:	4313      	orrs	r3, r2
 800330c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800330e:	e001      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3324      	adds	r3, #36	; 0x24
 8003324:	2102      	movs	r1, #2
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fc18 	bl	8003b5c <RCCEx_PLL3_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d032      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334c:	d017      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800334e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003352:	d811      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003358:	d013      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800335a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335e:	d80b      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d010      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003368:	d106      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800336a:	4b43      	ldr	r3, [pc, #268]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	4a42      	ldr	r2, [pc, #264]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003374:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003376:	e007      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	75fb      	strb	r3, [r7, #23]
      break;
 800337c:	e004      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800338e:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339c:	4936      	ldr	r1, [pc, #216]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	654b      	str	r3, [r1, #84]	; 0x54
 80033a2:	e001      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033b4:	4b30      	ldr	r3, [pc, #192]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c0:	492d      	ldr	r1, [pc, #180]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033d2:	4b29      	ldr	r3, [pc, #164]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033de:	4926      	ldr	r1, [pc, #152]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80033f0:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	491e      	ldr	r1, [pc, #120]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	4a19      	ldr	r2, [pc, #100]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003414:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003418:	6113      	str	r3, [r2, #16]
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003424:	4914      	ldr	r1, [pc, #80]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003426:	4313      	orrs	r3, r2
 8003428:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	da08      	bge.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343e:	490e      	ldr	r1, [pc, #56]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003440:	4313      	orrs	r3, r2
 8003442:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	4906      	ldr	r1, [pc, #24]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003460:	4313      	orrs	r3, r2
 8003462:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003464:	7dbb      	ldrb	r3, [r7, #22]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	58024400 	.word	0x58024400

0800347c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003480:	f7ff f852 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4904      	ldr	r1, [pc, #16]	; (80034a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	58024400 	.word	0x58024400
 80034a4:	08008d8c 	.word	0x08008d8c

080034a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034b0:	4ba1      	ldr	r3, [pc, #644]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80034ba:	4b9f      	ldr	r3, [pc, #636]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	0b1b      	lsrs	r3, r3, #12
 80034c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80034c6:	4b9c      	ldr	r3, [pc, #624]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034d2:	4b99      	ldr	r3, [pc, #612]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	08db      	lsrs	r3, r3, #3
 80034d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	fb02 f303 	mul.w	r3, r2, r3
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8111 	beq.w	8003718 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	f000 8083 	beq.w	8003604 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b02      	cmp	r3, #2
 8003502:	f200 80a1 	bhi.w	8003648 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d056      	beq.n	80035c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003512:	e099      	b.n	8003648 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003514:	4b88      	ldr	r3, [pc, #544]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d02d      	beq.n	800357c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003520:	4b85      	ldr	r3, [pc, #532]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	08db      	lsrs	r3, r3, #3
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	4a84      	ldr	r2, [pc, #528]	; (800373c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
 8003530:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800354a:	4b7b      	ldr	r3, [pc, #492]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800355a:	ed97 6a03 	vldr	s12, [r7, #12]
 800355e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800356a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800356e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003576:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800357a:	e087      	b.n	800368c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003586:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003744 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800358a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800358e:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359e:	ed97 6a03 	vldr	s12, [r7, #12]
 80035a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035be:	e065      	b.n	800368c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	ee07 3a90 	vmov	s15, r3
 80035c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003748 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80035ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d2:	4b59      	ldr	r3, [pc, #356]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80035e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003602:	e043      	b.n	800368c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	ee07 3a90 	vmov	s15, r3
 800360a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800374c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003616:	4b48      	ldr	r3, [pc, #288]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003626:	ed97 6a03 	vldr	s12, [r7, #12]
 800362a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800362e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800363a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800363e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003646:	e021      	b.n	800368c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003652:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003748 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800365a:	4b37      	ldr	r3, [pc, #220]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800366a:	ed97 6a03 	vldr	s12, [r7, #12]
 800366e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800367a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800367e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800368a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800368c:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	0a5b      	lsrs	r3, r3, #9
 8003692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80036aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036b2:	ee17 2a90 	vmov	r2, s15
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036ba:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	0c1b      	lsrs	r3, r3, #16
 80036c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80036d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036e0:	ee17 2a90 	vmov	r2, s15
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	0e1b      	lsrs	r3, r3, #24
 80036ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003702:	edd7 6a07 	vldr	s13, [r7, #28]
 8003706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800370a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800370e:	ee17 2a90 	vmov	r2, s15
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003716:	e008      	b.n	800372a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
}
 800372a:	bf00      	nop
 800372c:	3724      	adds	r7, #36	; 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	58024400 	.word	0x58024400
 800373c:	03d09000 	.word	0x03d09000
 8003740:	46000000 	.word	0x46000000
 8003744:	4c742400 	.word	0x4c742400
 8003748:	4a742400 	.word	0x4a742400
 800374c:	4af42400 	.word	0x4af42400

08003750 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	; 0x24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003758:	4ba1      	ldr	r3, [pc, #644]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003762:	4b9f      	ldr	r3, [pc, #636]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	0d1b      	lsrs	r3, r3, #20
 8003768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800376c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800376e:	4b9c      	ldr	r3, [pc, #624]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800377a:	4b99      	ldr	r3, [pc, #612]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	08db      	lsrs	r3, r3, #3
 8003780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003792:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8111 	beq.w	80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	f000 8083 	beq.w	80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	f200 80a1 	bhi.w	80038f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d056      	beq.n	8003868 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80037ba:	e099      	b.n	80038f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037bc:	4b88      	ldr	r3, [pc, #544]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d02d      	beq.n	8003824 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037c8:	4b85      	ldr	r3, [pc, #532]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	08db      	lsrs	r3, r3, #3
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	4a84      	ldr	r2, [pc, #528]	; (80039e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
 80037d8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f2:	4b7b      	ldr	r3, [pc, #492]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003802:	ed97 6a03 	vldr	s12, [r7, #12]
 8003806:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800380a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003822:	e087      	b.n	8003934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003836:	4b6a      	ldr	r3, [pc, #424]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003846:	ed97 6a03 	vldr	s12, [r7, #12]
 800384a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800384e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800385a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003862:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003866:	e065      	b.n	8003934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003872:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387a:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800388a:	ed97 6a03 	vldr	s12, [r7, #12]
 800388e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800389a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800389e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038aa:	e043      	b.n	8003934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80038ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038be:	4b48      	ldr	r3, [pc, #288]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80038d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ee:	e021      	b.n	8003934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80038fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003902:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003912:	ed97 6a03 	vldr	s12, [r7, #12]
 8003916:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800391a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003932:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003934:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	0a5b      	lsrs	r3, r3, #9
 800393a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800394a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800394e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800395a:	ee17 2a90 	vmov	r2, s15
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003962:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003978:	ee37 7a87 	vadd.f32	s14, s15, s14
 800397c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003988:	ee17 2a90 	vmov	r2, s15
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003990:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	0e1b      	lsrs	r3, r3, #24
 8003996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039b6:	ee17 2a90 	vmov	r2, s15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80039be:	e008      	b.n	80039d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
}
 80039d2:	bf00      	nop
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	58024400 	.word	0x58024400
 80039e4:	03d09000 	.word	0x03d09000
 80039e8:	46000000 	.word	0x46000000
 80039ec:	4c742400 	.word	0x4c742400
 80039f0:	4a742400 	.word	0x4a742400
 80039f4:	4af42400 	.word	0x4af42400

080039f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a06:	4b53      	ldr	r3, [pc, #332]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d101      	bne.n	8003a16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e099      	b.n	8003b4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a16:	4b4f      	ldr	r3, [pc, #316]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a4e      	ldr	r2, [pc, #312]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003a1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a22:	f7fd fb3d 	bl	80010a0 <HAL_GetTick>
 8003a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a28:	e008      	b.n	8003a3c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a2a:	f7fd fb39 	bl	80010a0 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e086      	b.n	8003b4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a3c:	4b45      	ldr	r3, [pc, #276]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a48:	4b42      	ldr	r3, [pc, #264]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	031b      	lsls	r3, r3, #12
 8003a56:	493f      	ldr	r1, [pc, #252]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	628b      	str	r3, [r1, #40]	; 0x28
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	025b      	lsls	r3, r3, #9
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	061b      	lsls	r3, r3, #24
 8003a88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a8c:	4931      	ldr	r1, [pc, #196]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a92:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	492d      	ldr	r1, [pc, #180]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	f023 0220 	bic.w	r2, r3, #32
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	4928      	ldr	r1, [pc, #160]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ab6:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	4a26      	ldr	r2, [pc, #152]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003abc:	f023 0310 	bic.w	r3, r3, #16
 8003ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ac2:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac6:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <RCCEx_PLL2_Config+0x160>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	69d2      	ldr	r2, [r2, #28]
 8003ace:	00d2      	lsls	r2, r2, #3
 8003ad0:	4920      	ldr	r1, [pc, #128]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ad6:	4b1f      	ldr	r3, [pc, #124]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003adc:	f043 0310 	orr.w	r3, r3, #16
 8003ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	4a19      	ldr	r2, [pc, #100]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003aee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003af2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003af4:	e00f      	b.n	8003b16 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d106      	bne.n	8003b0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003afc:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b08:	e005      	b.n	8003b16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003b16:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003b1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b22:	f7fd fabd 	bl	80010a0 <HAL_GetTick>
 8003b26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b28:	e008      	b.n	8003b3c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b2a:	f7fd fab9 	bl	80010a0 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e006      	b.n	8003b4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <RCCEx_PLL2_Config+0x15c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	58024400 	.word	0x58024400
 8003b58:	ffff0007 	.word	0xffff0007

08003b5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b6a:	4b53      	ldr	r3, [pc, #332]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d101      	bne.n	8003b7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e099      	b.n	8003cae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b7a:	4b4f      	ldr	r3, [pc, #316]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a4e      	ldr	r2, [pc, #312]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b86:	f7fd fa8b 	bl	80010a0 <HAL_GetTick>
 8003b8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b8e:	f7fd fa87 	bl	80010a0 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e086      	b.n	8003cae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ba0:	4b45      	ldr	r3, [pc, #276]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003bac:	4b42      	ldr	r3, [pc, #264]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	051b      	lsls	r3, r3, #20
 8003bba:	493f      	ldr	r1, [pc, #252]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	628b      	str	r3, [r1, #40]	; 0x28
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	025b      	lsls	r3, r3, #9
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	061b      	lsls	r3, r3, #24
 8003bec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bf0:	4931      	ldr	r1, [pc, #196]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003bf6:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	492d      	ldr	r1, [pc, #180]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003c08:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	4928      	ldr	r1, [pc, #160]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003c1a:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	4a26      	ldr	r2, [pc, #152]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c2a:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <RCCEx_PLL3_Config+0x160>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	69d2      	ldr	r2, [r2, #28]
 8003c32:	00d2      	lsls	r2, r2, #3
 8003c34:	4920      	ldr	r1, [pc, #128]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c58:	e00f      	b.n	8003c7a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d106      	bne.n	8003c6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c60:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c6c:	e005      	b.n	8003c7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	4a11      	ldr	r2, [pc, #68]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c86:	f7fd fa0b 	bl	80010a0 <HAL_GetTick>
 8003c8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c8c:	e008      	b.n	8003ca0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c8e:	f7fd fa07 	bl	80010a0 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e006      	b.n	8003cae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <RCCEx_PLL3_Config+0x15c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	ffff0007 	.word	0xffff0007

08003cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e049      	b.n	8003d66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f841 	bl	8003d6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f000 fa00 	bl	8004104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d001      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e054      	b.n	8003e46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d022      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x80>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc6:	d01d      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x80>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d018      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x80>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a21      	ldr	r2, [pc, #132]	; (8003e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x80>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x80>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1e      	ldr	r2, [pc, #120]	; (8003e64 <HAL_TIM_Base_Start_IT+0xe0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x80>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1c      	ldr	r2, [pc, #112]	; (8003e68 <HAL_TIM_Base_Start_IT+0xe4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x80>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1b      	ldr	r2, [pc, #108]	; (8003e6c <HAL_TIM_Base_Start_IT+0xe8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d115      	bne.n	8003e30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <HAL_TIM_Base_Start_IT+0xec>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b06      	cmp	r3, #6
 8003e14:	d015      	beq.n	8003e42 <HAL_TIM_Base_Start_IT+0xbe>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d011      	beq.n	8003e42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2e:	e008      	b.n	8003e42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e000      	b.n	8003e44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40010400 	.word	0x40010400
 8003e68:	40001800 	.word	0x40001800
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	00010007 	.word	0x00010007

08003e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0202 	mvn.w	r2, #2
 8003ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f905 	bl	80040c6 <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8f7 	bl	80040b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f908 	bl	80040da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d122      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d11b      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0204 	mvn.w	r2, #4
 8003ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8db 	bl	80040c6 <HAL_TIM_IC_CaptureCallback>
 8003f10:	e005      	b.n	8003f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f8cd 	bl	80040b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f8de 	bl	80040da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d122      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d11b      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0208 	mvn.w	r2, #8
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f8b1 	bl	80040c6 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8a3 	bl	80040b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f8b4 	bl	80040da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d122      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d11b      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0210 	mvn.w	r2, #16
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f887 	bl	80040c6 <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f879 	bl	80040b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f88a 	bl	80040da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0201 	mvn.w	r2, #1
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc fd00 	bl	80009f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b80      	cmp	r3, #128	; 0x80
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f914 	bl	800424c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004032:	d10e      	bne.n	8004052 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b80      	cmp	r3, #128	; 0x80
 8004040:	d107      	bne.n	8004052 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800404a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f907 	bl	8004260 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d10e      	bne.n	800407e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406a:	2b40      	cmp	r3, #64	; 0x40
 800406c:	d107      	bne.n	800407e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f838 	bl	80040ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b20      	cmp	r3, #32
 800408a:	d10e      	bne.n	80040aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b20      	cmp	r3, #32
 8004098:	d107      	bne.n	80040aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0220 	mvn.w	r2, #32
 80040a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f8c7 	bl	8004238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a40      	ldr	r2, [pc, #256]	; (8004218 <TIM_Base_SetConfig+0x114>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004122:	d00f      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3d      	ldr	r2, [pc, #244]	; (800421c <TIM_Base_SetConfig+0x118>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00b      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a3c      	ldr	r2, [pc, #240]	; (8004220 <TIM_Base_SetConfig+0x11c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d007      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a3b      	ldr	r2, [pc, #236]	; (8004224 <TIM_Base_SetConfig+0x120>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a3a      	ldr	r2, [pc, #232]	; (8004228 <TIM_Base_SetConfig+0x124>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d108      	bne.n	8004156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2f      	ldr	r2, [pc, #188]	; (8004218 <TIM_Base_SetConfig+0x114>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01f      	beq.n	800419e <TIM_Base_SetConfig+0x9a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d01b      	beq.n	800419e <TIM_Base_SetConfig+0x9a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2c      	ldr	r2, [pc, #176]	; (800421c <TIM_Base_SetConfig+0x118>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d017      	beq.n	800419e <TIM_Base_SetConfig+0x9a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2b      	ldr	r2, [pc, #172]	; (8004220 <TIM_Base_SetConfig+0x11c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <TIM_Base_SetConfig+0x9a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <TIM_Base_SetConfig+0x120>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00f      	beq.n	800419e <TIM_Base_SetConfig+0x9a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a29      	ldr	r2, [pc, #164]	; (8004228 <TIM_Base_SetConfig+0x124>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_Base_SetConfig+0x9a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a28      	ldr	r2, [pc, #160]	; (800422c <TIM_Base_SetConfig+0x128>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <TIM_Base_SetConfig+0x9a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a27      	ldr	r2, [pc, #156]	; (8004230 <TIM_Base_SetConfig+0x12c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_Base_SetConfig+0x9a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a26      	ldr	r2, [pc, #152]	; (8004234 <TIM_Base_SetConfig+0x130>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d108      	bne.n	80041b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a10      	ldr	r2, [pc, #64]	; (8004218 <TIM_Base_SetConfig+0x114>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00f      	beq.n	80041fc <TIM_Base_SetConfig+0xf8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <TIM_Base_SetConfig+0x124>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00b      	beq.n	80041fc <TIM_Base_SetConfig+0xf8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a11      	ldr	r2, [pc, #68]	; (800422c <TIM_Base_SetConfig+0x128>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d007      	beq.n	80041fc <TIM_Base_SetConfig+0xf8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a10      	ldr	r2, [pc, #64]	; (8004230 <TIM_Base_SetConfig+0x12c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_Base_SetConfig+0xf8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0f      	ldr	r2, [pc, #60]	; (8004234 <TIM_Base_SetConfig+0x130>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	615a      	str	r2, [r3, #20]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40010000 	.word	0x40010000
 800421c:	40000400 	.word	0x40000400
 8004220:	40000800 	.word	0x40000800
 8004224:	40000c00 	.word	0x40000c00
 8004228:	40010400 	.word	0x40010400
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800

08004238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e042      	b.n	800430c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fc fe19 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2224      	movs	r2, #36	; 0x24
 80042a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f996 	bl	80045e8 <UART_SetConfig>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e022      	b.n	800430c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 ffe8 	bl	80052a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f001 f86f 	bl	80053e8 <UART_CheckIdleState>
 800430a:	4603      	mov	r3, r0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432a:	2b20      	cmp	r3, #32
 800432c:	f040 8083 	bne.w	8004436 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_UART_Transmit+0x28>
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e07b      	b.n	8004438 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_UART_Transmit+0x3a>
 800434a:	2302      	movs	r3, #2
 800434c:	e074      	b.n	8004438 <HAL_UART_Transmit+0x124>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2221      	movs	r2, #33	; 0x21
 8004362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004366:	f7fc fe9b 	bl	80010a0 <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88fa      	ldrh	r2, [r7, #6]
 8004370:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004384:	d108      	bne.n	8004398 <HAL_UART_Transmit+0x84>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	e003      	b.n	80043a0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80043a8:	e02c      	b.n	8004404 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2180      	movs	r1, #128	; 0x80
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f001 f862 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e039      	b.n	8004438 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	3302      	adds	r3, #2
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	e007      	b.n	80043f2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1cc      	bne.n	80043aa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2200      	movs	r2, #0
 8004418:	2140      	movs	r1, #64	; 0x40
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f001 f82f 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e006      	b.n	8004438 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e000      	b.n	8004438 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004436:	2302      	movs	r3, #2
  }
}
 8004438:	4618      	mov	r0, r3
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	2b20      	cmp	r3, #32
 8004458:	f040 80c0 	bne.w	80045dc <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_UART_Receive+0x28>
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0b8      	b.n	80045de <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_UART_Receive+0x3a>
 8004476:	2302      	movs	r3, #2
 8004478:	e0b1      	b.n	80045de <HAL_UART_Receive+0x19e>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2222      	movs	r2, #34	; 0x22
 800448e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004498:	f7fc fe02 	bl	80010a0 <HAL_GetTick>
 800449c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	88fa      	ldrh	r2, [r7, #6]
 80044a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b6:	d10e      	bne.n	80044d6 <HAL_UART_Receive+0x96>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <HAL_UART_Receive+0x8c>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044ca:	e02d      	b.n	8004528 <HAL_UART_Receive+0xe8>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	22ff      	movs	r2, #255	; 0xff
 80044d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044d4:	e028      	b.n	8004528 <HAL_UART_Receive+0xe8>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <HAL_UART_Receive+0xba>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d104      	bne.n	80044f0 <HAL_UART_Receive+0xb0>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	22ff      	movs	r2, #255	; 0xff
 80044ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044ee:	e01b      	b.n	8004528 <HAL_UART_Receive+0xe8>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	227f      	movs	r2, #127	; 0x7f
 80044f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044f8:	e016      	b.n	8004528 <HAL_UART_Receive+0xe8>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004502:	d10d      	bne.n	8004520 <HAL_UART_Receive+0xe0>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d104      	bne.n	8004516 <HAL_UART_Receive+0xd6>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	227f      	movs	r2, #127	; 0x7f
 8004510:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004514:	e008      	b.n	8004528 <HAL_UART_Receive+0xe8>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	223f      	movs	r2, #63	; 0x3f
 800451a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800451e:	e003      	b.n	8004528 <HAL_UART_Receive+0xe8>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800452e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004538:	d108      	bne.n	800454c <HAL_UART_Receive+0x10c>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	e003      	b.n	8004554 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800455c:	e032      	b.n	80045c4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	2120      	movs	r1, #32
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 ff88 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e032      	b.n	80045de <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10c      	bne.n	8004598 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	b29a      	uxth	r2, r3
 8004586:	8a7b      	ldrh	r3, [r7, #18]
 8004588:	4013      	ands	r3, r2
 800458a:	b29a      	uxth	r2, r3
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	3302      	adds	r3, #2
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e00c      	b.n	80045b2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	8a7b      	ldrh	r3, [r7, #18]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	4013      	ands	r3, r2
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	3301      	adds	r3, #1
 80045b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1c6      	bne.n	800455e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	e000      	b.n	80045de <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80045dc:	2302      	movs	r3, #2
  }
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e8:	b5b0      	push	{r4, r5, r7, lr}
 80045ea:	b08e      	sub	sp, #56	; 0x38
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	4313      	orrs	r3, r2
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4bbf      	ldr	r3, [pc, #764]	; (8004914 <UART_SetConfig+0x32c>)
 8004616:	4013      	ands	r3, r2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800461e:	430b      	orrs	r3, r1
 8004620:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4ab5      	ldr	r2, [pc, #724]	; (8004918 <UART_SetConfig+0x330>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800464e:	4313      	orrs	r3, r2
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	4bb0      	ldr	r3, [pc, #704]	; (800491c <UART_SetConfig+0x334>)
 800465a:	4013      	ands	r3, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004662:	430b      	orrs	r3, r1
 8004664:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	f023 010f 	bic.w	r1, r3, #15
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4aa7      	ldr	r2, [pc, #668]	; (8004920 <UART_SetConfig+0x338>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d176      	bne.n	8004774 <UART_SetConfig+0x18c>
 8004686:	4ba7      	ldr	r3, [pc, #668]	; (8004924 <UART_SetConfig+0x33c>)
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800468e:	2b28      	cmp	r3, #40	; 0x28
 8004690:	d86c      	bhi.n	800476c <UART_SetConfig+0x184>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0xb0>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	0800473d 	.word	0x0800473d
 800469c:	0800476d 	.word	0x0800476d
 80046a0:	0800476d 	.word	0x0800476d
 80046a4:	0800476d 	.word	0x0800476d
 80046a8:	0800476d 	.word	0x0800476d
 80046ac:	0800476d 	.word	0x0800476d
 80046b0:	0800476d 	.word	0x0800476d
 80046b4:	0800476d 	.word	0x0800476d
 80046b8:	08004745 	.word	0x08004745
 80046bc:	0800476d 	.word	0x0800476d
 80046c0:	0800476d 	.word	0x0800476d
 80046c4:	0800476d 	.word	0x0800476d
 80046c8:	0800476d 	.word	0x0800476d
 80046cc:	0800476d 	.word	0x0800476d
 80046d0:	0800476d 	.word	0x0800476d
 80046d4:	0800476d 	.word	0x0800476d
 80046d8:	0800474d 	.word	0x0800474d
 80046dc:	0800476d 	.word	0x0800476d
 80046e0:	0800476d 	.word	0x0800476d
 80046e4:	0800476d 	.word	0x0800476d
 80046e8:	0800476d 	.word	0x0800476d
 80046ec:	0800476d 	.word	0x0800476d
 80046f0:	0800476d 	.word	0x0800476d
 80046f4:	0800476d 	.word	0x0800476d
 80046f8:	08004755 	.word	0x08004755
 80046fc:	0800476d 	.word	0x0800476d
 8004700:	0800476d 	.word	0x0800476d
 8004704:	0800476d 	.word	0x0800476d
 8004708:	0800476d 	.word	0x0800476d
 800470c:	0800476d 	.word	0x0800476d
 8004710:	0800476d 	.word	0x0800476d
 8004714:	0800476d 	.word	0x0800476d
 8004718:	0800475d 	.word	0x0800475d
 800471c:	0800476d 	.word	0x0800476d
 8004720:	0800476d 	.word	0x0800476d
 8004724:	0800476d 	.word	0x0800476d
 8004728:	0800476d 	.word	0x0800476d
 800472c:	0800476d 	.word	0x0800476d
 8004730:	0800476d 	.word	0x0800476d
 8004734:	0800476d 	.word	0x0800476d
 8004738:	08004765 	.word	0x08004765
 800473c:	2301      	movs	r3, #1
 800473e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004742:	e326      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800474a:	e322      	b.n	8004d92 <UART_SetConfig+0x7aa>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004752:	e31e      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800475a:	e31a      	b.n	8004d92 <UART_SetConfig+0x7aa>
 800475c:	2320      	movs	r3, #32
 800475e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004762:	e316      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004764:	2340      	movs	r3, #64	; 0x40
 8004766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800476a:	e312      	b.n	8004d92 <UART_SetConfig+0x7aa>
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004772:	e30e      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6b      	ldr	r2, [pc, #428]	; (8004928 <UART_SetConfig+0x340>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d130      	bne.n	80047e0 <UART_SetConfig+0x1f8>
 800477e:	4b69      	ldr	r3, [pc, #420]	; (8004924 <UART_SetConfig+0x33c>)
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	2b05      	cmp	r3, #5
 8004788:	d826      	bhi.n	80047d8 <UART_SetConfig+0x1f0>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x1a8>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047a9 	.word	0x080047a9
 8004794:	080047b1 	.word	0x080047b1
 8004798:	080047b9 	.word	0x080047b9
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ae:	e2f0      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80047b0:	2304      	movs	r3, #4
 80047b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047b6:	e2ec      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80047b8:	2308      	movs	r3, #8
 80047ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047be:	e2e8      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80047c0:	2310      	movs	r3, #16
 80047c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047c6:	e2e4      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80047c8:	2320      	movs	r3, #32
 80047ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ce:	e2e0      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80047d0:	2340      	movs	r3, #64	; 0x40
 80047d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047d6:	e2dc      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047de:	e2d8      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a51      	ldr	r2, [pc, #324]	; (800492c <UART_SetConfig+0x344>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d130      	bne.n	800484c <UART_SetConfig+0x264>
 80047ea:	4b4e      	ldr	r3, [pc, #312]	; (8004924 <UART_SetConfig+0x33c>)
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d826      	bhi.n	8004844 <UART_SetConfig+0x25c>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x214>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004815 	.word	0x08004815
 8004800:	0800481d 	.word	0x0800481d
 8004804:	08004825 	.word	0x08004825
 8004808:	0800482d 	.word	0x0800482d
 800480c:	08004835 	.word	0x08004835
 8004810:	0800483d 	.word	0x0800483d
 8004814:	2300      	movs	r3, #0
 8004816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800481a:	e2ba      	b.n	8004d92 <UART_SetConfig+0x7aa>
 800481c:	2304      	movs	r3, #4
 800481e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004822:	e2b6      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004824:	2308      	movs	r3, #8
 8004826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800482a:	e2b2      	b.n	8004d92 <UART_SetConfig+0x7aa>
 800482c:	2310      	movs	r3, #16
 800482e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004832:	e2ae      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004834:	2320      	movs	r3, #32
 8004836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800483a:	e2aa      	b.n	8004d92 <UART_SetConfig+0x7aa>
 800483c:	2340      	movs	r3, #64	; 0x40
 800483e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004842:	e2a6      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800484a:	e2a2      	b.n	8004d92 <UART_SetConfig+0x7aa>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a37      	ldr	r2, [pc, #220]	; (8004930 <UART_SetConfig+0x348>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d130      	bne.n	80048b8 <UART_SetConfig+0x2d0>
 8004856:	4b33      	ldr	r3, [pc, #204]	; (8004924 <UART_SetConfig+0x33c>)
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	2b05      	cmp	r3, #5
 8004860:	d826      	bhi.n	80048b0 <UART_SetConfig+0x2c8>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x280>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004881 	.word	0x08004881
 800486c:	08004889 	.word	0x08004889
 8004870:	08004891 	.word	0x08004891
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a9 	.word	0x080048a9
 8004880:	2300      	movs	r3, #0
 8004882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004886:	e284      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004888:	2304      	movs	r3, #4
 800488a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800488e:	e280      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004890:	2308      	movs	r3, #8
 8004892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004896:	e27c      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004898:	2310      	movs	r3, #16
 800489a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800489e:	e278      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80048a0:	2320      	movs	r3, #32
 80048a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048a6:	e274      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80048a8:	2340      	movs	r3, #64	; 0x40
 80048aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ae:	e270      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048b6:	e26c      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1d      	ldr	r2, [pc, #116]	; (8004934 <UART_SetConfig+0x34c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d142      	bne.n	8004948 <UART_SetConfig+0x360>
 80048c2:	4b18      	ldr	r3, [pc, #96]	; (8004924 <UART_SetConfig+0x33c>)
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	2b05      	cmp	r3, #5
 80048cc:	d838      	bhi.n	8004940 <UART_SetConfig+0x358>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x2ec>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	080048ed 	.word	0x080048ed
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	080048fd 	.word	0x080048fd
 80048e0:	08004905 	.word	0x08004905
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	08004939 	.word	0x08004939
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048f2:	e24e      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80048f4:	2304      	movs	r3, #4
 80048f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048fa:	e24a      	b.n	8004d92 <UART_SetConfig+0x7aa>
 80048fc:	2308      	movs	r3, #8
 80048fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004902:	e246      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004904:	2310      	movs	r3, #16
 8004906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800490a:	e242      	b.n	8004d92 <UART_SetConfig+0x7aa>
 800490c:	2320      	movs	r3, #32
 800490e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004912:	e23e      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004914:	cfff69f3 	.word	0xcfff69f3
 8004918:	58000c00 	.word	0x58000c00
 800491c:	11fff4ff 	.word	0x11fff4ff
 8004920:	40011000 	.word	0x40011000
 8004924:	58024400 	.word	0x58024400
 8004928:	40004400 	.word	0x40004400
 800492c:	40004800 	.word	0x40004800
 8004930:	40004c00 	.word	0x40004c00
 8004934:	40005000 	.word	0x40005000
 8004938:	2340      	movs	r3, #64	; 0x40
 800493a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800493e:	e228      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004946:	e224      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4ab1      	ldr	r2, [pc, #708]	; (8004c14 <UART_SetConfig+0x62c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d176      	bne.n	8004a40 <UART_SetConfig+0x458>
 8004952:	4bb1      	ldr	r3, [pc, #708]	; (8004c18 <UART_SetConfig+0x630>)
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800495a:	2b28      	cmp	r3, #40	; 0x28
 800495c:	d86c      	bhi.n	8004a38 <UART_SetConfig+0x450>
 800495e:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <UART_SetConfig+0x37c>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	08004a09 	.word	0x08004a09
 8004968:	08004a39 	.word	0x08004a39
 800496c:	08004a39 	.word	0x08004a39
 8004970:	08004a39 	.word	0x08004a39
 8004974:	08004a39 	.word	0x08004a39
 8004978:	08004a39 	.word	0x08004a39
 800497c:	08004a39 	.word	0x08004a39
 8004980:	08004a39 	.word	0x08004a39
 8004984:	08004a11 	.word	0x08004a11
 8004988:	08004a39 	.word	0x08004a39
 800498c:	08004a39 	.word	0x08004a39
 8004990:	08004a39 	.word	0x08004a39
 8004994:	08004a39 	.word	0x08004a39
 8004998:	08004a39 	.word	0x08004a39
 800499c:	08004a39 	.word	0x08004a39
 80049a0:	08004a39 	.word	0x08004a39
 80049a4:	08004a19 	.word	0x08004a19
 80049a8:	08004a39 	.word	0x08004a39
 80049ac:	08004a39 	.word	0x08004a39
 80049b0:	08004a39 	.word	0x08004a39
 80049b4:	08004a39 	.word	0x08004a39
 80049b8:	08004a39 	.word	0x08004a39
 80049bc:	08004a39 	.word	0x08004a39
 80049c0:	08004a39 	.word	0x08004a39
 80049c4:	08004a21 	.word	0x08004a21
 80049c8:	08004a39 	.word	0x08004a39
 80049cc:	08004a39 	.word	0x08004a39
 80049d0:	08004a39 	.word	0x08004a39
 80049d4:	08004a39 	.word	0x08004a39
 80049d8:	08004a39 	.word	0x08004a39
 80049dc:	08004a39 	.word	0x08004a39
 80049e0:	08004a39 	.word	0x08004a39
 80049e4:	08004a29 	.word	0x08004a29
 80049e8:	08004a39 	.word	0x08004a39
 80049ec:	08004a39 	.word	0x08004a39
 80049f0:	08004a39 	.word	0x08004a39
 80049f4:	08004a39 	.word	0x08004a39
 80049f8:	08004a39 	.word	0x08004a39
 80049fc:	08004a39 	.word	0x08004a39
 8004a00:	08004a39 	.word	0x08004a39
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0e:	e1c0      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a10:	2304      	movs	r3, #4
 8004a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a16:	e1bc      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a1e:	e1b8      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a26:	e1b4      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a28:	2320      	movs	r3, #32
 8004a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a2e:	e1b0      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a30:	2340      	movs	r3, #64	; 0x40
 8004a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a36:	e1ac      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a3e:	e1a8      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a75      	ldr	r2, [pc, #468]	; (8004c1c <UART_SetConfig+0x634>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d130      	bne.n	8004aac <UART_SetConfig+0x4c4>
 8004a4a:	4b73      	ldr	r3, [pc, #460]	; (8004c18 <UART_SetConfig+0x630>)
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d826      	bhi.n	8004aa4 <UART_SetConfig+0x4bc>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x474>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a75 	.word	0x08004a75
 8004a60:	08004a7d 	.word	0x08004a7d
 8004a64:	08004a85 	.word	0x08004a85
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a7a:	e18a      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a82:	e186      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a84:	2308      	movs	r3, #8
 8004a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a8a:	e182      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a92:	e17e      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a94:	2320      	movs	r3, #32
 8004a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a9a:	e17a      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004a9c:	2340      	movs	r3, #64	; 0x40
 8004a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aa2:	e176      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004aa4:	2380      	movs	r3, #128	; 0x80
 8004aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aaa:	e172      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a5b      	ldr	r2, [pc, #364]	; (8004c20 <UART_SetConfig+0x638>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d130      	bne.n	8004b18 <UART_SetConfig+0x530>
 8004ab6:	4b58      	ldr	r3, [pc, #352]	; (8004c18 <UART_SetConfig+0x630>)
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	d826      	bhi.n	8004b10 <UART_SetConfig+0x528>
 8004ac2:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x4e0>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004ae1 	.word	0x08004ae1
 8004acc:	08004ae9 	.word	0x08004ae9
 8004ad0:	08004af1 	.word	0x08004af1
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ae6:	e154      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aee:	e150      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004af6:	e14c      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004afe:	e148      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004b00:	2320      	movs	r3, #32
 8004b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b06:	e144      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004b08:	2340      	movs	r3, #64	; 0x40
 8004b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b0e:	e140      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b16:	e13c      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a41      	ldr	r2, [pc, #260]	; (8004c24 <UART_SetConfig+0x63c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	f040 8082 	bne.w	8004c28 <UART_SetConfig+0x640>
 8004b24:	4b3c      	ldr	r3, [pc, #240]	; (8004c18 <UART_SetConfig+0x630>)
 8004b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b2c:	2b28      	cmp	r3, #40	; 0x28
 8004b2e:	d86d      	bhi.n	8004c0c <UART_SetConfig+0x624>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <UART_SetConfig+0x550>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004bdd 	.word	0x08004bdd
 8004b3c:	08004c0d 	.word	0x08004c0d
 8004b40:	08004c0d 	.word	0x08004c0d
 8004b44:	08004c0d 	.word	0x08004c0d
 8004b48:	08004c0d 	.word	0x08004c0d
 8004b4c:	08004c0d 	.word	0x08004c0d
 8004b50:	08004c0d 	.word	0x08004c0d
 8004b54:	08004c0d 	.word	0x08004c0d
 8004b58:	08004be5 	.word	0x08004be5
 8004b5c:	08004c0d 	.word	0x08004c0d
 8004b60:	08004c0d 	.word	0x08004c0d
 8004b64:	08004c0d 	.word	0x08004c0d
 8004b68:	08004c0d 	.word	0x08004c0d
 8004b6c:	08004c0d 	.word	0x08004c0d
 8004b70:	08004c0d 	.word	0x08004c0d
 8004b74:	08004c0d 	.word	0x08004c0d
 8004b78:	08004bed 	.word	0x08004bed
 8004b7c:	08004c0d 	.word	0x08004c0d
 8004b80:	08004c0d 	.word	0x08004c0d
 8004b84:	08004c0d 	.word	0x08004c0d
 8004b88:	08004c0d 	.word	0x08004c0d
 8004b8c:	08004c0d 	.word	0x08004c0d
 8004b90:	08004c0d 	.word	0x08004c0d
 8004b94:	08004c0d 	.word	0x08004c0d
 8004b98:	08004bf5 	.word	0x08004bf5
 8004b9c:	08004c0d 	.word	0x08004c0d
 8004ba0:	08004c0d 	.word	0x08004c0d
 8004ba4:	08004c0d 	.word	0x08004c0d
 8004ba8:	08004c0d 	.word	0x08004c0d
 8004bac:	08004c0d 	.word	0x08004c0d
 8004bb0:	08004c0d 	.word	0x08004c0d
 8004bb4:	08004c0d 	.word	0x08004c0d
 8004bb8:	08004bfd 	.word	0x08004bfd
 8004bbc:	08004c0d 	.word	0x08004c0d
 8004bc0:	08004c0d 	.word	0x08004c0d
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004c0d 	.word	0x08004c0d
 8004bcc:	08004c0d 	.word	0x08004c0d
 8004bd0:	08004c0d 	.word	0x08004c0d
 8004bd4:	08004c0d 	.word	0x08004c0d
 8004bd8:	08004c05 	.word	0x08004c05
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004be2:	e0d6      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004be4:	2304      	movs	r3, #4
 8004be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bea:	e0d2      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004bec:	2308      	movs	r3, #8
 8004bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bf2:	e0ce      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bfa:	e0ca      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004bfc:	2320      	movs	r3, #32
 8004bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c02:	e0c6      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004c04:	2340      	movs	r3, #64	; 0x40
 8004c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0a:	e0c2      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004c0c:	2380      	movs	r3, #128	; 0x80
 8004c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c12:	e0be      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004c14:	40011400 	.word	0x40011400
 8004c18:	58024400 	.word	0x58024400
 8004c1c:	40007800 	.word	0x40007800
 8004c20:	40007c00 	.word	0x40007c00
 8004c24:	40011800 	.word	0x40011800
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4aad      	ldr	r2, [pc, #692]	; (8004ee4 <UART_SetConfig+0x8fc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d176      	bne.n	8004d20 <UART_SetConfig+0x738>
 8004c32:	4bad      	ldr	r3, [pc, #692]	; (8004ee8 <UART_SetConfig+0x900>)
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c3a:	2b28      	cmp	r3, #40	; 0x28
 8004c3c:	d86c      	bhi.n	8004d18 <UART_SetConfig+0x730>
 8004c3e:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <UART_SetConfig+0x65c>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004ce9 	.word	0x08004ce9
 8004c48:	08004d19 	.word	0x08004d19
 8004c4c:	08004d19 	.word	0x08004d19
 8004c50:	08004d19 	.word	0x08004d19
 8004c54:	08004d19 	.word	0x08004d19
 8004c58:	08004d19 	.word	0x08004d19
 8004c5c:	08004d19 	.word	0x08004d19
 8004c60:	08004d19 	.word	0x08004d19
 8004c64:	08004cf1 	.word	0x08004cf1
 8004c68:	08004d19 	.word	0x08004d19
 8004c6c:	08004d19 	.word	0x08004d19
 8004c70:	08004d19 	.word	0x08004d19
 8004c74:	08004d19 	.word	0x08004d19
 8004c78:	08004d19 	.word	0x08004d19
 8004c7c:	08004d19 	.word	0x08004d19
 8004c80:	08004d19 	.word	0x08004d19
 8004c84:	08004cf9 	.word	0x08004cf9
 8004c88:	08004d19 	.word	0x08004d19
 8004c8c:	08004d19 	.word	0x08004d19
 8004c90:	08004d19 	.word	0x08004d19
 8004c94:	08004d19 	.word	0x08004d19
 8004c98:	08004d19 	.word	0x08004d19
 8004c9c:	08004d19 	.word	0x08004d19
 8004ca0:	08004d19 	.word	0x08004d19
 8004ca4:	08004d01 	.word	0x08004d01
 8004ca8:	08004d19 	.word	0x08004d19
 8004cac:	08004d19 	.word	0x08004d19
 8004cb0:	08004d19 	.word	0x08004d19
 8004cb4:	08004d19 	.word	0x08004d19
 8004cb8:	08004d19 	.word	0x08004d19
 8004cbc:	08004d19 	.word	0x08004d19
 8004cc0:	08004d19 	.word	0x08004d19
 8004cc4:	08004d09 	.word	0x08004d09
 8004cc8:	08004d19 	.word	0x08004d19
 8004ccc:	08004d19 	.word	0x08004d19
 8004cd0:	08004d19 	.word	0x08004d19
 8004cd4:	08004d19 	.word	0x08004d19
 8004cd8:	08004d19 	.word	0x08004d19
 8004cdc:	08004d19 	.word	0x08004d19
 8004ce0:	08004d19 	.word	0x08004d19
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	2301      	movs	r3, #1
 8004cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cee:	e050      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cf6:	e04c      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cfe:	e048      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d00:	2310      	movs	r3, #16
 8004d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d06:	e044      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d08:	2320      	movs	r3, #32
 8004d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d0e:	e040      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d10:	2340      	movs	r3, #64	; 0x40
 8004d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d16:	e03c      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d1e:	e038      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a71      	ldr	r2, [pc, #452]	; (8004eec <UART_SetConfig+0x904>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d130      	bne.n	8004d8c <UART_SetConfig+0x7a4>
 8004d2a:	4b6f      	ldr	r3, [pc, #444]	; (8004ee8 <UART_SetConfig+0x900>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	d826      	bhi.n	8004d84 <UART_SetConfig+0x79c>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <UART_SetConfig+0x754>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d55 	.word	0x08004d55
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	08004d65 	.word	0x08004d65
 8004d48:	08004d6d 	.word	0x08004d6d
 8004d4c:	08004d75 	.word	0x08004d75
 8004d50:	08004d7d 	.word	0x08004d7d
 8004d54:	2302      	movs	r3, #2
 8004d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d5a:	e01a      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d62:	e016      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d64:	2308      	movs	r3, #8
 8004d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d6a:	e012      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d72:	e00e      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d74:	2320      	movs	r3, #32
 8004d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d7a:	e00a      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d7c:	2340      	movs	r3, #64	; 0x40
 8004d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d82:	e006      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d8a:	e002      	b.n	8004d92 <UART_SetConfig+0x7aa>
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a55      	ldr	r2, [pc, #340]	; (8004eec <UART_SetConfig+0x904>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	f040 80f0 	bne.w	8004f7e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	dc46      	bgt.n	8004e34 <UART_SetConfig+0x84c>
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	db75      	blt.n	8004e96 <UART_SetConfig+0x8ae>
 8004daa:	3b02      	subs	r3, #2
 8004dac:	2b1e      	cmp	r3, #30
 8004dae:	d872      	bhi.n	8004e96 <UART_SetConfig+0x8ae>
 8004db0:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <UART_SetConfig+0x7d0>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004e3b 	.word	0x08004e3b
 8004dbc:	08004e97 	.word	0x08004e97
 8004dc0:	08004e43 	.word	0x08004e43
 8004dc4:	08004e97 	.word	0x08004e97
 8004dc8:	08004e97 	.word	0x08004e97
 8004dcc:	08004e97 	.word	0x08004e97
 8004dd0:	08004e53 	.word	0x08004e53
 8004dd4:	08004e97 	.word	0x08004e97
 8004dd8:	08004e97 	.word	0x08004e97
 8004ddc:	08004e97 	.word	0x08004e97
 8004de0:	08004e97 	.word	0x08004e97
 8004de4:	08004e97 	.word	0x08004e97
 8004de8:	08004e97 	.word	0x08004e97
 8004dec:	08004e97 	.word	0x08004e97
 8004df0:	08004e63 	.word	0x08004e63
 8004df4:	08004e97 	.word	0x08004e97
 8004df8:	08004e97 	.word	0x08004e97
 8004dfc:	08004e97 	.word	0x08004e97
 8004e00:	08004e97 	.word	0x08004e97
 8004e04:	08004e97 	.word	0x08004e97
 8004e08:	08004e97 	.word	0x08004e97
 8004e0c:	08004e97 	.word	0x08004e97
 8004e10:	08004e97 	.word	0x08004e97
 8004e14:	08004e97 	.word	0x08004e97
 8004e18:	08004e97 	.word	0x08004e97
 8004e1c:	08004e97 	.word	0x08004e97
 8004e20:	08004e97 	.word	0x08004e97
 8004e24:	08004e97 	.word	0x08004e97
 8004e28:	08004e97 	.word	0x08004e97
 8004e2c:	08004e97 	.word	0x08004e97
 8004e30:	08004e89 	.word	0x08004e89
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	d02a      	beq.n	8004e8e <UART_SetConfig+0x8a6>
 8004e38:	e02d      	b.n	8004e96 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e3a:	f7fe fb1f 	bl	800347c <HAL_RCCEx_GetD3PCLK1Freq>
 8004e3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004e40:	e02f      	b.n	8004ea2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e42:	f107 0314 	add.w	r3, r7, #20
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe fb2e 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e50:	e027      	b.n	8004ea2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e52:	f107 0308 	add.w	r3, r7, #8
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe fc7a 	bl	8003750 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e60:	e01f      	b.n	8004ea2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e62:	4b21      	ldr	r3, [pc, #132]	; (8004ee8 <UART_SetConfig+0x900>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ee8 <UART_SetConfig+0x900>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	08db      	lsrs	r3, r3, #3
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	4a1d      	ldr	r2, [pc, #116]	; (8004ef0 <UART_SetConfig+0x908>)
 8004e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e80:	e00f      	b.n	8004ea2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004e82:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <UART_SetConfig+0x908>)
 8004e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e86:	e00c      	b.n	8004ea2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e88:	4b1a      	ldr	r3, [pc, #104]	; (8004ef4 <UART_SetConfig+0x90c>)
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e8c:	e009      	b.n	8004ea2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e94:	e005      	b.n	8004ea2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004ea0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 81e6 	beq.w	8005276 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	4a12      	ldr	r2, [pc, #72]	; (8004ef8 <UART_SetConfig+0x910>)
 8004eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ebc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	6a3a      	ldr	r2, [r7, #32]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d305      	bcc.n	8004eda <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ed4:	6a3a      	ldr	r2, [r7, #32]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d910      	bls.n	8004efc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004ee0:	e1c9      	b.n	8005276 <UART_SetConfig+0xc8e>
 8004ee2:	bf00      	nop
 8004ee4:	40011c00 	.word	0x40011c00
 8004ee8:	58024400 	.word	0x58024400
 8004eec:	58000c00 	.word	0x58000c00
 8004ef0:	03d09000 	.word	0x03d09000
 8004ef4:	003d0900 	.word	0x003d0900
 8004ef8:	08008d9c 	.word	0x08008d9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	4618      	mov	r0, r3
 8004f00:	f04f 0100 	mov.w	r1, #0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	4ac1      	ldr	r2, [pc, #772]	; (8005210 <UART_SetConfig+0xc28>)
 8004f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	f7fb f9ec 	bl	80002f0 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	020b      	lsls	r3, r1, #8
 8004f2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f2e:	0202      	lsls	r2, r0, #8
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	6849      	ldr	r1, [r1, #4]
 8004f34:	0849      	lsrs	r1, r1, #1
 8004f36:	4608      	mov	r0, r1
 8004f38:	f04f 0100 	mov.w	r1, #0
 8004f3c:	1814      	adds	r4, r2, r0
 8004f3e:	eb43 0501 	adc.w	r5, r3, r1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	4629      	mov	r1, r5
 8004f50:	f7fb f9ce 	bl	80002f0 <__aeabi_uldivmod>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4613      	mov	r3, r2
 8004f5a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f62:	d308      	bcc.n	8004f76 <UART_SetConfig+0x98e>
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f6a:	d204      	bcs.n	8004f76 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f72:	60da      	str	r2, [r3, #12]
 8004f74:	e17f      	b.n	8005276 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004f7c:	e17b      	b.n	8005276 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f86:	f040 80bd 	bne.w	8005104 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8004f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	dc48      	bgt.n	8005024 <UART_SetConfig+0xa3c>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	db7b      	blt.n	800508e <UART_SetConfig+0xaa6>
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d879      	bhi.n	800508e <UART_SetConfig+0xaa6>
 8004f9a:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <UART_SetConfig+0x9b8>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	0800502b 	.word	0x0800502b
 8004fa4:	08005033 	.word	0x08005033
 8004fa8:	0800508f 	.word	0x0800508f
 8004fac:	0800508f 	.word	0x0800508f
 8004fb0:	0800503b 	.word	0x0800503b
 8004fb4:	0800508f 	.word	0x0800508f
 8004fb8:	0800508f 	.word	0x0800508f
 8004fbc:	0800508f 	.word	0x0800508f
 8004fc0:	0800504b 	.word	0x0800504b
 8004fc4:	0800508f 	.word	0x0800508f
 8004fc8:	0800508f 	.word	0x0800508f
 8004fcc:	0800508f 	.word	0x0800508f
 8004fd0:	0800508f 	.word	0x0800508f
 8004fd4:	0800508f 	.word	0x0800508f
 8004fd8:	0800508f 	.word	0x0800508f
 8004fdc:	0800508f 	.word	0x0800508f
 8004fe0:	0800505b 	.word	0x0800505b
 8004fe4:	0800508f 	.word	0x0800508f
 8004fe8:	0800508f 	.word	0x0800508f
 8004fec:	0800508f 	.word	0x0800508f
 8004ff0:	0800508f 	.word	0x0800508f
 8004ff4:	0800508f 	.word	0x0800508f
 8004ff8:	0800508f 	.word	0x0800508f
 8004ffc:	0800508f 	.word	0x0800508f
 8005000:	0800508f 	.word	0x0800508f
 8005004:	0800508f 	.word	0x0800508f
 8005008:	0800508f 	.word	0x0800508f
 800500c:	0800508f 	.word	0x0800508f
 8005010:	0800508f 	.word	0x0800508f
 8005014:	0800508f 	.word	0x0800508f
 8005018:	0800508f 	.word	0x0800508f
 800501c:	0800508f 	.word	0x0800508f
 8005020:	08005081 	.word	0x08005081
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d02e      	beq.n	8005086 <UART_SetConfig+0xa9e>
 8005028:	e031      	b.n	800508e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502a:	f7fd faad 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 800502e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005030:	e033      	b.n	800509a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005032:	f7fd fabf 	bl	80025b4 <HAL_RCC_GetPCLK2Freq>
 8005036:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005038:	e02f      	b.n	800509a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800503a:	f107 0314 	add.w	r3, r7, #20
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe fa32 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005048:	e027      	b.n	800509a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800504a:	f107 0308 	add.w	r3, r7, #8
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe fb7e 	bl	8003750 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005058:	e01f      	b.n	800509a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800505a:	4b6e      	ldr	r3, [pc, #440]	; (8005214 <UART_SetConfig+0xc2c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005066:	4b6b      	ldr	r3, [pc, #428]	; (8005214 <UART_SetConfig+0xc2c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	08db      	lsrs	r3, r3, #3
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	4a69      	ldr	r2, [pc, #420]	; (8005218 <UART_SetConfig+0xc30>)
 8005072:	fa22 f303 	lsr.w	r3, r2, r3
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005078:	e00f      	b.n	800509a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800507a:	4b67      	ldr	r3, [pc, #412]	; (8005218 <UART_SetConfig+0xc30>)
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800507e:	e00c      	b.n	800509a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005080:	4b66      	ldr	r3, [pc, #408]	; (800521c <UART_SetConfig+0xc34>)
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005084:	e009      	b.n	800509a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800508c:	e005      	b.n	800509a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005098:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80ea 	beq.w	8005276 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	4a5a      	ldr	r2, [pc, #360]	; (8005210 <UART_SetConfig+0xc28>)
 80050a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ac:	461a      	mov	r2, r3
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050b4:	005a      	lsls	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	441a      	add	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d916      	bls.n	80050fc <UART_SetConfig+0xb14>
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d212      	bcs.n	80050fc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f023 030f 	bic.w	r3, r3, #15
 80050de:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	085b      	lsrs	r3, r3, #1
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050ee:	4313      	orrs	r3, r2
 80050f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	e0bc      	b.n	8005276 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005102:	e0b8      	b.n	8005276 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005104:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005108:	2b20      	cmp	r3, #32
 800510a:	dc4b      	bgt.n	80051a4 <UART_SetConfig+0xbbc>
 800510c:	2b00      	cmp	r3, #0
 800510e:	f2c0 8087 	blt.w	8005220 <UART_SetConfig+0xc38>
 8005112:	2b20      	cmp	r3, #32
 8005114:	f200 8084 	bhi.w	8005220 <UART_SetConfig+0xc38>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <UART_SetConfig+0xb38>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	080051ab 	.word	0x080051ab
 8005124:	080051b3 	.word	0x080051b3
 8005128:	08005221 	.word	0x08005221
 800512c:	08005221 	.word	0x08005221
 8005130:	080051bb 	.word	0x080051bb
 8005134:	08005221 	.word	0x08005221
 8005138:	08005221 	.word	0x08005221
 800513c:	08005221 	.word	0x08005221
 8005140:	080051cb 	.word	0x080051cb
 8005144:	08005221 	.word	0x08005221
 8005148:	08005221 	.word	0x08005221
 800514c:	08005221 	.word	0x08005221
 8005150:	08005221 	.word	0x08005221
 8005154:	08005221 	.word	0x08005221
 8005158:	08005221 	.word	0x08005221
 800515c:	08005221 	.word	0x08005221
 8005160:	080051db 	.word	0x080051db
 8005164:	08005221 	.word	0x08005221
 8005168:	08005221 	.word	0x08005221
 800516c:	08005221 	.word	0x08005221
 8005170:	08005221 	.word	0x08005221
 8005174:	08005221 	.word	0x08005221
 8005178:	08005221 	.word	0x08005221
 800517c:	08005221 	.word	0x08005221
 8005180:	08005221 	.word	0x08005221
 8005184:	08005221 	.word	0x08005221
 8005188:	08005221 	.word	0x08005221
 800518c:	08005221 	.word	0x08005221
 8005190:	08005221 	.word	0x08005221
 8005194:	08005221 	.word	0x08005221
 8005198:	08005221 	.word	0x08005221
 800519c:	08005221 	.word	0x08005221
 80051a0:	08005201 	.word	0x08005201
 80051a4:	2b40      	cmp	r3, #64	; 0x40
 80051a6:	d02e      	beq.n	8005206 <UART_SetConfig+0xc1e>
 80051a8:	e03a      	b.n	8005220 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051aa:	f7fd f9ed 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 80051ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80051b0:	e03c      	b.n	800522c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b2:	f7fd f9ff 	bl	80025b4 <HAL_RCC_GetPCLK2Freq>
 80051b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80051b8:	e038      	b.n	800522c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051ba:	f107 0314 	add.w	r3, r7, #20
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fe f972 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051c8:	e030      	b.n	800522c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051ca:	f107 0308 	add.w	r3, r7, #8
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fabe 	bl	8003750 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051d8:	e028      	b.n	800522c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051da:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <UART_SetConfig+0xc2c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <UART_SetConfig+0xc2c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	08db      	lsrs	r3, r3, #3
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	4a09      	ldr	r2, [pc, #36]	; (8005218 <UART_SetConfig+0xc30>)
 80051f2:	fa22 f303 	lsr.w	r3, r2, r3
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051f8:	e018      	b.n	800522c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80051fa:	4b07      	ldr	r3, [pc, #28]	; (8005218 <UART_SetConfig+0xc30>)
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051fe:	e015      	b.n	800522c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <UART_SetConfig+0xc34>)
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005204:	e012      	b.n	800522c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800520c:	e00e      	b.n	800522c <UART_SetConfig+0xc44>
 800520e:	bf00      	nop
 8005210:	08008d9c 	.word	0x08008d9c
 8005214:	58024400 	.word	0x58024400
 8005218:	03d09000 	.word	0x03d09000
 800521c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800522a:	bf00      	nop
    }

    if (pclk != 0U)
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d021      	beq.n	8005276 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <UART_SetConfig+0xcb8>)
 8005238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800523c:	461a      	mov	r2, r3
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	fbb3 f2f2 	udiv	r2, r3, r2
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	441a      	add	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	2b0f      	cmp	r3, #15
 800525a:	d909      	bls.n	8005270 <UART_SetConfig+0xc88>
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005262:	d205      	bcs.n	8005270 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	b29a      	uxth	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	e002      	b.n	8005276 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005292:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005296:	4618      	mov	r0, r3
 8005298:	3738      	adds	r7, #56	; 0x38
 800529a:	46bd      	mov	sp, r7
 800529c:	bdb0      	pop	{r4, r5, r7, pc}
 800529e:	bf00      	nop
 80052a0:	08008d9c 	.word	0x08008d9c

080052a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01a      	beq.n	80053ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a2:	d10a      	bne.n	80053ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
  }
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053f8:	f7fb fe52 	bl	80010a0 <HAL_GetTick>
 80053fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b08      	cmp	r3, #8
 800540a:	d10e      	bne.n	800542a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800540c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f82f 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e025      	b.n	8005476 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b04      	cmp	r3, #4
 8005436:	d10e      	bne.n	8005456 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f819 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e00f      	b.n	8005476 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b09c      	sub	sp, #112	; 0x70
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548e:	e0a9      	b.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005496:	f000 80a5 	beq.w	80055e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549a:	f7fb fe01 	bl	80010a0 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80054aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d140      	bne.n	8005532 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054c4:	667b      	str	r3, [r7, #100]	; 0x64
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e6      	bne.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	663b      	str	r3, [r7, #96]	; 0x60
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3308      	adds	r3, #8
 8005500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005502:	64ba      	str	r2, [r7, #72]	; 0x48
 8005504:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005508:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e5      	bne.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e069      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d051      	beq.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554e:	d149      	bne.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005558:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800556e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
 800557a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800557e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e6      	bne.n	800555a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	613b      	str	r3, [r7, #16]
   return(result);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055ac:	623a      	str	r2, [r7, #32]
 80055ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	69f9      	ldr	r1, [r7, #28]
 80055b2:	6a3a      	ldr	r2, [r7, #32]
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e5      	bne.n	800558c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e010      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69da      	ldr	r2, [r3, #28]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	4013      	ands	r3, r2
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	bf0c      	ite	eq
 80055f4:	2301      	moveq	r3, #1
 80055f6:	2300      	movne	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	429a      	cmp	r2, r3
 8005600:	f43f af46 	beq.w	8005490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3770      	adds	r7, #112	; 0x70
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_UARTEx_DisableFifoMode+0x16>
 8005620:	2302      	movs	r3, #2
 8005622:	e027      	b.n	8005674 <HAL_UARTEx_DisableFifoMode+0x66>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2224      	movs	r2, #36	; 0x24
 8005630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005652:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005694:	2302      	movs	r3, #2
 8005696:	e02d      	b.n	80056f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2224      	movs	r2, #36	; 0x24
 80056a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0201 	bic.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f84f 	bl	8005778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005710:	2302      	movs	r3, #2
 8005712:	e02d      	b.n	8005770 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2224      	movs	r2, #36	; 0x24
 8005720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0201 	bic.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f811 	bl	8005778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005784:	2b00      	cmp	r3, #0
 8005786:	d108      	bne.n	800579a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005798:	e031      	b.n	80057fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800579a:	2310      	movs	r3, #16
 800579c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800579e:	2310      	movs	r3, #16
 80057a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	0e5b      	lsrs	r3, r3, #25
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	0f5b      	lsrs	r3, r3, #29
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057c2:	7bbb      	ldrb	r3, [r7, #14]
 80057c4:	7b3a      	ldrb	r2, [r7, #12]
 80057c6:	4911      	ldr	r1, [pc, #68]	; (800580c <UARTEx_SetNbDataToProcess+0x94>)
 80057c8:	5c8a      	ldrb	r2, [r1, r2]
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057ce:	7b3a      	ldrb	r2, [r7, #12]
 80057d0:	490f      	ldr	r1, [pc, #60]	; (8005810 <UARTEx_SetNbDataToProcess+0x98>)
 80057d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80057d8:	b29a      	uxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	7b7a      	ldrb	r2, [r7, #13]
 80057e4:	4909      	ldr	r1, [pc, #36]	; (800580c <UARTEx_SetNbDataToProcess+0x94>)
 80057e6:	5c8a      	ldrb	r2, [r1, r2]
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057ec:	7b7a      	ldrb	r2, [r7, #13]
 80057ee:	4908      	ldr	r1, [pc, #32]	; (8005810 <UARTEx_SetNbDataToProcess+0x98>)
 80057f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	08008db4 	.word	0x08008db4
 8005810:	08008dbc 	.word	0x08008dbc

08005814 <__NVIC_SetPriority>:
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	6039      	str	r1, [r7, #0]
 800581e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005824:	2b00      	cmp	r3, #0
 8005826:	db0a      	blt.n	800583e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	b2da      	uxtb	r2, r3
 800582c:	490c      	ldr	r1, [pc, #48]	; (8005860 <__NVIC_SetPriority+0x4c>)
 800582e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005832:	0112      	lsls	r2, r2, #4
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	440b      	add	r3, r1
 8005838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800583c:	e00a      	b.n	8005854 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	4908      	ldr	r1, [pc, #32]	; (8005864 <__NVIC_SetPriority+0x50>)
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	3b04      	subs	r3, #4
 800584c:	0112      	lsls	r2, r2, #4
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	440b      	add	r3, r1
 8005852:	761a      	strb	r2, [r3, #24]
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	e000e100 	.word	0xe000e100
 8005864:	e000ed00 	.word	0xe000ed00

08005868 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800586c:	4b05      	ldr	r3, [pc, #20]	; (8005884 <SysTick_Handler+0x1c>)
 800586e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005870:	f001 fd28 	bl	80072c4 <xTaskGetSchedulerState>
 8005874:	4603      	mov	r3, r0
 8005876:	2b01      	cmp	r3, #1
 8005878:	d001      	beq.n	800587e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800587a:	f002 fb0d 	bl	8007e98 <xPortSysTickHandler>
  }
}
 800587e:	bf00      	nop
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	e000e010 	.word	0xe000e010

08005888 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800588c:	2100      	movs	r1, #0
 800588e:	f06f 0004 	mvn.w	r0, #4
 8005892:	f7ff ffbf 	bl	8005814 <__NVIC_SetPriority>
#endif
}
 8005896:	bf00      	nop
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058a2:	f3ef 8305 	mrs	r3, IPSR
 80058a6:	603b      	str	r3, [r7, #0]
  return(result);
 80058a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80058ae:	f06f 0305 	mvn.w	r3, #5
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	e00c      	b.n	80058d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058b6:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <osKernelInitialize+0x44>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d105      	bne.n	80058ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058be:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <osKernelInitialize+0x44>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	e002      	b.n	80058d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058d0:	687b      	ldr	r3, [r7, #4]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	2400009c 	.word	0x2400009c

080058e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ea:	f3ef 8305 	mrs	r3, IPSR
 80058ee:	603b      	str	r3, [r7, #0]
  return(result);
 80058f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80058f6:	f06f 0305 	mvn.w	r3, #5
 80058fa:	607b      	str	r3, [r7, #4]
 80058fc:	e010      	b.n	8005920 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058fe:	4b0b      	ldr	r3, [pc, #44]	; (800592c <osKernelStart+0x48>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d109      	bne.n	800591a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005906:	f7ff ffbf 	bl	8005888 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800590a:	4b08      	ldr	r3, [pc, #32]	; (800592c <osKernelStart+0x48>)
 800590c:	2202      	movs	r2, #2
 800590e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005910:	f001 f87c 	bl	8006a0c <vTaskStartScheduler>
      stat = osOK;
 8005914:	2300      	movs	r3, #0
 8005916:	607b      	str	r3, [r7, #4]
 8005918:	e002      	b.n	8005920 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800591a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800591e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005920:	687b      	ldr	r3, [r7, #4]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	2400009c 	.word	0x2400009c

08005930 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b08e      	sub	sp, #56	; 0x38
 8005934:	af04      	add	r7, sp, #16
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005940:	f3ef 8305 	mrs	r3, IPSR
 8005944:	617b      	str	r3, [r7, #20]
  return(result);
 8005946:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005948:	2b00      	cmp	r3, #0
 800594a:	d17e      	bne.n	8005a4a <osThreadNew+0x11a>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d07b      	beq.n	8005a4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005956:	2318      	movs	r3, #24
 8005958:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800595e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005962:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d045      	beq.n	80059f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <osThreadNew+0x48>
        name = attr->name;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d008      	beq.n	800599e <osThreadNew+0x6e>
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	2b38      	cmp	r3, #56	; 0x38
 8005990:	d805      	bhi.n	800599e <osThreadNew+0x6e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <osThreadNew+0x72>
        return (NULL);
 800599e:	2300      	movs	r3, #0
 80059a0:	e054      	b.n	8005a4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00e      	beq.n	80059d8 <osThreadNew+0xa8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2bbb      	cmp	r3, #187	; 0xbb
 80059c0:	d90a      	bls.n	80059d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d006      	beq.n	80059d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <osThreadNew+0xa8>
        mem = 1;
 80059d2:	2301      	movs	r3, #1
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	e010      	b.n	80059fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10c      	bne.n	80059fa <osThreadNew+0xca>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d108      	bne.n	80059fa <osThreadNew+0xca>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <osThreadNew+0xca>
          mem = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e001      	b.n	80059fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d110      	bne.n	8005a22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a08:	9202      	str	r2, [sp, #8]
 8005a0a:	9301      	str	r3, [sp, #4]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6a3a      	ldr	r2, [r7, #32]
 8005a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fe0c 	bl	8006634 <xTaskCreateStatic>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	e013      	b.n	8005a4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d110      	bne.n	8005a4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	f107 0310 	add.w	r3, r7, #16
 8005a30:	9301      	str	r3, [sp, #4]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fe57 	bl	80066ee <xTaskCreate>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d001      	beq.n	8005a4a <osThreadNew+0x11a>
            hTask = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a4a:	693b      	ldr	r3, [r7, #16]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3728      	adds	r7, #40	; 0x28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a5c:	f3ef 8305 	mrs	r3, IPSR
 8005a60:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <osDelay+0x1c>
    stat = osErrorISR;
 8005a68:	f06f 0305 	mvn.w	r3, #5
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	e007      	b.n	8005a80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 ff92 	bl	80069a4 <vTaskDelay>
    }
  }

  return (stat);
 8005a80:	68fb      	ldr	r3, [r7, #12]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4a07      	ldr	r2, [pc, #28]	; (8005ab8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4a06      	ldr	r2, [pc, #24]	; (8005abc <vApplicationGetIdleTaskMemory+0x30>)
 8005aa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2280      	movs	r2, #128	; 0x80
 8005aa8:	601a      	str	r2, [r3, #0]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	240000a0 	.word	0x240000a0
 8005abc:	2400015c 	.word	0x2400015c

08005ac0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4a07      	ldr	r2, [pc, #28]	; (8005aec <vApplicationGetTimerTaskMemory+0x2c>)
 8005ad0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4a06      	ldr	r2, [pc, #24]	; (8005af0 <vApplicationGetTimerTaskMemory+0x30>)
 8005ad6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ade:	601a      	str	r2, [r3, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	2400035c 	.word	0x2400035c
 8005af0:	24000418 	.word	0x24000418

08005af4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f103 0208 	add.w	r2, r3, #8
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f103 0208 	add.w	r2, r3, #8
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f103 0208 	add.w	r2, r3, #8
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bac:	d103      	bne.n	8005bb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e00c      	b.n	8005bd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e002      	b.n	8005bc4 <vListInsert+0x2e>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d2f6      	bcs.n	8005bbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	601a      	str	r2, [r3, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6892      	ldr	r2, [r2, #8]
 8005c1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6852      	ldr	r2, [r2, #4]
 8005c28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d103      	bne.n	8005c3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	1e5a      	subs	r2, r3, #1
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c86:	f002 f875 	bl	8007d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c96:	fb01 f303 	mul.w	r3, r1, r3
 8005c9a:	441a      	add	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	68f9      	ldr	r1, [r7, #12]
 8005cba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	441a      	add	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	22ff      	movs	r2, #255	; 0xff
 8005cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	22ff      	movs	r2, #255	; 0xff
 8005cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d114      	bne.n	8005d06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01a      	beq.n	8005d1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3310      	adds	r3, #16
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 f929 	bl	8006f40 <xTaskRemoveFromEventList>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d012      	beq.n	8005d1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cf4:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <xQueueGenericReset+0xcc>)
 8005cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	e009      	b.n	8005d1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3310      	adds	r3, #16
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff fef2 	bl	8005af4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3324      	adds	r3, #36	; 0x24
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff feed 	bl	8005af4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d1a:	f002 f85b 	bl	8007dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d1e:	2301      	movs	r3, #1
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08e      	sub	sp, #56	; 0x38
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d52:	bf00      	nop
 8005d54:	e7fe      	b.n	8005d54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10a      	bne.n	8005d72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <xQueueGenericCreateStatic+0x52>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <xQueueGenericCreateStatic+0x56>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <xQueueGenericCreateStatic+0x58>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	623b      	str	r3, [r7, #32]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <xQueueGenericCreateStatic+0x7e>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <xQueueGenericCreateStatic+0x82>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <xQueueGenericCreateStatic+0x84>
 8005dae:	2300      	movs	r3, #0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10a      	bne.n	8005dca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	61fb      	str	r3, [r7, #28]
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005dca:	2350      	movs	r3, #80	; 0x50
 8005dcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b50      	cmp	r3, #80	; 0x50
 8005dd2:	d00a      	beq.n	8005dea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	61bb      	str	r3, [r7, #24]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005dea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00d      	beq.n	8005e12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	4613      	mov	r3, r2
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f805 	bl	8005e1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3730      	adds	r7, #48	; 0x30
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d103      	bne.n	8005e38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	e002      	b.n	8005e3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	69b8      	ldr	r0, [r7, #24]
 8005e4e:	f7ff ff05 	bl	8005c5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08e      	sub	sp, #56	; 0x38
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e72:	2300      	movs	r3, #0
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <xQueueGenericSend+0x32>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d103      	bne.n	8005ea4 <xQueueGenericSend+0x40>
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <xQueueGenericSend+0x44>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <xQueueGenericSend+0x46>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <xQueueGenericSend+0x60>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d103      	bne.n	8005ed2 <xQueueGenericSend+0x6e>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d101      	bne.n	8005ed6 <xQueueGenericSend+0x72>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueGenericSend+0x74>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	623b      	str	r3, [r7, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ef2:	f001 f9e7 	bl	80072c4 <xTaskGetSchedulerState>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <xQueueGenericSend+0x9e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <xQueueGenericSend+0xa2>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <xQueueGenericSend+0xa4>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xQueueGenericSend+0xbe>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	61fb      	str	r3, [r7, #28]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f22:	f001 ff27 	bl	8007d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d302      	bcc.n	8005f38 <xQueueGenericSend+0xd4>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d129      	bne.n	8005f8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f3e:	f000 fa0b 	bl	8006358 <prvCopyDataToQueue>
 8005f42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d010      	beq.n	8005f6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	3324      	adds	r3, #36	; 0x24
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 fff5 	bl	8006f40 <xTaskRemoveFromEventList>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d013      	beq.n	8005f84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f5c:	4b3f      	ldr	r3, [pc, #252]	; (800605c <xQueueGenericSend+0x1f8>)
 8005f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	e00a      	b.n	8005f84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d007      	beq.n	8005f84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f74:	4b39      	ldr	r3, [pc, #228]	; (800605c <xQueueGenericSend+0x1f8>)
 8005f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f84:	f001 ff26 	bl	8007dd4 <vPortExitCritical>
				return pdPASS;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e063      	b.n	8006054 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d103      	bne.n	8005f9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f92:	f001 ff1f 	bl	8007dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	e05c      	b.n	8006054 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d106      	bne.n	8005fae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fa0:	f107 0314 	add.w	r3, r7, #20
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 f82f 	bl	8007008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005faa:	2301      	movs	r3, #1
 8005fac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fae:	f001 ff11 	bl	8007dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fb2:	f000 fd9b 	bl	8006aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fb6:	f001 fedd 	bl	8007d74 <vPortEnterCritical>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fc0:	b25b      	sxtb	r3, r3
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc6:	d103      	bne.n	8005fd0 <xQueueGenericSend+0x16c>
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fd6:	b25b      	sxtb	r3, r3
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fdc:	d103      	bne.n	8005fe6 <xQueueGenericSend+0x182>
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fe6:	f001 fef5 	bl	8007dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fea:	1d3a      	adds	r2, r7, #4
 8005fec:	f107 0314 	add.w	r3, r7, #20
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 f81e 	bl	8007034 <xTaskCheckForTimeOut>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d124      	bne.n	8006048 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006000:	f000 faa2 	bl	8006548 <prvIsQueueFull>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d018      	beq.n	800603c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	3310      	adds	r3, #16
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	4611      	mov	r1, r2
 8006012:	4618      	mov	r0, r3
 8006014:	f000 ff44 	bl	8006ea0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800601a:	f000 fa2d 	bl	8006478 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800601e:	f000 fd73 	bl	8006b08 <xTaskResumeAll>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	f47f af7c 	bne.w	8005f22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <xQueueGenericSend+0x1f8>)
 800602c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	e772      	b.n	8005f22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800603c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800603e:	f000 fa1b 	bl	8006478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006042:	f000 fd61 	bl	8006b08 <xTaskResumeAll>
 8006046:	e76c      	b.n	8005f22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800604a:	f000 fa15 	bl	8006478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800604e:	f000 fd5b 	bl	8006b08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006052:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006054:	4618      	mov	r0, r3
 8006056:	3738      	adds	r7, #56	; 0x38
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	e000ed04 	.word	0xe000ed04

08006060 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b090      	sub	sp, #64	; 0x40
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <xQueueGenericSendFromISR+0x3c>
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <xQueueGenericSendFromISR+0x40>
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <xQueueGenericSendFromISR+0x42>
 80060a0:	2300      	movs	r3, #0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060b8:	bf00      	nop
 80060ba:	e7fe      	b.n	80060ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d103      	bne.n	80060ca <xQueueGenericSendFromISR+0x6a>
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <xQueueGenericSendFromISR+0x6e>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <xQueueGenericSendFromISR+0x70>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	623b      	str	r3, [r7, #32]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060ea:	f001 ff25 	bl	8007f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060ee:	f3ef 8211 	mrs	r2, BASEPRI
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	61fa      	str	r2, [r7, #28]
 8006104:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006106:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006108:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	429a      	cmp	r2, r3
 8006114:	d302      	bcc.n	800611c <xQueueGenericSendFromISR+0xbc>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d12f      	bne.n	800617c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006132:	f000 f911 	bl	8006358 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006136:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800613e:	d112      	bne.n	8006166 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	d016      	beq.n	8006176 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	3324      	adds	r3, #36	; 0x24
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fef7 	bl	8006f40 <xTaskRemoveFromEventList>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00e      	beq.n	8006176 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e007      	b.n	8006176 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006166:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800616a:	3301      	adds	r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	b25a      	sxtb	r2, r3
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006176:	2301      	movs	r3, #1
 8006178:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800617a:	e001      	b.n	8006180 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800617c:	2300      	movs	r3, #0
 800617e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800618a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800618c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800618e:	4618      	mov	r0, r3
 8006190:	3740      	adds	r7, #64	; 0x40
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08c      	sub	sp, #48	; 0x30
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061a4:	2300      	movs	r3, #0
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <xQueueReceive+0x30>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	623b      	str	r3, [r7, #32]
}
 80061c4:	bf00      	nop
 80061c6:	e7fe      	b.n	80061c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d103      	bne.n	80061d6 <xQueueReceive+0x3e>
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <xQueueReceive+0x42>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <xQueueReceive+0x44>
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <xQueueReceive+0x5e>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	61fb      	str	r3, [r7, #28]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061f6:	f001 f865 	bl	80072c4 <xTaskGetSchedulerState>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <xQueueReceive+0x6e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <xQueueReceive+0x72>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <xQueueReceive+0x74>
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xQueueReceive+0x8e>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	61bb      	str	r3, [r7, #24]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006226:	f001 fda5 	bl	8007d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d01f      	beq.n	8006276 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800623a:	f000 f8f7 	bl	800642c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	1e5a      	subs	r2, r3, #1
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00f      	beq.n	800626e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	3310      	adds	r3, #16
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fe74 	bl	8006f40 <xTaskRemoveFromEventList>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800625e:	4b3d      	ldr	r3, [pc, #244]	; (8006354 <xQueueReceive+0x1bc>)
 8006260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800626e:	f001 fdb1 	bl	8007dd4 <vPortExitCritical>
				return pdPASS;
 8006272:	2301      	movs	r3, #1
 8006274:	e069      	b.n	800634a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d103      	bne.n	8006284 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800627c:	f001 fdaa 	bl	8007dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006280:	2300      	movs	r3, #0
 8006282:	e062      	b.n	800634a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800628a:	f107 0310 	add.w	r3, r7, #16
 800628e:	4618      	mov	r0, r3
 8006290:	f000 feba 	bl	8007008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006294:	2301      	movs	r3, #1
 8006296:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006298:	f001 fd9c 	bl	8007dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800629c:	f000 fc26 	bl	8006aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062a0:	f001 fd68 	bl	8007d74 <vPortEnterCritical>
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062aa:	b25b      	sxtb	r3, r3
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062b0:	d103      	bne.n	80062ba <xQueueReceive+0x122>
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062c0:	b25b      	sxtb	r3, r3
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c6:	d103      	bne.n	80062d0 <xQueueReceive+0x138>
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062d0:	f001 fd80 	bl	8007dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d4:	1d3a      	adds	r2, r7, #4
 80062d6:	f107 0310 	add.w	r3, r7, #16
 80062da:	4611      	mov	r1, r2
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fea9 	bl	8007034 <xTaskCheckForTimeOut>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d123      	bne.n	8006330 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ea:	f000 f917 	bl	800651c <prvIsQueueEmpty>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d017      	beq.n	8006324 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	3324      	adds	r3, #36	; 0x24
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fdcf 	bl	8006ea0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006304:	f000 f8b8 	bl	8006478 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006308:	f000 fbfe 	bl	8006b08 <xTaskResumeAll>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d189      	bne.n	8006226 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006312:	4b10      	ldr	r3, [pc, #64]	; (8006354 <xQueueReceive+0x1bc>)
 8006314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	e780      	b.n	8006226 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006326:	f000 f8a7 	bl	8006478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800632a:	f000 fbed 	bl	8006b08 <xTaskResumeAll>
 800632e:	e77a      	b.n	8006226 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006332:	f000 f8a1 	bl	8006478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006336:	f000 fbe7 	bl	8006b08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800633a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633c:	f000 f8ee 	bl	800651c <prvIsQueueEmpty>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	f43f af6f 	beq.w	8006226 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006348:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800634a:	4618      	mov	r0, r3
 800634c:	3730      	adds	r7, #48	; 0x30
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10d      	bne.n	8006392 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d14d      	bne.n	800641a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 ffbc 	bl	8007300 <xTaskPriorityDisinherit>
 8006388:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	609a      	str	r2, [r3, #8]
 8006390:	e043      	b.n	800641a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d119      	bne.n	80063cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6858      	ldr	r0, [r3, #4]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	461a      	mov	r2, r3
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	f002 f915 	bl	80085d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	441a      	add	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d32b      	bcc.n	800641a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	605a      	str	r2, [r3, #4]
 80063ca:	e026      	b.n	800641a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68d8      	ldr	r0, [r3, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	461a      	mov	r2, r3
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	f002 f8fb 	bl	80085d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	425b      	negs	r3, r3
 80063e6:	441a      	add	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d207      	bcs.n	8006408 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	425b      	negs	r3, r3
 8006402:	441a      	add	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d105      	bne.n	800641a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3b01      	subs	r3, #1
 8006418:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006422:	697b      	ldr	r3, [r7, #20]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d018      	beq.n	8006470 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	441a      	add	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	429a      	cmp	r2, r3
 8006456:	d303      	bcc.n	8006460 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68d9      	ldr	r1, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	461a      	mov	r2, r3
 800646a:	6838      	ldr	r0, [r7, #0]
 800646c:	f002 f8b1 	bl	80085d2 <memcpy>
	}
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006480:	f001 fc78 	bl	8007d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800648a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800648c:	e011      	b.n	80064b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	2b00      	cmp	r3, #0
 8006494:	d012      	beq.n	80064bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3324      	adds	r3, #36	; 0x24
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fd50 	bl	8006f40 <xTaskRemoveFromEventList>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064a6:	f000 fe27 	bl	80070f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	dce9      	bgt.n	800648e <prvUnlockQueue+0x16>
 80064ba:	e000      	b.n	80064be <prvUnlockQueue+0x46>
					break;
 80064bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	22ff      	movs	r2, #255	; 0xff
 80064c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064c6:	f001 fc85 	bl	8007dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064ca:	f001 fc53 	bl	8007d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064d6:	e011      	b.n	80064fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d012      	beq.n	8006506 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3310      	adds	r3, #16
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fd2b 	bl	8006f40 <xTaskRemoveFromEventList>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064f0:	f000 fe02 	bl	80070f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006500:	2b00      	cmp	r3, #0
 8006502:	dce9      	bgt.n	80064d8 <prvUnlockQueue+0x60>
 8006504:	e000      	b.n	8006508 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006506:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	22ff      	movs	r2, #255	; 0xff
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006510:	f001 fc60 	bl	8007dd4 <vPortExitCritical>
}
 8006514:	bf00      	nop
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006524:	f001 fc26 	bl	8007d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e001      	b.n	800653a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800653a:	f001 fc4b 	bl	8007dd4 <vPortExitCritical>

	return xReturn;
 800653e:	68fb      	ldr	r3, [r7, #12]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006550:	f001 fc10 	bl	8007d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655c:	429a      	cmp	r2, r3
 800655e:	d102      	bne.n	8006566 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006560:	2301      	movs	r3, #1
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e001      	b.n	800656a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800656a:	f001 fc33 	bl	8007dd4 <vPortExitCritical>

	return xReturn;
 800656e:	68fb      	ldr	r3, [r7, #12]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e014      	b.n	80065b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006588:	4a0f      	ldr	r2, [pc, #60]	; (80065c8 <vQueueAddToRegistry+0x50>)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10b      	bne.n	80065ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006594:	490c      	ldr	r1, [pc, #48]	; (80065c8 <vQueueAddToRegistry+0x50>)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800659e:	4a0a      	ldr	r2, [pc, #40]	; (80065c8 <vQueueAddToRegistry+0x50>)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4413      	add	r3, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065aa:	e006      	b.n	80065ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b07      	cmp	r3, #7
 80065b6:	d9e7      	bls.n	8006588 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	24004bc8 	.word	0x24004bc8

080065cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065dc:	f001 fbca 	bl	8007d74 <vPortEnterCritical>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ec:	d103      	bne.n	80065f6 <vQueueWaitForMessageRestricted+0x2a>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065fc:	b25b      	sxtb	r3, r3
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006602:	d103      	bne.n	800660c <vQueueWaitForMessageRestricted+0x40>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800660c:	f001 fbe2 	bl	8007dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	3324      	adds	r3, #36	; 0x24
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	68b9      	ldr	r1, [r7, #8]
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fc61 	bl	8006ee8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006626:	6978      	ldr	r0, [r7, #20]
 8006628:	f7ff ff26 	bl	8006478 <prvUnlockQueue>
	}
 800662c:	bf00      	nop
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08e      	sub	sp, #56	; 0x38
 8006638:	af04      	add	r7, sp, #16
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	623b      	str	r3, [r7, #32]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <xTaskCreateStatic+0x46>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	61fb      	str	r3, [r7, #28]
}
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800667a:	23bc      	movs	r3, #188	; 0xbc
 800667c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2bbc      	cmp	r3, #188	; 0xbc
 8006682:	d00a      	beq.n	800669a <xTaskCreateStatic+0x66>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	61bb      	str	r3, [r7, #24]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800669a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01e      	beq.n	80066e0 <xTaskCreateStatic+0xac>
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01b      	beq.n	80066e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066ba:	2300      	movs	r3, #0
 80066bc:	9303      	str	r3, [sp, #12]
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	9302      	str	r3, [sp, #8]
 80066c2:	f107 0314 	add.w	r3, r7, #20
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f850 	bl	8006778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066da:	f000 f8f3 	bl	80068c4 <prvAddNewTaskToReadyList>
 80066de:	e001      	b.n	80066e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066e4:	697b      	ldr	r3, [r7, #20]
	}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3728      	adds	r7, #40	; 0x28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b08c      	sub	sp, #48	; 0x30
 80066f2:	af04      	add	r7, sp, #16
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	603b      	str	r3, [r7, #0]
 80066fa:	4613      	mov	r3, r2
 80066fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066fe:	88fb      	ldrh	r3, [r7, #6]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4618      	mov	r0, r3
 8006704:	f001 fc58 	bl	8007fb8 <pvPortMalloc>
 8006708:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00e      	beq.n	800672e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006710:	20bc      	movs	r0, #188	; 0xbc
 8006712:	f001 fc51 	bl	8007fb8 <pvPortMalloc>
 8006716:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
 8006724:	e005      	b.n	8006732 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006726:	6978      	ldr	r0, [r7, #20]
 8006728:	f001 fd12 	bl	8008150 <vPortFree>
 800672c:	e001      	b.n	8006732 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d017      	beq.n	8006768 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006740:	88fa      	ldrh	r2, [r7, #6]
 8006742:	2300      	movs	r3, #0
 8006744:	9303      	str	r3, [sp, #12]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	9302      	str	r3, [sp, #8]
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f80e 	bl	8006778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800675c:	69f8      	ldr	r0, [r7, #28]
 800675e:	f000 f8b1 	bl	80068c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006762:	2301      	movs	r3, #1
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e002      	b.n	800676e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800676c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800676e:	69bb      	ldr	r3, [r7, #24]
	}
 8006770:	4618      	mov	r0, r3
 8006772:	3720      	adds	r7, #32
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	461a      	mov	r2, r3
 8006790:	21a5      	movs	r1, #165	; 0xa5
 8006792:	f001 ff2c 	bl	80085ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80067a0:	440b      	add	r3, r1
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	f023 0307 	bic.w	r3, r3, #7
 80067ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	617b      	str	r3, [r7, #20]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01f      	beq.n	8006816 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	e012      	b.n	8006802 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	4413      	add	r3, r2
 80067e2:	7819      	ldrb	r1, [r3, #0]
 80067e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	4413      	add	r3, r2
 80067ea:	3334      	adds	r3, #52	; 0x34
 80067ec:	460a      	mov	r2, r1
 80067ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d006      	beq.n	800680a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	3301      	adds	r3, #1
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d9e9      	bls.n	80067dc <prvInitialiseNewTask+0x64>
 8006808:	e000      	b.n	800680c <prvInitialiseNewTask+0x94>
			{
				break;
 800680a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006814:	e003      	b.n	800681e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	2b37      	cmp	r3, #55	; 0x37
 8006822:	d901      	bls.n	8006828 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006824:	2337      	movs	r3, #55	; 0x37
 8006826:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800682c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006832:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	2200      	movs	r2, #0
 8006838:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	3304      	adds	r3, #4
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff f978 	bl	8005b34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	3318      	adds	r3, #24
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff f973 	bl	8005b34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006862:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	2200      	movs	r2, #0
 8006870:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	3354      	adds	r3, #84	; 0x54
 8006878:	2260      	movs	r2, #96	; 0x60
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f001 feb6 	bl	80085ee <memset>
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	4a0c      	ldr	r2, [pc, #48]	; (80068b8 <prvInitialiseNewTask+0x140>)
 8006886:	659a      	str	r2, [r3, #88]	; 0x58
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	4a0c      	ldr	r2, [pc, #48]	; (80068bc <prvInitialiseNewTask+0x144>)
 800688c:	65da      	str	r2, [r3, #92]	; 0x5c
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	4a0b      	ldr	r2, [pc, #44]	; (80068c0 <prvInitialiseNewTask+0x148>)
 8006892:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	68f9      	ldr	r1, [r7, #12]
 8006898:	69b8      	ldr	r0, [r7, #24]
 800689a:	f001 f941 	bl	8007b20 <pxPortInitialiseStack>
 800689e:	4602      	mov	r2, r0
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068b0:	bf00      	nop
 80068b2:	3720      	adds	r7, #32
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	08008de4 	.word	0x08008de4
 80068bc:	08008e04 	.word	0x08008e04
 80068c0:	08008dc4 	.word	0x08008dc4

080068c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068cc:	f001 fa52 	bl	8007d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068d0:	4b2d      	ldr	r3, [pc, #180]	; (8006988 <prvAddNewTaskToReadyList+0xc4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3301      	adds	r3, #1
 80068d6:	4a2c      	ldr	r2, [pc, #176]	; (8006988 <prvAddNewTaskToReadyList+0xc4>)
 80068d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068da:	4b2c      	ldr	r3, [pc, #176]	; (800698c <prvAddNewTaskToReadyList+0xc8>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d109      	bne.n	80068f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068e2:	4a2a      	ldr	r2, [pc, #168]	; (800698c <prvAddNewTaskToReadyList+0xc8>)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068e8:	4b27      	ldr	r3, [pc, #156]	; (8006988 <prvAddNewTaskToReadyList+0xc4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d110      	bne.n	8006912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068f0:	f000 fc26 	bl	8007140 <prvInitialiseTaskLists>
 80068f4:	e00d      	b.n	8006912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068f6:	4b26      	ldr	r3, [pc, #152]	; (8006990 <prvAddNewTaskToReadyList+0xcc>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068fe:	4b23      	ldr	r3, [pc, #140]	; (800698c <prvAddNewTaskToReadyList+0xc8>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	429a      	cmp	r2, r3
 800690a:	d802      	bhi.n	8006912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800690c:	4a1f      	ldr	r2, [pc, #124]	; (800698c <prvAddNewTaskToReadyList+0xc8>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006912:	4b20      	ldr	r3, [pc, #128]	; (8006994 <prvAddNewTaskToReadyList+0xd0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3301      	adds	r3, #1
 8006918:	4a1e      	ldr	r2, [pc, #120]	; (8006994 <prvAddNewTaskToReadyList+0xd0>)
 800691a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800691c:	4b1d      	ldr	r3, [pc, #116]	; (8006994 <prvAddNewTaskToReadyList+0xd0>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006928:	4b1b      	ldr	r3, [pc, #108]	; (8006998 <prvAddNewTaskToReadyList+0xd4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d903      	bls.n	8006938 <prvAddNewTaskToReadyList+0x74>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	4a18      	ldr	r2, [pc, #96]	; (8006998 <prvAddNewTaskToReadyList+0xd4>)
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4a15      	ldr	r2, [pc, #84]	; (800699c <prvAddNewTaskToReadyList+0xd8>)
 8006946:	441a      	add	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	4619      	mov	r1, r3
 800694e:	4610      	mov	r0, r2
 8006950:	f7ff f8fd 	bl	8005b4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006954:	f001 fa3e 	bl	8007dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006958:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <prvAddNewTaskToReadyList+0xcc>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00e      	beq.n	800697e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006960:	4b0a      	ldr	r3, [pc, #40]	; (800698c <prvAddNewTaskToReadyList+0xc8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	429a      	cmp	r2, r3
 800696c:	d207      	bcs.n	800697e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <prvAddNewTaskToReadyList+0xdc>)
 8006970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	24000cec 	.word	0x24000cec
 800698c:	24000818 	.word	0x24000818
 8006990:	24000cf8 	.word	0x24000cf8
 8006994:	24000d08 	.word	0x24000d08
 8006998:	24000cf4 	.word	0x24000cf4
 800699c:	2400081c 	.word	0x2400081c
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d017      	beq.n	80069e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069b6:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <vTaskDelay+0x60>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <vTaskDelay+0x30>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60bb      	str	r3, [r7, #8]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069d4:	f000 f88a 	bl	8006aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069d8:	2100      	movs	r1, #0
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fcfe 	bl	80073dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069e0:	f000 f892 	bl	8006b08 <xTaskResumeAll>
 80069e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d107      	bne.n	80069fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <vTaskDelay+0x64>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	24000d14 	.word	0x24000d14
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	; 0x28
 8006a10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a1a:	463a      	mov	r2, r7
 8006a1c:	1d39      	adds	r1, r7, #4
 8006a1e:	f107 0308 	add.w	r3, r7, #8
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff f832 	bl	8005a8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	9202      	str	r2, [sp, #8]
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	2300      	movs	r3, #0
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	2300      	movs	r3, #0
 8006a38:	460a      	mov	r2, r1
 8006a3a:	4924      	ldr	r1, [pc, #144]	; (8006acc <vTaskStartScheduler+0xc0>)
 8006a3c:	4824      	ldr	r0, [pc, #144]	; (8006ad0 <vTaskStartScheduler+0xc4>)
 8006a3e:	f7ff fdf9 	bl	8006634 <xTaskCreateStatic>
 8006a42:	4603      	mov	r3, r0
 8006a44:	4a23      	ldr	r2, [pc, #140]	; (8006ad4 <vTaskStartScheduler+0xc8>)
 8006a46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a48:	4b22      	ldr	r3, [pc, #136]	; (8006ad4 <vTaskStartScheduler+0xc8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a50:	2301      	movs	r3, #1
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	e001      	b.n	8006a5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d102      	bne.n	8006a66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a60:	f000 fd10 	bl	8007484 <xTimerCreateTimerTask>
 8006a64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d11b      	bne.n	8006aa4 <vTaskStartScheduler+0x98>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	613b      	str	r3, [r7, #16]
}
 8006a7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a80:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <vTaskStartScheduler+0xcc>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3354      	adds	r3, #84	; 0x54
 8006a86:	4a15      	ldr	r2, [pc, #84]	; (8006adc <vTaskStartScheduler+0xd0>)
 8006a88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a8a:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <vTaskStartScheduler+0xd4>)
 8006a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a92:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <vTaskStartScheduler+0xd8>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a98:	4b13      	ldr	r3, [pc, #76]	; (8006ae8 <vTaskStartScheduler+0xdc>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a9e:	f001 f8c7 	bl	8007c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006aa2:	e00e      	b.n	8006ac2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aaa:	d10a      	bne.n	8006ac2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	60fb      	str	r3, [r7, #12]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <vTaskStartScheduler+0xb4>
}
 8006ac2:	bf00      	nop
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	08008d2c 	.word	0x08008d2c
 8006ad0:	08007111 	.word	0x08007111
 8006ad4:	24000d10 	.word	0x24000d10
 8006ad8:	24000818 	.word	0x24000818
 8006adc:	24000014 	.word	0x24000014
 8006ae0:	24000d0c 	.word	0x24000d0c
 8006ae4:	24000cf8 	.word	0x24000cf8
 8006ae8:	24000cf0 	.word	0x24000cf0

08006aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006af0:	4b04      	ldr	r3, [pc, #16]	; (8006b04 <vTaskSuspendAll+0x18>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	4a03      	ldr	r2, [pc, #12]	; (8006b04 <vTaskSuspendAll+0x18>)
 8006af8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006afa:	bf00      	nop
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	24000d14 	.word	0x24000d14

08006b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b16:	4b42      	ldr	r3, [pc, #264]	; (8006c20 <xTaskResumeAll+0x118>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	603b      	str	r3, [r7, #0]
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b34:	f001 f91e 	bl	8007d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b38:	4b39      	ldr	r3, [pc, #228]	; (8006c20 <xTaskResumeAll+0x118>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	4a38      	ldr	r2, [pc, #224]	; (8006c20 <xTaskResumeAll+0x118>)
 8006b40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b42:	4b37      	ldr	r3, [pc, #220]	; (8006c20 <xTaskResumeAll+0x118>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d162      	bne.n	8006c10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b4a:	4b36      	ldr	r3, [pc, #216]	; (8006c24 <xTaskResumeAll+0x11c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d05e      	beq.n	8006c10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b52:	e02f      	b.n	8006bb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b54:	4b34      	ldr	r3, [pc, #208]	; (8006c28 <xTaskResumeAll+0x120>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3318      	adds	r3, #24
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff f851 	bl	8005c08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff f84c 	bl	8005c08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b74:	4b2d      	ldr	r3, [pc, #180]	; (8006c2c <xTaskResumeAll+0x124>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d903      	bls.n	8006b84 <xTaskResumeAll+0x7c>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <xTaskResumeAll+0x124>)
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4a27      	ldr	r2, [pc, #156]	; (8006c30 <xTaskResumeAll+0x128>)
 8006b92:	441a      	add	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	f7fe ffd7 	bl	8005b4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba4:	4b23      	ldr	r3, [pc, #140]	; (8006c34 <xTaskResumeAll+0x12c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d302      	bcc.n	8006bb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bae:	4b22      	ldr	r3, [pc, #136]	; (8006c38 <xTaskResumeAll+0x130>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bb4:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <xTaskResumeAll+0x120>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1cb      	bne.n	8006b54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bc2:	f000 fb5f 	bl	8007284 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <xTaskResumeAll+0x134>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d010      	beq.n	8006bf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bd2:	f000 f847 	bl	8006c64 <xTaskIncrementTick>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bdc:	4b16      	ldr	r3, [pc, #88]	; (8006c38 <xTaskResumeAll+0x130>)
 8006bde:	2201      	movs	r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f1      	bne.n	8006bd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006bee:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <xTaskResumeAll+0x134>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bf4:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <xTaskResumeAll+0x130>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d009      	beq.n	8006c10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c00:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <xTaskResumeAll+0x138>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c10:	f001 f8e0 	bl	8007dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8006c14:	68bb      	ldr	r3, [r7, #8]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	24000d14 	.word	0x24000d14
 8006c24:	24000cec 	.word	0x24000cec
 8006c28:	24000cac 	.word	0x24000cac
 8006c2c:	24000cf4 	.word	0x24000cf4
 8006c30:	2400081c 	.word	0x2400081c
 8006c34:	24000818 	.word	0x24000818
 8006c38:	24000d00 	.word	0x24000d00
 8006c3c:	24000cfc 	.word	0x24000cfc
 8006c40:	e000ed04 	.word	0xe000ed04

08006c44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c4a:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <xTaskGetTickCount+0x1c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c50:	687b      	ldr	r3, [r7, #4]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	24000cf0 	.word	0x24000cf0

08006c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c6e:	4b4f      	ldr	r3, [pc, #316]	; (8006dac <xTaskIncrementTick+0x148>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f040 808f 	bne.w	8006d96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c78:	4b4d      	ldr	r3, [pc, #308]	; (8006db0 <xTaskIncrementTick+0x14c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c80:	4a4b      	ldr	r2, [pc, #300]	; (8006db0 <xTaskIncrementTick+0x14c>)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d120      	bne.n	8006cce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c8c:	4b49      	ldr	r3, [pc, #292]	; (8006db4 <xTaskIncrementTick+0x150>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <xTaskIncrementTick+0x48>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	603b      	str	r3, [r7, #0]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <xTaskIncrementTick+0x46>
 8006cac:	4b41      	ldr	r3, [pc, #260]	; (8006db4 <xTaskIncrementTick+0x150>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	4b41      	ldr	r3, [pc, #260]	; (8006db8 <xTaskIncrementTick+0x154>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a3f      	ldr	r2, [pc, #252]	; (8006db4 <xTaskIncrementTick+0x150>)
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	4a3f      	ldr	r2, [pc, #252]	; (8006db8 <xTaskIncrementTick+0x154>)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	4b3e      	ldr	r3, [pc, #248]	; (8006dbc <xTaskIncrementTick+0x158>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	4a3d      	ldr	r2, [pc, #244]	; (8006dbc <xTaskIncrementTick+0x158>)
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	f000 fadb 	bl	8007284 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cce:	4b3c      	ldr	r3, [pc, #240]	; (8006dc0 <xTaskIncrementTick+0x15c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d349      	bcc.n	8006d6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cd8:	4b36      	ldr	r3, [pc, #216]	; (8006db4 <xTaskIncrementTick+0x150>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d104      	bne.n	8006cec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce2:	4b37      	ldr	r3, [pc, #220]	; (8006dc0 <xTaskIncrementTick+0x15c>)
 8006ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ce8:	601a      	str	r2, [r3, #0]
					break;
 8006cea:	e03f      	b.n	8006d6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cec:	4b31      	ldr	r3, [pc, #196]	; (8006db4 <xTaskIncrementTick+0x150>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d203      	bcs.n	8006d0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d04:	4a2e      	ldr	r2, [pc, #184]	; (8006dc0 <xTaskIncrementTick+0x15c>)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d0a:	e02f      	b.n	8006d6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe ff79 	bl	8005c08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d004      	beq.n	8006d28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	3318      	adds	r3, #24
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe ff70 	bl	8005c08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	4b25      	ldr	r3, [pc, #148]	; (8006dc4 <xTaskIncrementTick+0x160>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d903      	bls.n	8006d3c <xTaskIncrementTick+0xd8>
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	4a22      	ldr	r2, [pc, #136]	; (8006dc4 <xTaskIncrementTick+0x160>)
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4a1f      	ldr	r2, [pc, #124]	; (8006dc8 <xTaskIncrementTick+0x164>)
 8006d4a:	441a      	add	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f7fe fefb 	bl	8005b4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <xTaskIncrementTick+0x168>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d3b8      	bcc.n	8006cd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d66:	2301      	movs	r3, #1
 8006d68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d6a:	e7b5      	b.n	8006cd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d6c:	4b17      	ldr	r3, [pc, #92]	; (8006dcc <xTaskIncrementTick+0x168>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d72:	4915      	ldr	r1, [pc, #84]	; (8006dc8 <xTaskIncrementTick+0x164>)
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d901      	bls.n	8006d88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006d84:	2301      	movs	r3, #1
 8006d86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d88:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <xTaskIncrementTick+0x16c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d007      	beq.n	8006da0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	e004      	b.n	8006da0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d96:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <xTaskIncrementTick+0x170>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <xTaskIncrementTick+0x170>)
 8006d9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006da0:	697b      	ldr	r3, [r7, #20]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	24000d14 	.word	0x24000d14
 8006db0:	24000cf0 	.word	0x24000cf0
 8006db4:	24000ca4 	.word	0x24000ca4
 8006db8:	24000ca8 	.word	0x24000ca8
 8006dbc:	24000d04 	.word	0x24000d04
 8006dc0:	24000d0c 	.word	0x24000d0c
 8006dc4:	24000cf4 	.word	0x24000cf4
 8006dc8:	2400081c 	.word	0x2400081c
 8006dcc:	24000818 	.word	0x24000818
 8006dd0:	24000d00 	.word	0x24000d00
 8006dd4:	24000cfc 	.word	0x24000cfc

08006dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dde:	4b2a      	ldr	r3, [pc, #168]	; (8006e88 <vTaskSwitchContext+0xb0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006de6:	4b29      	ldr	r3, [pc, #164]	; (8006e8c <vTaskSwitchContext+0xb4>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dec:	e046      	b.n	8006e7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006dee:	4b27      	ldr	r3, [pc, #156]	; (8006e8c <vTaskSwitchContext+0xb4>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df4:	4b26      	ldr	r3, [pc, #152]	; (8006e90 <vTaskSwitchContext+0xb8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	e010      	b.n	8006e1e <vTaskSwitchContext+0x46>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	607b      	str	r3, [r7, #4]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <vTaskSwitchContext+0x3e>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	491d      	ldr	r1, [pc, #116]	; (8006e94 <vTaskSwitchContext+0xbc>)
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0e4      	beq.n	8006dfc <vTaskSwitchContext+0x24>
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4a15      	ldr	r2, [pc, #84]	; (8006e94 <vTaskSwitchContext+0xbc>)
 8006e3e:	4413      	add	r3, r2
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	605a      	str	r2, [r3, #4]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	3308      	adds	r3, #8
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d104      	bne.n	8006e62 <vTaskSwitchContext+0x8a>
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	605a      	str	r2, [r3, #4]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	4a0b      	ldr	r2, [pc, #44]	; (8006e98 <vTaskSwitchContext+0xc0>)
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <vTaskSwitchContext+0xb8>)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <vTaskSwitchContext+0xc0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3354      	adds	r3, #84	; 0x54
 8006e78:	4a08      	ldr	r2, [pc, #32]	; (8006e9c <vTaskSwitchContext+0xc4>)
 8006e7a:	6013      	str	r3, [r2, #0]
}
 8006e7c:	bf00      	nop
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	24000d14 	.word	0x24000d14
 8006e8c:	24000d00 	.word	0x24000d00
 8006e90:	24000cf4 	.word	0x24000cf4
 8006e94:	2400081c 	.word	0x2400081c
 8006e98:	24000818 	.word	0x24000818
 8006e9c:	24000014 	.word	0x24000014

08006ea0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	60fb      	str	r3, [r7, #12]
}
 8006ec2:	bf00      	nop
 8006ec4:	e7fe      	b.n	8006ec4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ec6:	4b07      	ldr	r3, [pc, #28]	; (8006ee4 <vTaskPlaceOnEventList+0x44>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3318      	adds	r3, #24
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fe fe61 	bl	8005b96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	6838      	ldr	r0, [r7, #0]
 8006ed8:	f000 fa80 	bl	80073dc <prvAddCurrentTaskToDelayedList>
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	24000818 	.word	0x24000818

08006ee8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	617b      	str	r3, [r7, #20]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <vTaskPlaceOnEventListRestricted+0x54>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3318      	adds	r3, #24
 8006f16:	4619      	mov	r1, r3
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7fe fe18 	bl	8005b4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	68b8      	ldr	r0, [r7, #8]
 8006f2e:	f000 fa55 	bl	80073dc <prvAddCurrentTaskToDelayedList>
	}
 8006f32:	bf00      	nop
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	24000818 	.word	0x24000818

08006f40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10a      	bne.n	8006f6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	3318      	adds	r3, #24
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fe49 	bl	8005c08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f76:	4b1e      	ldr	r3, [pc, #120]	; (8006ff0 <xTaskRemoveFromEventList+0xb0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d11d      	bne.n	8006fba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	3304      	adds	r3, #4
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fe40 	bl	8005c08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8c:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <xTaskRemoveFromEventList+0xb4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d903      	bls.n	8006f9c <xTaskRemoveFromEventList+0x5c>
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	4a16      	ldr	r2, [pc, #88]	; (8006ff4 <xTaskRemoveFromEventList+0xb4>)
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4a13      	ldr	r2, [pc, #76]	; (8006ff8 <xTaskRemoveFromEventList+0xb8>)
 8006faa:	441a      	add	r2, r3
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	f7fe fdcb 	bl	8005b4e <vListInsertEnd>
 8006fb8:	e005      	b.n	8006fc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	3318      	adds	r3, #24
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	480e      	ldr	r0, [pc, #56]	; (8006ffc <xTaskRemoveFromEventList+0xbc>)
 8006fc2:	f7fe fdc4 	bl	8005b4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fca:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <xTaskRemoveFromEventList+0xc0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d905      	bls.n	8006fe0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <xTaskRemoveFromEventList+0xc4>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e001      	b.n	8006fe4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fe4:	697b      	ldr	r3, [r7, #20]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	24000d14 	.word	0x24000d14
 8006ff4:	24000cf4 	.word	0x24000cf4
 8006ff8:	2400081c 	.word	0x2400081c
 8006ffc:	24000cac 	.word	0x24000cac
 8007000:	24000818 	.word	0x24000818
 8007004:	24000d00 	.word	0x24000d00

08007008 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007010:	4b06      	ldr	r3, [pc, #24]	; (800702c <vTaskInternalSetTimeOutState+0x24>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <vTaskInternalSetTimeOutState+0x28>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	605a      	str	r2, [r3, #4]
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	24000d04 	.word	0x24000d04
 8007030:	24000cf0 	.word	0x24000cf0

08007034 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	613b      	str	r3, [r7, #16]
}
 8007056:	bf00      	nop
 8007058:	e7fe      	b.n	8007058 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10a      	bne.n	8007076 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	60fb      	str	r3, [r7, #12]
}
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007076:	f000 fe7d 	bl	8007d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800707a:	4b1d      	ldr	r3, [pc, #116]	; (80070f0 <xTaskCheckForTimeOut+0xbc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007092:	d102      	bne.n	800709a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007094:	2300      	movs	r3, #0
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	e023      	b.n	80070e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	4b15      	ldr	r3, [pc, #84]	; (80070f4 <xTaskCheckForTimeOut+0xc0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d007      	beq.n	80070b6 <xTaskCheckForTimeOut+0x82>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d302      	bcc.n	80070b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e015      	b.n	80070e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d20b      	bcs.n	80070d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	1ad2      	subs	r2, r2, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff ff9b 	bl	8007008 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	e004      	b.n	80070e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070de:	2301      	movs	r3, #1
 80070e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070e2:	f000 fe77 	bl	8007dd4 <vPortExitCritical>

	return xReturn;
 80070e6:	69fb      	ldr	r3, [r7, #28]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3720      	adds	r7, #32
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	24000cf0 	.word	0x24000cf0
 80070f4:	24000d04 	.word	0x24000d04

080070f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <vTaskMissedYield+0x14>)
 80070fe:	2201      	movs	r2, #1
 8007100:	601a      	str	r2, [r3, #0]
}
 8007102:	bf00      	nop
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	24000d00 	.word	0x24000d00

08007110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007118:	f000 f852 	bl	80071c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <prvIdleTask+0x28>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d9f9      	bls.n	8007118 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007124:	4b05      	ldr	r3, [pc, #20]	; (800713c <prvIdleTask+0x2c>)
 8007126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007134:	e7f0      	b.n	8007118 <prvIdleTask+0x8>
 8007136:	bf00      	nop
 8007138:	2400081c 	.word	0x2400081c
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
 800714a:	e00c      	b.n	8007166 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4a12      	ldr	r2, [pc, #72]	; (80071a0 <prvInitialiseTaskLists+0x60>)
 8007158:	4413      	add	r3, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fcca 	bl	8005af4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3301      	adds	r3, #1
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b37      	cmp	r3, #55	; 0x37
 800716a:	d9ef      	bls.n	800714c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800716c:	480d      	ldr	r0, [pc, #52]	; (80071a4 <prvInitialiseTaskLists+0x64>)
 800716e:	f7fe fcc1 	bl	8005af4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007172:	480d      	ldr	r0, [pc, #52]	; (80071a8 <prvInitialiseTaskLists+0x68>)
 8007174:	f7fe fcbe 	bl	8005af4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007178:	480c      	ldr	r0, [pc, #48]	; (80071ac <prvInitialiseTaskLists+0x6c>)
 800717a:	f7fe fcbb 	bl	8005af4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800717e:	480c      	ldr	r0, [pc, #48]	; (80071b0 <prvInitialiseTaskLists+0x70>)
 8007180:	f7fe fcb8 	bl	8005af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007184:	480b      	ldr	r0, [pc, #44]	; (80071b4 <prvInitialiseTaskLists+0x74>)
 8007186:	f7fe fcb5 	bl	8005af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800718a:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <prvInitialiseTaskLists+0x78>)
 800718c:	4a05      	ldr	r2, [pc, #20]	; (80071a4 <prvInitialiseTaskLists+0x64>)
 800718e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007190:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <prvInitialiseTaskLists+0x7c>)
 8007192:	4a05      	ldr	r2, [pc, #20]	; (80071a8 <prvInitialiseTaskLists+0x68>)
 8007194:	601a      	str	r2, [r3, #0]
}
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	2400081c 	.word	0x2400081c
 80071a4:	24000c7c 	.word	0x24000c7c
 80071a8:	24000c90 	.word	0x24000c90
 80071ac:	24000cac 	.word	0x24000cac
 80071b0:	24000cc0 	.word	0x24000cc0
 80071b4:	24000cd8 	.word	0x24000cd8
 80071b8:	24000ca4 	.word	0x24000ca4
 80071bc:	24000ca8 	.word	0x24000ca8

080071c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071c6:	e019      	b.n	80071fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071c8:	f000 fdd4 	bl	8007d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071cc:	4b10      	ldr	r3, [pc, #64]	; (8007210 <prvCheckTasksWaitingTermination+0x50>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fd15 	bl	8005c08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071de:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <prvCheckTasksWaitingTermination+0x54>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	4a0b      	ldr	r2, [pc, #44]	; (8007214 <prvCheckTasksWaitingTermination+0x54>)
 80071e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071e8:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <prvCheckTasksWaitingTermination+0x58>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	4a0a      	ldr	r2, [pc, #40]	; (8007218 <prvCheckTasksWaitingTermination+0x58>)
 80071f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071f2:	f000 fdef 	bl	8007dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f810 	bl	800721c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <prvCheckTasksWaitingTermination+0x58>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e1      	bne.n	80071c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	24000cc0 	.word	0x24000cc0
 8007214:	24000cec 	.word	0x24000cec
 8007218:	24000cd4 	.word	0x24000cd4

0800721c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3354      	adds	r3, #84	; 0x54
 8007228:	4618      	mov	r0, r3
 800722a:	f001 fa51 	bl	80086d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007234:	2b00      	cmp	r3, #0
 8007236:	d108      	bne.n	800724a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	4618      	mov	r0, r3
 800723e:	f000 ff87 	bl	8008150 <vPortFree>
				vPortFree( pxTCB );
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 ff84 	bl	8008150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007248:	e018      	b.n	800727c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007250:	2b01      	cmp	r3, #1
 8007252:	d103      	bne.n	800725c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 ff7b 	bl	8008150 <vPortFree>
	}
 800725a:	e00f      	b.n	800727c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007262:	2b02      	cmp	r3, #2
 8007264:	d00a      	beq.n	800727c <prvDeleteTCB+0x60>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60fb      	str	r3, [r7, #12]
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <prvDeleteTCB+0x5e>
	}
 800727c:	bf00      	nop
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800728a:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <prvResetNextTaskUnblockTime+0x38>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d104      	bne.n	800729e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007294:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800729a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800729c:	e008      	b.n	80072b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729e:	4b07      	ldr	r3, [pc, #28]	; (80072bc <prvResetNextTaskUnblockTime+0x38>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	4a04      	ldr	r2, [pc, #16]	; (80072c0 <prvResetNextTaskUnblockTime+0x3c>)
 80072ae:	6013      	str	r3, [r2, #0]
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	24000ca4 	.word	0x24000ca4
 80072c0:	24000d0c 	.word	0x24000d0c

080072c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072ca:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <xTaskGetSchedulerState+0x34>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072d2:	2301      	movs	r3, #1
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	e008      	b.n	80072ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072d8:	4b08      	ldr	r3, [pc, #32]	; (80072fc <xTaskGetSchedulerState+0x38>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d102      	bne.n	80072e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072e0:	2302      	movs	r3, #2
 80072e2:	607b      	str	r3, [r7, #4]
 80072e4:	e001      	b.n	80072ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072e6:	2300      	movs	r3, #0
 80072e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072ea:	687b      	ldr	r3, [r7, #4]
	}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	24000cf8 	.word	0x24000cf8
 80072fc:	24000d14 	.word	0x24000d14

08007300 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d056      	beq.n	80073c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007316:	4b2e      	ldr	r3, [pc, #184]	; (80073d0 <xTaskPriorityDisinherit+0xd0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	429a      	cmp	r2, r3
 800731e:	d00a      	beq.n	8007336 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	60bb      	str	r3, [r7, #8]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007358:	1e5a      	subs	r2, r3, #1
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007366:	429a      	cmp	r2, r3
 8007368:	d02c      	beq.n	80073c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736e:	2b00      	cmp	r3, #0
 8007370:	d128      	bne.n	80073c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	3304      	adds	r3, #4
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe fc46 	bl	8005c08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007394:	4b0f      	ldr	r3, [pc, #60]	; (80073d4 <xTaskPriorityDisinherit+0xd4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d903      	bls.n	80073a4 <xTaskPriorityDisinherit+0xa4>
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	4a0c      	ldr	r2, [pc, #48]	; (80073d4 <xTaskPriorityDisinherit+0xd4>)
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4a09      	ldr	r2, [pc, #36]	; (80073d8 <xTaskPriorityDisinherit+0xd8>)
 80073b2:	441a      	add	r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f7fe fbc7 	bl	8005b4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073c4:	697b      	ldr	r3, [r7, #20]
	}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	24000818 	.word	0x24000818
 80073d4:	24000cf4 	.word	0x24000cf4
 80073d8:	2400081c 	.word	0x2400081c

080073dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073e6:	4b21      	ldr	r3, [pc, #132]	; (800746c <prvAddCurrentTaskToDelayedList+0x90>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ec:	4b20      	ldr	r3, [pc, #128]	; (8007470 <prvAddCurrentTaskToDelayedList+0x94>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3304      	adds	r3, #4
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe fc08 	bl	8005c08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073fe:	d10a      	bne.n	8007416 <prvAddCurrentTaskToDelayedList+0x3a>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007406:	4b1a      	ldr	r3, [pc, #104]	; (8007470 <prvAddCurrentTaskToDelayedList+0x94>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3304      	adds	r3, #4
 800740c:	4619      	mov	r1, r3
 800740e:	4819      	ldr	r0, [pc, #100]	; (8007474 <prvAddCurrentTaskToDelayedList+0x98>)
 8007410:	f7fe fb9d 	bl	8005b4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007414:	e026      	b.n	8007464 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4413      	add	r3, r2
 800741c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800741e:	4b14      	ldr	r3, [pc, #80]	; (8007470 <prvAddCurrentTaskToDelayedList+0x94>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	429a      	cmp	r2, r3
 800742c:	d209      	bcs.n	8007442 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800742e:	4b12      	ldr	r3, [pc, #72]	; (8007478 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <prvAddCurrentTaskToDelayedList+0x94>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3304      	adds	r3, #4
 8007438:	4619      	mov	r1, r3
 800743a:	4610      	mov	r0, r2
 800743c:	f7fe fbab 	bl	8005b96 <vListInsert>
}
 8007440:	e010      	b.n	8007464 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007442:	4b0e      	ldr	r3, [pc, #56]	; (800747c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <prvAddCurrentTaskToDelayedList+0x94>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3304      	adds	r3, #4
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f7fe fba1 	bl	8005b96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007454:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	429a      	cmp	r2, r3
 800745c:	d202      	bcs.n	8007464 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800745e:	4a08      	ldr	r2, [pc, #32]	; (8007480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	6013      	str	r3, [r2, #0]
}
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	24000cf0 	.word	0x24000cf0
 8007470:	24000818 	.word	0x24000818
 8007474:	24000cd8 	.word	0x24000cd8
 8007478:	24000ca8 	.word	0x24000ca8
 800747c:	24000ca4 	.word	0x24000ca4
 8007480:	24000d0c 	.word	0x24000d0c

08007484 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08a      	sub	sp, #40	; 0x28
 8007488:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800748e:	f000 fb07 	bl	8007aa0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007492:	4b1c      	ldr	r3, [pc, #112]	; (8007504 <xTimerCreateTimerTask+0x80>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d021      	beq.n	80074de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074a2:	1d3a      	adds	r2, r7, #4
 80074a4:	f107 0108 	add.w	r1, r7, #8
 80074a8:	f107 030c 	add.w	r3, r7, #12
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fe fb07 	bl	8005ac0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	9202      	str	r2, [sp, #8]
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	2302      	movs	r3, #2
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	2300      	movs	r3, #0
 80074c2:	460a      	mov	r2, r1
 80074c4:	4910      	ldr	r1, [pc, #64]	; (8007508 <xTimerCreateTimerTask+0x84>)
 80074c6:	4811      	ldr	r0, [pc, #68]	; (800750c <xTimerCreateTimerTask+0x88>)
 80074c8:	f7ff f8b4 	bl	8006634 <xTaskCreateStatic>
 80074cc:	4603      	mov	r3, r0
 80074ce:	4a10      	ldr	r2, [pc, #64]	; (8007510 <xTimerCreateTimerTask+0x8c>)
 80074d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074d2:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <xTimerCreateTimerTask+0x8c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074da:	2301      	movs	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	613b      	str	r3, [r7, #16]
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074fa:	697b      	ldr	r3, [r7, #20]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	24000d48 	.word	0x24000d48
 8007508:	08008d34 	.word	0x08008d34
 800750c:	08007649 	.word	0x08007649
 8007510:	24000d4c 	.word	0x24000d4c

08007514 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007522:	2300      	movs	r3, #0
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <xTimerGenericCommand+0x2e>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	623b      	str	r3, [r7, #32]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007542:	4b1a      	ldr	r3, [pc, #104]	; (80075ac <xTimerGenericCommand+0x98>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d02a      	beq.n	80075a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b05      	cmp	r3, #5
 800755a:	dc18      	bgt.n	800758e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800755c:	f7ff feb2 	bl	80072c4 <xTaskGetSchedulerState>
 8007560:	4603      	mov	r3, r0
 8007562:	2b02      	cmp	r3, #2
 8007564:	d109      	bne.n	800757a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <xTimerGenericCommand+0x98>)
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	f107 0110 	add.w	r1, r7, #16
 800756e:	2300      	movs	r3, #0
 8007570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007572:	f7fe fc77 	bl	8005e64 <xQueueGenericSend>
 8007576:	6278      	str	r0, [r7, #36]	; 0x24
 8007578:	e012      	b.n	80075a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800757a:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <xTimerGenericCommand+0x98>)
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	f107 0110 	add.w	r1, r7, #16
 8007582:	2300      	movs	r3, #0
 8007584:	2200      	movs	r2, #0
 8007586:	f7fe fc6d 	bl	8005e64 <xQueueGenericSend>
 800758a:	6278      	str	r0, [r7, #36]	; 0x24
 800758c:	e008      	b.n	80075a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800758e:	4b07      	ldr	r3, [pc, #28]	; (80075ac <xTimerGenericCommand+0x98>)
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	f107 0110 	add.w	r1, r7, #16
 8007596:	2300      	movs	r3, #0
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	f7fe fd61 	bl	8006060 <xQueueGenericSendFromISR>
 800759e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3728      	adds	r7, #40	; 0x28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	24000d48 	.word	0x24000d48

080075b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ba:	4b22      	ldr	r3, [pc, #136]	; (8007644 <prvProcessExpiredTimer+0x94>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	3304      	adds	r3, #4
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe fb1d 	bl	8005c08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d022      	beq.n	8007622 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	699a      	ldr	r2, [r3, #24]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	18d1      	adds	r1, r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	6978      	ldr	r0, [r7, #20]
 80075ea:	f000 f8d1 	bl	8007790 <prvInsertTimerInActiveList>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01f      	beq.n	8007634 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075f4:	2300      	movs	r3, #0
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	2300      	movs	r3, #0
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	2100      	movs	r1, #0
 80075fe:	6978      	ldr	r0, [r7, #20]
 8007600:	f7ff ff88 	bl	8007514 <xTimerGenericCommand>
 8007604:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d113      	bne.n	8007634 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	60fb      	str	r3, [r7, #12]
}
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007628:	f023 0301 	bic.w	r3, r3, #1
 800762c:	b2da      	uxtb	r2, r3
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	6978      	ldr	r0, [r7, #20]
 800763a:	4798      	blx	r3
}
 800763c:	bf00      	nop
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	24000d40 	.word	0x24000d40

08007648 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007650:	f107 0308 	add.w	r3, r7, #8
 8007654:	4618      	mov	r0, r3
 8007656:	f000 f857 	bl	8007708 <prvGetNextExpireTime>
 800765a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	4619      	mov	r1, r3
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f803 	bl	800766c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007666:	f000 f8d5 	bl	8007814 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800766a:	e7f1      	b.n	8007650 <prvTimerTask+0x8>

0800766c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007676:	f7ff fa39 	bl	8006aec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800767a:	f107 0308 	add.w	r3, r7, #8
 800767e:	4618      	mov	r0, r3
 8007680:	f000 f866 	bl	8007750 <prvSampleTimeNow>
 8007684:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d130      	bne.n	80076ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <prvProcessTimerOrBlockTask+0x3c>
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	429a      	cmp	r2, r3
 8007698:	d806      	bhi.n	80076a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800769a:	f7ff fa35 	bl	8006b08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800769e:	68f9      	ldr	r1, [r7, #12]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7ff ff85 	bl	80075b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076a6:	e024      	b.n	80076f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <prvProcessTimerOrBlockTask+0x90>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <prvProcessTimerOrBlockTask+0x50>
 80076b8:	2301      	movs	r3, #1
 80076ba:	e000      	b.n	80076be <prvProcessTimerOrBlockTask+0x52>
 80076bc:	2300      	movs	r3, #0
 80076be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076c0:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <prvProcessTimerOrBlockTask+0x94>)
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	4619      	mov	r1, r3
 80076ce:	f7fe ff7d 	bl	80065cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076d2:	f7ff fa19 	bl	8006b08 <xTaskResumeAll>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10a      	bne.n	80076f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076dc:	4b09      	ldr	r3, [pc, #36]	; (8007704 <prvProcessTimerOrBlockTask+0x98>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	f3bf 8f6f 	isb	sy
}
 80076ec:	e001      	b.n	80076f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076ee:	f7ff fa0b 	bl	8006b08 <xTaskResumeAll>
}
 80076f2:	bf00      	nop
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	24000d44 	.word	0x24000d44
 8007700:	24000d48 	.word	0x24000d48
 8007704:	e000ed04 	.word	0xe000ed04

08007708 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007710:	4b0e      	ldr	r3, [pc, #56]	; (800774c <prvGetNextExpireTime+0x44>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <prvGetNextExpireTime+0x16>
 800771a:	2201      	movs	r2, #1
 800771c:	e000      	b.n	8007720 <prvGetNextExpireTime+0x18>
 800771e:	2200      	movs	r2, #0
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d105      	bne.n	8007738 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <prvGetNextExpireTime+0x44>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	e001      	b.n	800773c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800773c:	68fb      	ldr	r3, [r7, #12]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	24000d40 	.word	0x24000d40

08007750 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007758:	f7ff fa74 	bl	8006c44 <xTaskGetTickCount>
 800775c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800775e:	4b0b      	ldr	r3, [pc, #44]	; (800778c <prvSampleTimeNow+0x3c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	429a      	cmp	r2, r3
 8007766:	d205      	bcs.n	8007774 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007768:	f000 f936 	bl	80079d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	e002      	b.n	800777a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800777a:	4a04      	ldr	r2, [pc, #16]	; (800778c <prvSampleTimeNow+0x3c>)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007780:	68fb      	ldr	r3, [r7, #12]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	24000d50 	.word	0x24000d50

08007790 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d812      	bhi.n	80077dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	1ad2      	subs	r2, r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d302      	bcc.n	80077ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077c4:	2301      	movs	r3, #1
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	e01b      	b.n	8007802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077ca:	4b10      	ldr	r3, [pc, #64]	; (800780c <prvInsertTimerInActiveList+0x7c>)
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3304      	adds	r3, #4
 80077d2:	4619      	mov	r1, r3
 80077d4:	4610      	mov	r0, r2
 80077d6:	f7fe f9de 	bl	8005b96 <vListInsert>
 80077da:	e012      	b.n	8007802 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d206      	bcs.n	80077f2 <prvInsertTimerInActiveList+0x62>
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d302      	bcc.n	80077f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077ec:	2301      	movs	r3, #1
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	e007      	b.n	8007802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077f2:	4b07      	ldr	r3, [pc, #28]	; (8007810 <prvInsertTimerInActiveList+0x80>)
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3304      	adds	r3, #4
 80077fa:	4619      	mov	r1, r3
 80077fc:	4610      	mov	r0, r2
 80077fe:	f7fe f9ca 	bl	8005b96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007802:	697b      	ldr	r3, [r7, #20]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3718      	adds	r7, #24
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	24000d44 	.word	0x24000d44
 8007810:	24000d40 	.word	0x24000d40

08007814 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08e      	sub	sp, #56	; 0x38
 8007818:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800781a:	e0ca      	b.n	80079b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	da18      	bge.n	8007854 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007822:	1d3b      	adds	r3, r7, #4
 8007824:	3304      	adds	r3, #4
 8007826:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10a      	bne.n	8007844 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	61fb      	str	r3, [r7, #28]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800784a:	6850      	ldr	r0, [r2, #4]
 800784c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800784e:	6892      	ldr	r2, [r2, #8]
 8007850:	4611      	mov	r1, r2
 8007852:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f2c0 80aa 	blt.w	80079b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	3304      	adds	r3, #4
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe f9cb 	bl	8005c08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007872:	463b      	mov	r3, r7
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff ff6b 	bl	8007750 <prvSampleTimeNow>
 800787a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b09      	cmp	r3, #9
 8007880:	f200 8097 	bhi.w	80079b2 <prvProcessReceivedCommands+0x19e>
 8007884:	a201      	add	r2, pc, #4	; (adr r2, 800788c <prvProcessReceivedCommands+0x78>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	080078b5 	.word	0x080078b5
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078b5 	.word	0x080078b5
 8007898:	08007929 	.word	0x08007929
 800789c:	0800793d 	.word	0x0800793d
 80078a0:	08007987 	.word	0x08007987
 80078a4:	080078b5 	.word	0x080078b5
 80078a8:	080078b5 	.word	0x080078b5
 80078ac:	08007929 	.word	0x08007929
 80078b0:	0800793d 	.word	0x0800793d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078ba:	f043 0301 	orr.w	r3, r3, #1
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	18d1      	adds	r1, r2, r3
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d4:	f7ff ff5c 	bl	8007790 <prvInsertTimerInActiveList>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d069      	beq.n	80079b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078ec:	f003 0304 	and.w	r3, r3, #4
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d05e      	beq.n	80079b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	441a      	add	r2, r3
 80078fc:	2300      	movs	r3, #0
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	2300      	movs	r3, #0
 8007902:	2100      	movs	r1, #0
 8007904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007906:	f7ff fe05 	bl	8007514 <xTimerGenericCommand>
 800790a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d14f      	bne.n	80079b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	61bb      	str	r3, [r7, #24]
}
 8007924:	bf00      	nop
 8007926:	e7fe      	b.n	8007926 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800792e:	f023 0301 	bic.w	r3, r3, #1
 8007932:	b2da      	uxtb	r2, r3
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800793a:	e03a      	b.n	80079b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007942:	f043 0301 	orr.w	r3, r3, #1
 8007946:	b2da      	uxtb	r2, r3
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	617b      	str	r3, [r7, #20]
}
 800796e:	bf00      	nop
 8007970:	e7fe      	b.n	8007970 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	18d1      	adds	r1, r2, r3
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007980:	f7ff ff06 	bl	8007790 <prvInsertTimerInActiveList>
					break;
 8007984:	e015      	b.n	80079b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d103      	bne.n	800799c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007996:	f000 fbdb 	bl	8008150 <vPortFree>
 800799a:	e00a      	b.n	80079b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079ae:	e000      	b.n	80079b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079b2:	4b08      	ldr	r3, [pc, #32]	; (80079d4 <prvProcessReceivedCommands+0x1c0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	1d39      	adds	r1, r7, #4
 80079b8:	2200      	movs	r2, #0
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fbec 	bl	8006198 <xQueueReceive>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f47f af2a 	bne.w	800781c <prvProcessReceivedCommands+0x8>
	}
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	3730      	adds	r7, #48	; 0x30
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	24000d48 	.word	0x24000d48

080079d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079de:	e048      	b.n	8007a72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079e0:	4b2d      	ldr	r3, [pc, #180]	; (8007a98 <prvSwitchTimerLists+0xc0>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ea:	4b2b      	ldr	r3, [pc, #172]	; (8007a98 <prvSwitchTimerLists+0xc0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fe f905 	bl	8005c08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d02e      	beq.n	8007a72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d90e      	bls.n	8007a44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a32:	4b19      	ldr	r3, [pc, #100]	; (8007a98 <prvSwitchTimerLists+0xc0>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7fe f8aa 	bl	8005b96 <vListInsert>
 8007a42:	e016      	b.n	8007a72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a44:	2300      	movs	r3, #0
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7ff fd60 	bl	8007514 <xTimerGenericCommand>
 8007a54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	603b      	str	r3, [r7, #0]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a72:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <prvSwitchTimerLists+0xc0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1b1      	bne.n	80079e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <prvSwitchTimerLists+0xc0>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a82:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <prvSwitchTimerLists+0xc4>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <prvSwitchTimerLists+0xc0>)
 8007a88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a8a:	4a04      	ldr	r2, [pc, #16]	; (8007a9c <prvSwitchTimerLists+0xc4>)
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	6013      	str	r3, [r2, #0]
}
 8007a90:	bf00      	nop
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	24000d40 	.word	0x24000d40
 8007a9c:	24000d44 	.word	0x24000d44

08007aa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007aa6:	f000 f965 	bl	8007d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007aaa:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <prvCheckForValidListAndQueue+0x60>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d120      	bne.n	8007af4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ab2:	4814      	ldr	r0, [pc, #80]	; (8007b04 <prvCheckForValidListAndQueue+0x64>)
 8007ab4:	f7fe f81e 	bl	8005af4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ab8:	4813      	ldr	r0, [pc, #76]	; (8007b08 <prvCheckForValidListAndQueue+0x68>)
 8007aba:	f7fe f81b 	bl	8005af4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007abe:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <prvCheckForValidListAndQueue+0x6c>)
 8007ac0:	4a10      	ldr	r2, [pc, #64]	; (8007b04 <prvCheckForValidListAndQueue+0x64>)
 8007ac2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ac4:	4b12      	ldr	r3, [pc, #72]	; (8007b10 <prvCheckForValidListAndQueue+0x70>)
 8007ac6:	4a10      	ldr	r2, [pc, #64]	; (8007b08 <prvCheckForValidListAndQueue+0x68>)
 8007ac8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007aca:	2300      	movs	r3, #0
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <prvCheckForValidListAndQueue+0x74>)
 8007ad0:	4a11      	ldr	r2, [pc, #68]	; (8007b18 <prvCheckForValidListAndQueue+0x78>)
 8007ad2:	2110      	movs	r1, #16
 8007ad4:	200a      	movs	r0, #10
 8007ad6:	f7fe f929 	bl	8005d2c <xQueueGenericCreateStatic>
 8007ada:	4603      	mov	r3, r0
 8007adc:	4a08      	ldr	r2, [pc, #32]	; (8007b00 <prvCheckForValidListAndQueue+0x60>)
 8007ade:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ae0:	4b07      	ldr	r3, [pc, #28]	; (8007b00 <prvCheckForValidListAndQueue+0x60>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ae8:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <prvCheckForValidListAndQueue+0x60>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	490b      	ldr	r1, [pc, #44]	; (8007b1c <prvCheckForValidListAndQueue+0x7c>)
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe fd42 	bl	8006578 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007af4:	f000 f96e 	bl	8007dd4 <vPortExitCritical>
}
 8007af8:	bf00      	nop
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	24000d48 	.word	0x24000d48
 8007b04:	24000d18 	.word	0x24000d18
 8007b08:	24000d2c 	.word	0x24000d2c
 8007b0c:	24000d40 	.word	0x24000d40
 8007b10:	24000d44 	.word	0x24000d44
 8007b14:	24000df4 	.word	0x24000df4
 8007b18:	24000d54 	.word	0x24000d54
 8007b1c:	08008d3c 	.word	0x08008d3c

08007b20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3b04      	subs	r3, #4
 8007b30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3b04      	subs	r3, #4
 8007b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f023 0201 	bic.w	r2, r3, #1
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3b04      	subs	r3, #4
 8007b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b50:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <pxPortInitialiseStack+0x64>)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3b14      	subs	r3, #20
 8007b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3b04      	subs	r3, #4
 8007b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f06f 0202 	mvn.w	r2, #2
 8007b6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3b20      	subs	r3, #32
 8007b74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b76:	68fb      	ldr	r3, [r7, #12]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	08007b89 	.word	0x08007b89

08007b88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b92:	4b12      	ldr	r3, [pc, #72]	; (8007bdc <prvTaskExitError+0x54>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b9a:	d00a      	beq.n	8007bb2 <prvTaskExitError+0x2a>
	__asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	60fb      	str	r3, [r7, #12]
}
 8007bae:	bf00      	nop
 8007bb0:	e7fe      	b.n	8007bb0 <prvTaskExitError+0x28>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	60bb      	str	r3, [r7, #8]
}
 8007bc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bc6:	bf00      	nop
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0fc      	beq.n	8007bc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bce:	bf00      	nop
 8007bd0:	bf00      	nop
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	24000010 	.word	0x24000010

08007be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007be0:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <pxCurrentTCBConst2>)
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	6808      	ldr	r0, [r1, #0]
 8007be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bea:	f380 8809 	msr	PSP, r0
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f380 8811 	msr	BASEPRI, r0
 8007bfa:	4770      	bx	lr
 8007bfc:	f3af 8000 	nop.w

08007c00 <pxCurrentTCBConst2>:
 8007c00:	24000818 	.word	0x24000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop

08007c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c08:	4808      	ldr	r0, [pc, #32]	; (8007c2c <prvPortStartFirstTask+0x24>)
 8007c0a:	6800      	ldr	r0, [r0, #0]
 8007c0c:	6800      	ldr	r0, [r0, #0]
 8007c0e:	f380 8808 	msr	MSP, r0
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8814 	msr	CONTROL, r0
 8007c1a:	b662      	cpsie	i
 8007c1c:	b661      	cpsie	f
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	df00      	svc	0
 8007c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c2a:	bf00      	nop
 8007c2c:	e000ed08 	.word	0xe000ed08

08007c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c36:	4b46      	ldr	r3, [pc, #280]	; (8007d50 <xPortStartScheduler+0x120>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a46      	ldr	r2, [pc, #280]	; (8007d54 <xPortStartScheduler+0x124>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d10a      	bne.n	8007c56 <xPortStartScheduler+0x26>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	613b      	str	r3, [r7, #16]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c56:	4b3e      	ldr	r3, [pc, #248]	; (8007d50 <xPortStartScheduler+0x120>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a3f      	ldr	r2, [pc, #252]	; (8007d58 <xPortStartScheduler+0x128>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d10a      	bne.n	8007c76 <xPortStartScheduler+0x46>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	60fb      	str	r3, [r7, #12]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c76:	4b39      	ldr	r3, [pc, #228]	; (8007d5c <xPortStartScheduler+0x12c>)
 8007c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	22ff      	movs	r2, #255	; 0xff
 8007c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	4b31      	ldr	r3, [pc, #196]	; (8007d60 <xPortStartScheduler+0x130>)
 8007c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c9e:	4b31      	ldr	r3, [pc, #196]	; (8007d64 <xPortStartScheduler+0x134>)
 8007ca0:	2207      	movs	r2, #7
 8007ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ca4:	e009      	b.n	8007cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ca6:	4b2f      	ldr	r3, [pc, #188]	; (8007d64 <xPortStartScheduler+0x134>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	4a2d      	ldr	r2, [pc, #180]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc2:	2b80      	cmp	r3, #128	; 0x80
 8007cc4:	d0ef      	beq.n	8007ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cc6:	4b27      	ldr	r3, [pc, #156]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f1c3 0307 	rsb	r3, r3, #7
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d00a      	beq.n	8007ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	60bb      	str	r3, [r7, #8]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ce8:	4b1e      	ldr	r3, [pc, #120]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	4a1d      	ldr	r2, [pc, #116]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cf2:	4b1c      	ldr	r3, [pc, #112]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cfa:	4a1a      	ldr	r2, [pc, #104]	; (8007d64 <xPortStartScheduler+0x134>)
 8007cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d06:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <xPortStartScheduler+0x138>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a17      	ldr	r2, [pc, #92]	; (8007d68 <xPortStartScheduler+0x138>)
 8007d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <xPortStartScheduler+0x138>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a14      	ldr	r2, [pc, #80]	; (8007d68 <xPortStartScheduler+0x138>)
 8007d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d1e:	f000 f8dd 	bl	8007edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d22:	4b12      	ldr	r3, [pc, #72]	; (8007d6c <xPortStartScheduler+0x13c>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d28:	f000 f8fc 	bl	8007f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d2c:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <xPortStartScheduler+0x140>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a0f      	ldr	r2, [pc, #60]	; (8007d70 <xPortStartScheduler+0x140>)
 8007d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d38:	f7ff ff66 	bl	8007c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d3c:	f7ff f84c 	bl	8006dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8007d40:	f7ff ff22 	bl	8007b88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	e000ed00 	.word	0xe000ed00
 8007d54:	410fc271 	.word	0x410fc271
 8007d58:	410fc270 	.word	0x410fc270
 8007d5c:	e000e400 	.word	0xe000e400
 8007d60:	24000e44 	.word	0x24000e44
 8007d64:	24000e48 	.word	0x24000e48
 8007d68:	e000ed20 	.word	0xe000ed20
 8007d6c:	24000010 	.word	0x24000010
 8007d70:	e000ef34 	.word	0xe000ef34

08007d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	607b      	str	r3, [r7, #4]
}
 8007d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d8e:	4b0f      	ldr	r3, [pc, #60]	; (8007dcc <vPortEnterCritical+0x58>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3301      	adds	r3, #1
 8007d94:	4a0d      	ldr	r2, [pc, #52]	; (8007dcc <vPortEnterCritical+0x58>)
 8007d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d98:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <vPortEnterCritical+0x58>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d10f      	bne.n	8007dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007da0:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <vPortEnterCritical+0x5c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	603b      	str	r3, [r7, #0]
}
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <vPortEnterCritical+0x4a>
	}
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	24000010 	.word	0x24000010
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dda:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <vPortExitCritical+0x50>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10a      	bne.n	8007df8 <vPortExitCritical+0x24>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	607b      	str	r3, [r7, #4]
}
 8007df4:	bf00      	nop
 8007df6:	e7fe      	b.n	8007df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007df8:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <vPortExitCritical+0x50>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <vPortExitCritical+0x50>)
 8007e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e02:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <vPortExitCritical+0x50>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d105      	bne.n	8007e16 <vPortExitCritical+0x42>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	f383 8811 	msr	BASEPRI, r3
}
 8007e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	24000010 	.word	0x24000010
	...

08007e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e30:	f3ef 8009 	mrs	r0, PSP
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <pxCurrentTCBConst>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	f01e 0f10 	tst.w	lr, #16
 8007e40:	bf08      	it	eq
 8007e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4a:	6010      	str	r0, [r2, #0]
 8007e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e54:	f380 8811 	msr	BASEPRI, r0
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f7fe ffba 	bl	8006dd8 <vTaskSwitchContext>
 8007e64:	f04f 0000 	mov.w	r0, #0
 8007e68:	f380 8811 	msr	BASEPRI, r0
 8007e6c:	bc09      	pop	{r0, r3}
 8007e6e:	6819      	ldr	r1, [r3, #0]
 8007e70:	6808      	ldr	r0, [r1, #0]
 8007e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e76:	f01e 0f10 	tst.w	lr, #16
 8007e7a:	bf08      	it	eq
 8007e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e80:	f380 8809 	msr	PSP, r0
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	f3af 8000 	nop.w

08007e90 <pxCurrentTCBConst>:
 8007e90:	24000818 	.word	0x24000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop

08007e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	607b      	str	r3, [r7, #4]
}
 8007eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007eb2:	f7fe fed7 	bl	8006c64 <xTaskIncrementTick>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ebc:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <xPortSysTickHandler+0x40>)
 8007ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f383 8811 	msr	BASEPRI, r3
}
 8007ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <vPortSetupTimerInterrupt+0x34>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <vPortSetupTimerInterrupt+0x38>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eec:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <vPortSetupTimerInterrupt+0x3c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a0a      	ldr	r2, [pc, #40]	; (8007f1c <vPortSetupTimerInterrupt+0x40>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	099b      	lsrs	r3, r3, #6
 8007ef8:	4a09      	ldr	r2, [pc, #36]	; (8007f20 <vPortSetupTimerInterrupt+0x44>)
 8007efa:	3b01      	subs	r3, #1
 8007efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007efe:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <vPortSetupTimerInterrupt+0x34>)
 8007f00:	2207      	movs	r2, #7
 8007f02:	601a      	str	r2, [r3, #0]
}
 8007f04:	bf00      	nop
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	e000e010 	.word	0xe000e010
 8007f14:	e000e018 	.word	0xe000e018
 8007f18:	24000000 	.word	0x24000000
 8007f1c:	10624dd3 	.word	0x10624dd3
 8007f20:	e000e014 	.word	0xe000e014

08007f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f34 <vPortEnableVFP+0x10>
 8007f28:	6801      	ldr	r1, [r0, #0]
 8007f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f2e:	6001      	str	r1, [r0, #0]
 8007f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f32:	bf00      	nop
 8007f34:	e000ed88 	.word	0xe000ed88

08007f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f3e:	f3ef 8305 	mrs	r3, IPSR
 8007f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b0f      	cmp	r3, #15
 8007f48:	d914      	bls.n	8007f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f4a:	4a17      	ldr	r2, [pc, #92]	; (8007fa8 <vPortValidateInterruptPriority+0x70>)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f54:	4b15      	ldr	r3, [pc, #84]	; (8007fac <vPortValidateInterruptPriority+0x74>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	7afa      	ldrb	r2, [r7, #11]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d20a      	bcs.n	8007f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	607b      	str	r3, [r7, #4]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f74:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <vPortValidateInterruptPriority+0x78>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f7c:	4b0d      	ldr	r3, [pc, #52]	; (8007fb4 <vPortValidateInterruptPriority+0x7c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d90a      	bls.n	8007f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	603b      	str	r3, [r7, #0]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <vPortValidateInterruptPriority+0x60>
	}
 8007f9a:	bf00      	nop
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	e000e3f0 	.word	0xe000e3f0
 8007fac:	24000e44 	.word	0x24000e44
 8007fb0:	e000ed0c 	.word	0xe000ed0c
 8007fb4:	24000e48 	.word	0x24000e48

08007fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08a      	sub	sp, #40	; 0x28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fc4:	f7fe fd92 	bl	8006aec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fc8:	4b5b      	ldr	r3, [pc, #364]	; (8008138 <pvPortMalloc+0x180>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fd0:	f000 f920 	bl	8008214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fd4:	4b59      	ldr	r3, [pc, #356]	; (800813c <pvPortMalloc+0x184>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f040 8093 	bne.w	8008108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d01d      	beq.n	8008024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007fe8:	2208      	movs	r2, #8
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4413      	add	r3, r2
 8007fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d014      	beq.n	8008024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f023 0307 	bic.w	r3, r3, #7
 8008000:	3308      	adds	r3, #8
 8008002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <pvPortMalloc+0x6c>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	617b      	str	r3, [r7, #20]
}
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d06e      	beq.n	8008108 <pvPortMalloc+0x150>
 800802a:	4b45      	ldr	r3, [pc, #276]	; (8008140 <pvPortMalloc+0x188>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	d869      	bhi.n	8008108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008034:	4b43      	ldr	r3, [pc, #268]	; (8008144 <pvPortMalloc+0x18c>)
 8008036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008038:	4b42      	ldr	r3, [pc, #264]	; (8008144 <pvPortMalloc+0x18c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800803e:	e004      	b.n	800804a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d903      	bls.n	800805c <pvPortMalloc+0xa4>
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1f1      	bne.n	8008040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800805c:	4b36      	ldr	r3, [pc, #216]	; (8008138 <pvPortMalloc+0x180>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008062:	429a      	cmp	r2, r3
 8008064:	d050      	beq.n	8008108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2208      	movs	r2, #8
 800806c:	4413      	add	r3, r2
 800806e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	1ad2      	subs	r2, r2, r3
 8008080:	2308      	movs	r3, #8
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	429a      	cmp	r2, r3
 8008086:	d91f      	bls.n	80080c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <pvPortMalloc+0xf8>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	613b      	str	r3, [r7, #16]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	1ad2      	subs	r2, r2, r3
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080c2:	69b8      	ldr	r0, [r7, #24]
 80080c4:	f000 f908 	bl	80082d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080c8:	4b1d      	ldr	r3, [pc, #116]	; (8008140 <pvPortMalloc+0x188>)
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	4a1b      	ldr	r2, [pc, #108]	; (8008140 <pvPortMalloc+0x188>)
 80080d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080d6:	4b1a      	ldr	r3, [pc, #104]	; (8008140 <pvPortMalloc+0x188>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	4b1b      	ldr	r3, [pc, #108]	; (8008148 <pvPortMalloc+0x190>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d203      	bcs.n	80080ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080e2:	4b17      	ldr	r3, [pc, #92]	; (8008140 <pvPortMalloc+0x188>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a18      	ldr	r2, [pc, #96]	; (8008148 <pvPortMalloc+0x190>)
 80080e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	4b13      	ldr	r3, [pc, #76]	; (800813c <pvPortMalloc+0x184>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <pvPortMalloc+0x194>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3301      	adds	r3, #1
 8008104:	4a11      	ldr	r2, [pc, #68]	; (800814c <pvPortMalloc+0x194>)
 8008106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008108:	f7fe fcfe 	bl	8006b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	f003 0307 	and.w	r3, r3, #7
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <pvPortMalloc+0x174>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	60fb      	str	r3, [r7, #12]
}
 8008128:	bf00      	nop
 800812a:	e7fe      	b.n	800812a <pvPortMalloc+0x172>
	return pvReturn;
 800812c:	69fb      	ldr	r3, [r7, #28]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3728      	adds	r7, #40	; 0x28
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	24004a54 	.word	0x24004a54
 800813c:	24004a68 	.word	0x24004a68
 8008140:	24004a58 	.word	0x24004a58
 8008144:	24004a4c 	.word	0x24004a4c
 8008148:	24004a5c 	.word	0x24004a5c
 800814c:	24004a60 	.word	0x24004a60

08008150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d04d      	beq.n	80081fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008162:	2308      	movs	r3, #8
 8008164:	425b      	negs	r3, r3
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4413      	add	r3, r2
 800816a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	4b24      	ldr	r3, [pc, #144]	; (8008208 <vPortFree+0xb8>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4013      	ands	r3, r2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10a      	bne.n	8008194 <vPortFree+0x44>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	60fb      	str	r3, [r7, #12]
}
 8008190:	bf00      	nop
 8008192:	e7fe      	b.n	8008192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <vPortFree+0x62>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	60bb      	str	r3, [r7, #8]
}
 80081ae:	bf00      	nop
 80081b0:	e7fe      	b.n	80081b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <vPortFree+0xb8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4013      	ands	r3, r2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01e      	beq.n	80081fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d11a      	bne.n	80081fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	4b0e      	ldr	r3, [pc, #56]	; (8008208 <vPortFree+0xb8>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	43db      	mvns	r3, r3
 80081d2:	401a      	ands	r2, r3
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081d8:	f7fe fc88 	bl	8006aec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	4b0a      	ldr	r3, [pc, #40]	; (800820c <vPortFree+0xbc>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4413      	add	r3, r2
 80081e6:	4a09      	ldr	r2, [pc, #36]	; (800820c <vPortFree+0xbc>)
 80081e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081ea:	6938      	ldr	r0, [r7, #16]
 80081ec:	f000 f874 	bl	80082d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <vPortFree+0xc0>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3301      	adds	r3, #1
 80081f6:	4a06      	ldr	r2, [pc, #24]	; (8008210 <vPortFree+0xc0>)
 80081f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081fa:	f7fe fc85 	bl	8006b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081fe:	bf00      	nop
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	24004a68 	.word	0x24004a68
 800820c:	24004a58 	.word	0x24004a58
 8008210:	24004a64 	.word	0x24004a64

08008214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800821a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800821e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008220:	4b27      	ldr	r3, [pc, #156]	; (80082c0 <prvHeapInit+0xac>)
 8008222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00c      	beq.n	8008248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3307      	adds	r3, #7
 8008232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0307 	bic.w	r3, r3, #7
 800823a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	4a1f      	ldr	r2, [pc, #124]	; (80082c0 <prvHeapInit+0xac>)
 8008244:	4413      	add	r3, r2
 8008246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800824c:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <prvHeapInit+0xb0>)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008252:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <prvHeapInit+0xb0>)
 8008254:	2200      	movs	r2, #0
 8008256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	4413      	add	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008260:	2208      	movs	r2, #8
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0307 	bic.w	r3, r3, #7
 800826e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4a15      	ldr	r2, [pc, #84]	; (80082c8 <prvHeapInit+0xb4>)
 8008274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <prvHeapInit+0xb4>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2200      	movs	r2, #0
 800827c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800827e:	4b12      	ldr	r3, [pc, #72]	; (80082c8 <prvHeapInit+0xb4>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	1ad2      	subs	r2, r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008294:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <prvHeapInit+0xb4>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	4a0a      	ldr	r2, [pc, #40]	; (80082cc <prvHeapInit+0xb8>)
 80082a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <prvHeapInit+0xbc>)
 80082aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082ac:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <prvHeapInit+0xc0>)
 80082ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082b2:	601a      	str	r2, [r3, #0]
}
 80082b4:	bf00      	nop
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	24000e4c 	.word	0x24000e4c
 80082c4:	24004a4c 	.word	0x24004a4c
 80082c8:	24004a54 	.word	0x24004a54
 80082cc:	24004a5c 	.word	0x24004a5c
 80082d0:	24004a58 	.word	0x24004a58
 80082d4:	24004a68 	.word	0x24004a68

080082d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082e0:	4b28      	ldr	r3, [pc, #160]	; (8008384 <prvInsertBlockIntoFreeList+0xac>)
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	e002      	b.n	80082ec <prvInsertBlockIntoFreeList+0x14>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d8f7      	bhi.n	80082e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4413      	add	r3, r2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	429a      	cmp	r2, r3
 8008306:	d108      	bne.n	800831a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	441a      	add	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	441a      	add	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d118      	bne.n	8008360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4b15      	ldr	r3, [pc, #84]	; (8008388 <prvInsertBlockIntoFreeList+0xb0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d00d      	beq.n	8008356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	441a      	add	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	e008      	b.n	8008368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008356:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <prvInsertBlockIntoFreeList+0xb0>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	e003      	b.n	8008368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	429a      	cmp	r2, r3
 800836e:	d002      	beq.n	8008376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	24004a4c 	.word	0x24004a4c
 8008388:	24004a54 	.word	0x24004a54

0800838c <__errno>:
 800838c:	4b01      	ldr	r3, [pc, #4]	; (8008394 <__errno+0x8>)
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	24000014 	.word	0x24000014

08008398 <std>:
 8008398:	2300      	movs	r3, #0
 800839a:	b510      	push	{r4, lr}
 800839c:	4604      	mov	r4, r0
 800839e:	e9c0 3300 	strd	r3, r3, [r0]
 80083a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083a6:	6083      	str	r3, [r0, #8]
 80083a8:	8181      	strh	r1, [r0, #12]
 80083aa:	6643      	str	r3, [r0, #100]	; 0x64
 80083ac:	81c2      	strh	r2, [r0, #14]
 80083ae:	6183      	str	r3, [r0, #24]
 80083b0:	4619      	mov	r1, r3
 80083b2:	2208      	movs	r2, #8
 80083b4:	305c      	adds	r0, #92	; 0x5c
 80083b6:	f000 f91a 	bl	80085ee <memset>
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <std+0x38>)
 80083bc:	6263      	str	r3, [r4, #36]	; 0x24
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <std+0x3c>)
 80083c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <std+0x40>)
 80083c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083c6:	4b05      	ldr	r3, [pc, #20]	; (80083dc <std+0x44>)
 80083c8:	6224      	str	r4, [r4, #32]
 80083ca:	6323      	str	r3, [r4, #48]	; 0x30
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	bf00      	nop
 80083d0:	08008935 	.word	0x08008935
 80083d4:	08008957 	.word	0x08008957
 80083d8:	0800898f 	.word	0x0800898f
 80083dc:	080089b3 	.word	0x080089b3

080083e0 <_cleanup_r>:
 80083e0:	4901      	ldr	r1, [pc, #4]	; (80083e8 <_cleanup_r+0x8>)
 80083e2:	f000 b8af 	b.w	8008544 <_fwalk_reent>
 80083e6:	bf00      	nop
 80083e8:	08008b0d 	.word	0x08008b0d

080083ec <__sfmoreglue>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	1e4a      	subs	r2, r1, #1
 80083f0:	2568      	movs	r5, #104	; 0x68
 80083f2:	4355      	muls	r5, r2
 80083f4:	460e      	mov	r6, r1
 80083f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083fa:	f000 f901 	bl	8008600 <_malloc_r>
 80083fe:	4604      	mov	r4, r0
 8008400:	b140      	cbz	r0, 8008414 <__sfmoreglue+0x28>
 8008402:	2100      	movs	r1, #0
 8008404:	e9c0 1600 	strd	r1, r6, [r0]
 8008408:	300c      	adds	r0, #12
 800840a:	60a0      	str	r0, [r4, #8]
 800840c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008410:	f000 f8ed 	bl	80085ee <memset>
 8008414:	4620      	mov	r0, r4
 8008416:	bd70      	pop	{r4, r5, r6, pc}

08008418 <__sfp_lock_acquire>:
 8008418:	4801      	ldr	r0, [pc, #4]	; (8008420 <__sfp_lock_acquire+0x8>)
 800841a:	f000 b8d8 	b.w	80085ce <__retarget_lock_acquire_recursive>
 800841e:	bf00      	nop
 8008420:	24004c10 	.word	0x24004c10

08008424 <__sfp_lock_release>:
 8008424:	4801      	ldr	r0, [pc, #4]	; (800842c <__sfp_lock_release+0x8>)
 8008426:	f000 b8d3 	b.w	80085d0 <__retarget_lock_release_recursive>
 800842a:	bf00      	nop
 800842c:	24004c10 	.word	0x24004c10

08008430 <__sinit_lock_acquire>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__sinit_lock_acquire+0x8>)
 8008432:	f000 b8cc 	b.w	80085ce <__retarget_lock_acquire_recursive>
 8008436:	bf00      	nop
 8008438:	24004c0b 	.word	0x24004c0b

0800843c <__sinit_lock_release>:
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <__sinit_lock_release+0x8>)
 800843e:	f000 b8c7 	b.w	80085d0 <__retarget_lock_release_recursive>
 8008442:	bf00      	nop
 8008444:	24004c0b 	.word	0x24004c0b

08008448 <__sinit>:
 8008448:	b510      	push	{r4, lr}
 800844a:	4604      	mov	r4, r0
 800844c:	f7ff fff0 	bl	8008430 <__sinit_lock_acquire>
 8008450:	69a3      	ldr	r3, [r4, #24]
 8008452:	b11b      	cbz	r3, 800845c <__sinit+0x14>
 8008454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008458:	f7ff bff0 	b.w	800843c <__sinit_lock_release>
 800845c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008460:	6523      	str	r3, [r4, #80]	; 0x50
 8008462:	4b13      	ldr	r3, [pc, #76]	; (80084b0 <__sinit+0x68>)
 8008464:	4a13      	ldr	r2, [pc, #76]	; (80084b4 <__sinit+0x6c>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	62a2      	str	r2, [r4, #40]	; 0x28
 800846a:	42a3      	cmp	r3, r4
 800846c:	bf04      	itt	eq
 800846e:	2301      	moveq	r3, #1
 8008470:	61a3      	streq	r3, [r4, #24]
 8008472:	4620      	mov	r0, r4
 8008474:	f000 f820 	bl	80084b8 <__sfp>
 8008478:	6060      	str	r0, [r4, #4]
 800847a:	4620      	mov	r0, r4
 800847c:	f000 f81c 	bl	80084b8 <__sfp>
 8008480:	60a0      	str	r0, [r4, #8]
 8008482:	4620      	mov	r0, r4
 8008484:	f000 f818 	bl	80084b8 <__sfp>
 8008488:	2200      	movs	r2, #0
 800848a:	60e0      	str	r0, [r4, #12]
 800848c:	2104      	movs	r1, #4
 800848e:	6860      	ldr	r0, [r4, #4]
 8008490:	f7ff ff82 	bl	8008398 <std>
 8008494:	68a0      	ldr	r0, [r4, #8]
 8008496:	2201      	movs	r2, #1
 8008498:	2109      	movs	r1, #9
 800849a:	f7ff ff7d 	bl	8008398 <std>
 800849e:	68e0      	ldr	r0, [r4, #12]
 80084a0:	2202      	movs	r2, #2
 80084a2:	2112      	movs	r1, #18
 80084a4:	f7ff ff78 	bl	8008398 <std>
 80084a8:	2301      	movs	r3, #1
 80084aa:	61a3      	str	r3, [r4, #24]
 80084ac:	e7d2      	b.n	8008454 <__sinit+0xc>
 80084ae:	bf00      	nop
 80084b0:	08008e24 	.word	0x08008e24
 80084b4:	080083e1 	.word	0x080083e1

080084b8 <__sfp>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	4607      	mov	r7, r0
 80084bc:	f7ff ffac 	bl	8008418 <__sfp_lock_acquire>
 80084c0:	4b1e      	ldr	r3, [pc, #120]	; (800853c <__sfp+0x84>)
 80084c2:	681e      	ldr	r6, [r3, #0]
 80084c4:	69b3      	ldr	r3, [r6, #24]
 80084c6:	b913      	cbnz	r3, 80084ce <__sfp+0x16>
 80084c8:	4630      	mov	r0, r6
 80084ca:	f7ff ffbd 	bl	8008448 <__sinit>
 80084ce:	3648      	adds	r6, #72	; 0x48
 80084d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	d503      	bpl.n	80084e0 <__sfp+0x28>
 80084d8:	6833      	ldr	r3, [r6, #0]
 80084da:	b30b      	cbz	r3, 8008520 <__sfp+0x68>
 80084dc:	6836      	ldr	r6, [r6, #0]
 80084de:	e7f7      	b.n	80084d0 <__sfp+0x18>
 80084e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084e4:	b9d5      	cbnz	r5, 800851c <__sfp+0x64>
 80084e6:	4b16      	ldr	r3, [pc, #88]	; (8008540 <__sfp+0x88>)
 80084e8:	60e3      	str	r3, [r4, #12]
 80084ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084ee:	6665      	str	r5, [r4, #100]	; 0x64
 80084f0:	f000 f86c 	bl	80085cc <__retarget_lock_init_recursive>
 80084f4:	f7ff ff96 	bl	8008424 <__sfp_lock_release>
 80084f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008500:	6025      	str	r5, [r4, #0]
 8008502:	61a5      	str	r5, [r4, #24]
 8008504:	2208      	movs	r2, #8
 8008506:	4629      	mov	r1, r5
 8008508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800850c:	f000 f86f 	bl	80085ee <memset>
 8008510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008518:	4620      	mov	r0, r4
 800851a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800851c:	3468      	adds	r4, #104	; 0x68
 800851e:	e7d9      	b.n	80084d4 <__sfp+0x1c>
 8008520:	2104      	movs	r1, #4
 8008522:	4638      	mov	r0, r7
 8008524:	f7ff ff62 	bl	80083ec <__sfmoreglue>
 8008528:	4604      	mov	r4, r0
 800852a:	6030      	str	r0, [r6, #0]
 800852c:	2800      	cmp	r0, #0
 800852e:	d1d5      	bne.n	80084dc <__sfp+0x24>
 8008530:	f7ff ff78 	bl	8008424 <__sfp_lock_release>
 8008534:	230c      	movs	r3, #12
 8008536:	603b      	str	r3, [r7, #0]
 8008538:	e7ee      	b.n	8008518 <__sfp+0x60>
 800853a:	bf00      	nop
 800853c:	08008e24 	.word	0x08008e24
 8008540:	ffff0001 	.word	0xffff0001

08008544 <_fwalk_reent>:
 8008544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008548:	4606      	mov	r6, r0
 800854a:	4688      	mov	r8, r1
 800854c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008550:	2700      	movs	r7, #0
 8008552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008556:	f1b9 0901 	subs.w	r9, r9, #1
 800855a:	d505      	bpl.n	8008568 <_fwalk_reent+0x24>
 800855c:	6824      	ldr	r4, [r4, #0]
 800855e:	2c00      	cmp	r4, #0
 8008560:	d1f7      	bne.n	8008552 <_fwalk_reent+0xe>
 8008562:	4638      	mov	r0, r7
 8008564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008568:	89ab      	ldrh	r3, [r5, #12]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d907      	bls.n	800857e <_fwalk_reent+0x3a>
 800856e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008572:	3301      	adds	r3, #1
 8008574:	d003      	beq.n	800857e <_fwalk_reent+0x3a>
 8008576:	4629      	mov	r1, r5
 8008578:	4630      	mov	r0, r6
 800857a:	47c0      	blx	r8
 800857c:	4307      	orrs	r7, r0
 800857e:	3568      	adds	r5, #104	; 0x68
 8008580:	e7e9      	b.n	8008556 <_fwalk_reent+0x12>
	...

08008584 <__libc_init_array>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	4d0d      	ldr	r5, [pc, #52]	; (80085bc <__libc_init_array+0x38>)
 8008588:	4c0d      	ldr	r4, [pc, #52]	; (80085c0 <__libc_init_array+0x3c>)
 800858a:	1b64      	subs	r4, r4, r5
 800858c:	10a4      	asrs	r4, r4, #2
 800858e:	2600      	movs	r6, #0
 8008590:	42a6      	cmp	r6, r4
 8008592:	d109      	bne.n	80085a8 <__libc_init_array+0x24>
 8008594:	4d0b      	ldr	r5, [pc, #44]	; (80085c4 <__libc_init_array+0x40>)
 8008596:	4c0c      	ldr	r4, [pc, #48]	; (80085c8 <__libc_init_array+0x44>)
 8008598:	f000 fbb2 	bl	8008d00 <_init>
 800859c:	1b64      	subs	r4, r4, r5
 800859e:	10a4      	asrs	r4, r4, #2
 80085a0:	2600      	movs	r6, #0
 80085a2:	42a6      	cmp	r6, r4
 80085a4:	d105      	bne.n	80085b2 <__libc_init_array+0x2e>
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ac:	4798      	blx	r3
 80085ae:	3601      	adds	r6, #1
 80085b0:	e7ee      	b.n	8008590 <__libc_init_array+0xc>
 80085b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b6:	4798      	blx	r3
 80085b8:	3601      	adds	r6, #1
 80085ba:	e7f2      	b.n	80085a2 <__libc_init_array+0x1e>
 80085bc:	08008e30 	.word	0x08008e30
 80085c0:	08008e30 	.word	0x08008e30
 80085c4:	08008e30 	.word	0x08008e30
 80085c8:	08008e34 	.word	0x08008e34

080085cc <__retarget_lock_init_recursive>:
 80085cc:	4770      	bx	lr

080085ce <__retarget_lock_acquire_recursive>:
 80085ce:	4770      	bx	lr

080085d0 <__retarget_lock_release_recursive>:
 80085d0:	4770      	bx	lr

080085d2 <memcpy>:
 80085d2:	440a      	add	r2, r1
 80085d4:	4291      	cmp	r1, r2
 80085d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085da:	d100      	bne.n	80085de <memcpy+0xc>
 80085dc:	4770      	bx	lr
 80085de:	b510      	push	{r4, lr}
 80085e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085e8:	4291      	cmp	r1, r2
 80085ea:	d1f9      	bne.n	80085e0 <memcpy+0xe>
 80085ec:	bd10      	pop	{r4, pc}

080085ee <memset>:
 80085ee:	4402      	add	r2, r0
 80085f0:	4603      	mov	r3, r0
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d100      	bne.n	80085f8 <memset+0xa>
 80085f6:	4770      	bx	lr
 80085f8:	f803 1b01 	strb.w	r1, [r3], #1
 80085fc:	e7f9      	b.n	80085f2 <memset+0x4>
	...

08008600 <_malloc_r>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	1ccd      	adds	r5, r1, #3
 8008604:	f025 0503 	bic.w	r5, r5, #3
 8008608:	3508      	adds	r5, #8
 800860a:	2d0c      	cmp	r5, #12
 800860c:	bf38      	it	cc
 800860e:	250c      	movcc	r5, #12
 8008610:	2d00      	cmp	r5, #0
 8008612:	4606      	mov	r6, r0
 8008614:	db01      	blt.n	800861a <_malloc_r+0x1a>
 8008616:	42a9      	cmp	r1, r5
 8008618:	d903      	bls.n	8008622 <_malloc_r+0x22>
 800861a:	230c      	movs	r3, #12
 800861c:	6033      	str	r3, [r6, #0]
 800861e:	2000      	movs	r0, #0
 8008620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008622:	f000 faed 	bl	8008c00 <__malloc_lock>
 8008626:	4921      	ldr	r1, [pc, #132]	; (80086ac <_malloc_r+0xac>)
 8008628:	680a      	ldr	r2, [r1, #0]
 800862a:	4614      	mov	r4, r2
 800862c:	b99c      	cbnz	r4, 8008656 <_malloc_r+0x56>
 800862e:	4f20      	ldr	r7, [pc, #128]	; (80086b0 <_malloc_r+0xb0>)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	b923      	cbnz	r3, 800863e <_malloc_r+0x3e>
 8008634:	4621      	mov	r1, r4
 8008636:	4630      	mov	r0, r6
 8008638:	f000 f8a6 	bl	8008788 <_sbrk_r>
 800863c:	6038      	str	r0, [r7, #0]
 800863e:	4629      	mov	r1, r5
 8008640:	4630      	mov	r0, r6
 8008642:	f000 f8a1 	bl	8008788 <_sbrk_r>
 8008646:	1c43      	adds	r3, r0, #1
 8008648:	d123      	bne.n	8008692 <_malloc_r+0x92>
 800864a:	230c      	movs	r3, #12
 800864c:	6033      	str	r3, [r6, #0]
 800864e:	4630      	mov	r0, r6
 8008650:	f000 fadc 	bl	8008c0c <__malloc_unlock>
 8008654:	e7e3      	b.n	800861e <_malloc_r+0x1e>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	1b5b      	subs	r3, r3, r5
 800865a:	d417      	bmi.n	800868c <_malloc_r+0x8c>
 800865c:	2b0b      	cmp	r3, #11
 800865e:	d903      	bls.n	8008668 <_malloc_r+0x68>
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	441c      	add	r4, r3
 8008664:	6025      	str	r5, [r4, #0]
 8008666:	e004      	b.n	8008672 <_malloc_r+0x72>
 8008668:	6863      	ldr	r3, [r4, #4]
 800866a:	42a2      	cmp	r2, r4
 800866c:	bf0c      	ite	eq
 800866e:	600b      	streq	r3, [r1, #0]
 8008670:	6053      	strne	r3, [r2, #4]
 8008672:	4630      	mov	r0, r6
 8008674:	f000 faca 	bl	8008c0c <__malloc_unlock>
 8008678:	f104 000b 	add.w	r0, r4, #11
 800867c:	1d23      	adds	r3, r4, #4
 800867e:	f020 0007 	bic.w	r0, r0, #7
 8008682:	1ac2      	subs	r2, r0, r3
 8008684:	d0cc      	beq.n	8008620 <_malloc_r+0x20>
 8008686:	1a1b      	subs	r3, r3, r0
 8008688:	50a3      	str	r3, [r4, r2]
 800868a:	e7c9      	b.n	8008620 <_malloc_r+0x20>
 800868c:	4622      	mov	r2, r4
 800868e:	6864      	ldr	r4, [r4, #4]
 8008690:	e7cc      	b.n	800862c <_malloc_r+0x2c>
 8008692:	1cc4      	adds	r4, r0, #3
 8008694:	f024 0403 	bic.w	r4, r4, #3
 8008698:	42a0      	cmp	r0, r4
 800869a:	d0e3      	beq.n	8008664 <_malloc_r+0x64>
 800869c:	1a21      	subs	r1, r4, r0
 800869e:	4630      	mov	r0, r6
 80086a0:	f000 f872 	bl	8008788 <_sbrk_r>
 80086a4:	3001      	adds	r0, #1
 80086a6:	d1dd      	bne.n	8008664 <_malloc_r+0x64>
 80086a8:	e7cf      	b.n	800864a <_malloc_r+0x4a>
 80086aa:	bf00      	nop
 80086ac:	24004a6c 	.word	0x24004a6c
 80086b0:	24004a70 	.word	0x24004a70

080086b4 <cleanup_glue>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	460c      	mov	r4, r1
 80086b8:	6809      	ldr	r1, [r1, #0]
 80086ba:	4605      	mov	r5, r0
 80086bc:	b109      	cbz	r1, 80086c2 <cleanup_glue+0xe>
 80086be:	f7ff fff9 	bl	80086b4 <cleanup_glue>
 80086c2:	4621      	mov	r1, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ca:	f000 baa5 	b.w	8008c18 <_free_r>
	...

080086d0 <_reclaim_reent>:
 80086d0:	4b2c      	ldr	r3, [pc, #176]	; (8008784 <_reclaim_reent+0xb4>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4283      	cmp	r3, r0
 80086d6:	b570      	push	{r4, r5, r6, lr}
 80086d8:	4604      	mov	r4, r0
 80086da:	d051      	beq.n	8008780 <_reclaim_reent+0xb0>
 80086dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80086de:	b143      	cbz	r3, 80086f2 <_reclaim_reent+0x22>
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d14a      	bne.n	800877c <_reclaim_reent+0xac>
 80086e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086e8:	6819      	ldr	r1, [r3, #0]
 80086ea:	b111      	cbz	r1, 80086f2 <_reclaim_reent+0x22>
 80086ec:	4620      	mov	r0, r4
 80086ee:	f000 fa93 	bl	8008c18 <_free_r>
 80086f2:	6961      	ldr	r1, [r4, #20]
 80086f4:	b111      	cbz	r1, 80086fc <_reclaim_reent+0x2c>
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 fa8e 	bl	8008c18 <_free_r>
 80086fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80086fe:	b111      	cbz	r1, 8008706 <_reclaim_reent+0x36>
 8008700:	4620      	mov	r0, r4
 8008702:	f000 fa89 	bl	8008c18 <_free_r>
 8008706:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008708:	b111      	cbz	r1, 8008710 <_reclaim_reent+0x40>
 800870a:	4620      	mov	r0, r4
 800870c:	f000 fa84 	bl	8008c18 <_free_r>
 8008710:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008712:	b111      	cbz	r1, 800871a <_reclaim_reent+0x4a>
 8008714:	4620      	mov	r0, r4
 8008716:	f000 fa7f 	bl	8008c18 <_free_r>
 800871a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800871c:	b111      	cbz	r1, 8008724 <_reclaim_reent+0x54>
 800871e:	4620      	mov	r0, r4
 8008720:	f000 fa7a 	bl	8008c18 <_free_r>
 8008724:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008726:	b111      	cbz	r1, 800872e <_reclaim_reent+0x5e>
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fa75 	bl	8008c18 <_free_r>
 800872e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008730:	b111      	cbz	r1, 8008738 <_reclaim_reent+0x68>
 8008732:	4620      	mov	r0, r4
 8008734:	f000 fa70 	bl	8008c18 <_free_r>
 8008738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800873a:	b111      	cbz	r1, 8008742 <_reclaim_reent+0x72>
 800873c:	4620      	mov	r0, r4
 800873e:	f000 fa6b 	bl	8008c18 <_free_r>
 8008742:	69a3      	ldr	r3, [r4, #24]
 8008744:	b1e3      	cbz	r3, 8008780 <_reclaim_reent+0xb0>
 8008746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008748:	4620      	mov	r0, r4
 800874a:	4798      	blx	r3
 800874c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800874e:	b1b9      	cbz	r1, 8008780 <_reclaim_reent+0xb0>
 8008750:	4620      	mov	r0, r4
 8008752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008756:	f7ff bfad 	b.w	80086b4 <cleanup_glue>
 800875a:	5949      	ldr	r1, [r1, r5]
 800875c:	b941      	cbnz	r1, 8008770 <_reclaim_reent+0xa0>
 800875e:	3504      	adds	r5, #4
 8008760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008762:	2d80      	cmp	r5, #128	; 0x80
 8008764:	68d9      	ldr	r1, [r3, #12]
 8008766:	d1f8      	bne.n	800875a <_reclaim_reent+0x8a>
 8008768:	4620      	mov	r0, r4
 800876a:	f000 fa55 	bl	8008c18 <_free_r>
 800876e:	e7ba      	b.n	80086e6 <_reclaim_reent+0x16>
 8008770:	680e      	ldr	r6, [r1, #0]
 8008772:	4620      	mov	r0, r4
 8008774:	f000 fa50 	bl	8008c18 <_free_r>
 8008778:	4631      	mov	r1, r6
 800877a:	e7ef      	b.n	800875c <_reclaim_reent+0x8c>
 800877c:	2500      	movs	r5, #0
 800877e:	e7ef      	b.n	8008760 <_reclaim_reent+0x90>
 8008780:	bd70      	pop	{r4, r5, r6, pc}
 8008782:	bf00      	nop
 8008784:	24000014 	.word	0x24000014

08008788 <_sbrk_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d06      	ldr	r5, [pc, #24]	; (80087a4 <_sbrk_r+0x1c>)
 800878c:	2300      	movs	r3, #0
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	602b      	str	r3, [r5, #0]
 8008794:	f7f8 faa2 	bl	8000cdc <_sbrk>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_sbrk_r+0x1a>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_sbrk_r+0x1a>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	24004c14 	.word	0x24004c14

080087a8 <setvbuf>:
 80087a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087ac:	461d      	mov	r5, r3
 80087ae:	4b5d      	ldr	r3, [pc, #372]	; (8008924 <setvbuf+0x17c>)
 80087b0:	681f      	ldr	r7, [r3, #0]
 80087b2:	4604      	mov	r4, r0
 80087b4:	460e      	mov	r6, r1
 80087b6:	4690      	mov	r8, r2
 80087b8:	b127      	cbz	r7, 80087c4 <setvbuf+0x1c>
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	b913      	cbnz	r3, 80087c4 <setvbuf+0x1c>
 80087be:	4638      	mov	r0, r7
 80087c0:	f7ff fe42 	bl	8008448 <__sinit>
 80087c4:	4b58      	ldr	r3, [pc, #352]	; (8008928 <setvbuf+0x180>)
 80087c6:	429c      	cmp	r4, r3
 80087c8:	d167      	bne.n	800889a <setvbuf+0xf2>
 80087ca:	687c      	ldr	r4, [r7, #4]
 80087cc:	f1b8 0f02 	cmp.w	r8, #2
 80087d0:	d006      	beq.n	80087e0 <setvbuf+0x38>
 80087d2:	f1b8 0f01 	cmp.w	r8, #1
 80087d6:	f200 809f 	bhi.w	8008918 <setvbuf+0x170>
 80087da:	2d00      	cmp	r5, #0
 80087dc:	f2c0 809c 	blt.w	8008918 <setvbuf+0x170>
 80087e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087e2:	07db      	lsls	r3, r3, #31
 80087e4:	d405      	bmi.n	80087f2 <setvbuf+0x4a>
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	0598      	lsls	r0, r3, #22
 80087ea:	d402      	bmi.n	80087f2 <setvbuf+0x4a>
 80087ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ee:	f7ff feee 	bl	80085ce <__retarget_lock_acquire_recursive>
 80087f2:	4621      	mov	r1, r4
 80087f4:	4638      	mov	r0, r7
 80087f6:	f000 f989 	bl	8008b0c <_fflush_r>
 80087fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087fc:	b141      	cbz	r1, 8008810 <setvbuf+0x68>
 80087fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008802:	4299      	cmp	r1, r3
 8008804:	d002      	beq.n	800880c <setvbuf+0x64>
 8008806:	4638      	mov	r0, r7
 8008808:	f000 fa06 	bl	8008c18 <_free_r>
 800880c:	2300      	movs	r3, #0
 800880e:	6363      	str	r3, [r4, #52]	; 0x34
 8008810:	2300      	movs	r3, #0
 8008812:	61a3      	str	r3, [r4, #24]
 8008814:	6063      	str	r3, [r4, #4]
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	0619      	lsls	r1, r3, #24
 800881a:	d503      	bpl.n	8008824 <setvbuf+0x7c>
 800881c:	6921      	ldr	r1, [r4, #16]
 800881e:	4638      	mov	r0, r7
 8008820:	f000 f9fa 	bl	8008c18 <_free_r>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800882a:	f023 0303 	bic.w	r3, r3, #3
 800882e:	f1b8 0f02 	cmp.w	r8, #2
 8008832:	81a3      	strh	r3, [r4, #12]
 8008834:	d06c      	beq.n	8008910 <setvbuf+0x168>
 8008836:	ab01      	add	r3, sp, #4
 8008838:	466a      	mov	r2, sp
 800883a:	4621      	mov	r1, r4
 800883c:	4638      	mov	r0, r7
 800883e:	f000 f9b3 	bl	8008ba8 <__swhatbuf_r>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	4318      	orrs	r0, r3
 8008846:	81a0      	strh	r0, [r4, #12]
 8008848:	2d00      	cmp	r5, #0
 800884a:	d130      	bne.n	80088ae <setvbuf+0x106>
 800884c:	9d00      	ldr	r5, [sp, #0]
 800884e:	4628      	mov	r0, r5
 8008850:	f000 f9ce 	bl	8008bf0 <malloc>
 8008854:	4606      	mov	r6, r0
 8008856:	2800      	cmp	r0, #0
 8008858:	d155      	bne.n	8008906 <setvbuf+0x15e>
 800885a:	f8dd 9000 	ldr.w	r9, [sp]
 800885e:	45a9      	cmp	r9, r5
 8008860:	d14a      	bne.n	80088f8 <setvbuf+0x150>
 8008862:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008866:	2200      	movs	r2, #0
 8008868:	60a2      	str	r2, [r4, #8]
 800886a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800886e:	6022      	str	r2, [r4, #0]
 8008870:	6122      	str	r2, [r4, #16]
 8008872:	2201      	movs	r2, #1
 8008874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008878:	6162      	str	r2, [r4, #20]
 800887a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800887c:	f043 0302 	orr.w	r3, r3, #2
 8008880:	07d2      	lsls	r2, r2, #31
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	d405      	bmi.n	8008892 <setvbuf+0xea>
 8008886:	f413 7f00 	tst.w	r3, #512	; 0x200
 800888a:	d102      	bne.n	8008892 <setvbuf+0xea>
 800888c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800888e:	f7ff fe9f 	bl	80085d0 <__retarget_lock_release_recursive>
 8008892:	4628      	mov	r0, r5
 8008894:	b003      	add	sp, #12
 8008896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800889a:	4b24      	ldr	r3, [pc, #144]	; (800892c <setvbuf+0x184>)
 800889c:	429c      	cmp	r4, r3
 800889e:	d101      	bne.n	80088a4 <setvbuf+0xfc>
 80088a0:	68bc      	ldr	r4, [r7, #8]
 80088a2:	e793      	b.n	80087cc <setvbuf+0x24>
 80088a4:	4b22      	ldr	r3, [pc, #136]	; (8008930 <setvbuf+0x188>)
 80088a6:	429c      	cmp	r4, r3
 80088a8:	bf08      	it	eq
 80088aa:	68fc      	ldreq	r4, [r7, #12]
 80088ac:	e78e      	b.n	80087cc <setvbuf+0x24>
 80088ae:	2e00      	cmp	r6, #0
 80088b0:	d0cd      	beq.n	800884e <setvbuf+0xa6>
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	b913      	cbnz	r3, 80088bc <setvbuf+0x114>
 80088b6:	4638      	mov	r0, r7
 80088b8:	f7ff fdc6 	bl	8008448 <__sinit>
 80088bc:	f1b8 0f01 	cmp.w	r8, #1
 80088c0:	bf08      	it	eq
 80088c2:	89a3      	ldrheq	r3, [r4, #12]
 80088c4:	6026      	str	r6, [r4, #0]
 80088c6:	bf04      	itt	eq
 80088c8:	f043 0301 	orreq.w	r3, r3, #1
 80088cc:	81a3      	strheq	r3, [r4, #12]
 80088ce:	89a2      	ldrh	r2, [r4, #12]
 80088d0:	f012 0308 	ands.w	r3, r2, #8
 80088d4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80088d8:	d01c      	beq.n	8008914 <setvbuf+0x16c>
 80088da:	07d3      	lsls	r3, r2, #31
 80088dc:	bf41      	itttt	mi
 80088de:	2300      	movmi	r3, #0
 80088e0:	426d      	negmi	r5, r5
 80088e2:	60a3      	strmi	r3, [r4, #8]
 80088e4:	61a5      	strmi	r5, [r4, #24]
 80088e6:	bf58      	it	pl
 80088e8:	60a5      	strpl	r5, [r4, #8]
 80088ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80088ec:	f015 0501 	ands.w	r5, r5, #1
 80088f0:	d115      	bne.n	800891e <setvbuf+0x176>
 80088f2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80088f6:	e7c8      	b.n	800888a <setvbuf+0xe2>
 80088f8:	4648      	mov	r0, r9
 80088fa:	f000 f979 	bl	8008bf0 <malloc>
 80088fe:	4606      	mov	r6, r0
 8008900:	2800      	cmp	r0, #0
 8008902:	d0ae      	beq.n	8008862 <setvbuf+0xba>
 8008904:	464d      	mov	r5, r9
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	e7d0      	b.n	80088b2 <setvbuf+0x10a>
 8008910:	2500      	movs	r5, #0
 8008912:	e7a8      	b.n	8008866 <setvbuf+0xbe>
 8008914:	60a3      	str	r3, [r4, #8]
 8008916:	e7e8      	b.n	80088ea <setvbuf+0x142>
 8008918:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800891c:	e7b9      	b.n	8008892 <setvbuf+0xea>
 800891e:	2500      	movs	r5, #0
 8008920:	e7b7      	b.n	8008892 <setvbuf+0xea>
 8008922:	bf00      	nop
 8008924:	24000014 	.word	0x24000014
 8008928:	08008de4 	.word	0x08008de4
 800892c:	08008e04 	.word	0x08008e04
 8008930:	08008dc4 	.word	0x08008dc4

08008934 <__sread>:
 8008934:	b510      	push	{r4, lr}
 8008936:	460c      	mov	r4, r1
 8008938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800893c:	f000 f9bc 	bl	8008cb8 <_read_r>
 8008940:	2800      	cmp	r0, #0
 8008942:	bfab      	itete	ge
 8008944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008946:	89a3      	ldrhlt	r3, [r4, #12]
 8008948:	181b      	addge	r3, r3, r0
 800894a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800894e:	bfac      	ite	ge
 8008950:	6563      	strge	r3, [r4, #84]	; 0x54
 8008952:	81a3      	strhlt	r3, [r4, #12]
 8008954:	bd10      	pop	{r4, pc}

08008956 <__swrite>:
 8008956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800895a:	461f      	mov	r7, r3
 800895c:	898b      	ldrh	r3, [r1, #12]
 800895e:	05db      	lsls	r3, r3, #23
 8008960:	4605      	mov	r5, r0
 8008962:	460c      	mov	r4, r1
 8008964:	4616      	mov	r6, r2
 8008966:	d505      	bpl.n	8008974 <__swrite+0x1e>
 8008968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896c:	2302      	movs	r3, #2
 800896e:	2200      	movs	r2, #0
 8008970:	f000 f908 	bl	8008b84 <_lseek_r>
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800897a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	4632      	mov	r2, r6
 8008982:	463b      	mov	r3, r7
 8008984:	4628      	mov	r0, r5
 8008986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800898a:	f000 b817 	b.w	80089bc <_write_r>

0800898e <__sseek>:
 800898e:	b510      	push	{r4, lr}
 8008990:	460c      	mov	r4, r1
 8008992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008996:	f000 f8f5 	bl	8008b84 <_lseek_r>
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	bf15      	itete	ne
 80089a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80089a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089aa:	81a3      	strheq	r3, [r4, #12]
 80089ac:	bf18      	it	ne
 80089ae:	81a3      	strhne	r3, [r4, #12]
 80089b0:	bd10      	pop	{r4, pc}

080089b2 <__sclose>:
 80089b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b6:	f000 b813 	b.w	80089e0 <_close_r>
	...

080089bc <_write_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4d07      	ldr	r5, [pc, #28]	; (80089dc <_write_r+0x20>)
 80089c0:	4604      	mov	r4, r0
 80089c2:	4608      	mov	r0, r1
 80089c4:	4611      	mov	r1, r2
 80089c6:	2200      	movs	r2, #0
 80089c8:	602a      	str	r2, [r5, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	f7f8 f844 	bl	8000a58 <_write>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_write_r+0x1e>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_write_r+0x1e>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	24004c14 	.word	0x24004c14

080089e0 <_close_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4d06      	ldr	r5, [pc, #24]	; (80089fc <_close_r+0x1c>)
 80089e4:	2300      	movs	r3, #0
 80089e6:	4604      	mov	r4, r0
 80089e8:	4608      	mov	r0, r1
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	f7f8 f860 	bl	8000ab0 <_close>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_close_r+0x1a>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_close_r+0x1a>
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	24004c14 	.word	0x24004c14

08008a00 <__sflush_r>:
 8008a00:	898a      	ldrh	r2, [r1, #12]
 8008a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a06:	4605      	mov	r5, r0
 8008a08:	0710      	lsls	r0, r2, #28
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	d458      	bmi.n	8008ac0 <__sflush_r+0xc0>
 8008a0e:	684b      	ldr	r3, [r1, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dc05      	bgt.n	8008a20 <__sflush_r+0x20>
 8008a14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dc02      	bgt.n	8008a20 <__sflush_r+0x20>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a22:	2e00      	cmp	r6, #0
 8008a24:	d0f9      	beq.n	8008a1a <__sflush_r+0x1a>
 8008a26:	2300      	movs	r3, #0
 8008a28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a2c:	682f      	ldr	r7, [r5, #0]
 8008a2e:	602b      	str	r3, [r5, #0]
 8008a30:	d032      	beq.n	8008a98 <__sflush_r+0x98>
 8008a32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a34:	89a3      	ldrh	r3, [r4, #12]
 8008a36:	075a      	lsls	r2, r3, #29
 8008a38:	d505      	bpl.n	8008a46 <__sflush_r+0x46>
 8008a3a:	6863      	ldr	r3, [r4, #4]
 8008a3c:	1ac0      	subs	r0, r0, r3
 8008a3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a40:	b10b      	cbz	r3, 8008a46 <__sflush_r+0x46>
 8008a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a44:	1ac0      	subs	r0, r0, r3
 8008a46:	2300      	movs	r3, #0
 8008a48:	4602      	mov	r2, r0
 8008a4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a4c:	6a21      	ldr	r1, [r4, #32]
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b0      	blx	r6
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	d106      	bne.n	8008a66 <__sflush_r+0x66>
 8008a58:	6829      	ldr	r1, [r5, #0]
 8008a5a:	291d      	cmp	r1, #29
 8008a5c:	d82c      	bhi.n	8008ab8 <__sflush_r+0xb8>
 8008a5e:	4a2a      	ldr	r2, [pc, #168]	; (8008b08 <__sflush_r+0x108>)
 8008a60:	40ca      	lsrs	r2, r1
 8008a62:	07d6      	lsls	r6, r2, #31
 8008a64:	d528      	bpl.n	8008ab8 <__sflush_r+0xb8>
 8008a66:	2200      	movs	r2, #0
 8008a68:	6062      	str	r2, [r4, #4]
 8008a6a:	04d9      	lsls	r1, r3, #19
 8008a6c:	6922      	ldr	r2, [r4, #16]
 8008a6e:	6022      	str	r2, [r4, #0]
 8008a70:	d504      	bpl.n	8008a7c <__sflush_r+0x7c>
 8008a72:	1c42      	adds	r2, r0, #1
 8008a74:	d101      	bne.n	8008a7a <__sflush_r+0x7a>
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	b903      	cbnz	r3, 8008a7c <__sflush_r+0x7c>
 8008a7a:	6560      	str	r0, [r4, #84]	; 0x54
 8008a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a7e:	602f      	str	r7, [r5, #0]
 8008a80:	2900      	cmp	r1, #0
 8008a82:	d0ca      	beq.n	8008a1a <__sflush_r+0x1a>
 8008a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a88:	4299      	cmp	r1, r3
 8008a8a:	d002      	beq.n	8008a92 <__sflush_r+0x92>
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f000 f8c3 	bl	8008c18 <_free_r>
 8008a92:	2000      	movs	r0, #0
 8008a94:	6360      	str	r0, [r4, #52]	; 0x34
 8008a96:	e7c1      	b.n	8008a1c <__sflush_r+0x1c>
 8008a98:	6a21      	ldr	r1, [r4, #32]
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b0      	blx	r6
 8008aa0:	1c41      	adds	r1, r0, #1
 8008aa2:	d1c7      	bne.n	8008a34 <__sflush_r+0x34>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0c4      	beq.n	8008a34 <__sflush_r+0x34>
 8008aaa:	2b1d      	cmp	r3, #29
 8008aac:	d001      	beq.n	8008ab2 <__sflush_r+0xb2>
 8008aae:	2b16      	cmp	r3, #22
 8008ab0:	d101      	bne.n	8008ab6 <__sflush_r+0xb6>
 8008ab2:	602f      	str	r7, [r5, #0]
 8008ab4:	e7b1      	b.n	8008a1a <__sflush_r+0x1a>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	e7ad      	b.n	8008a1c <__sflush_r+0x1c>
 8008ac0:	690f      	ldr	r7, [r1, #16]
 8008ac2:	2f00      	cmp	r7, #0
 8008ac4:	d0a9      	beq.n	8008a1a <__sflush_r+0x1a>
 8008ac6:	0793      	lsls	r3, r2, #30
 8008ac8:	680e      	ldr	r6, [r1, #0]
 8008aca:	bf08      	it	eq
 8008acc:	694b      	ldreq	r3, [r1, #20]
 8008ace:	600f      	str	r7, [r1, #0]
 8008ad0:	bf18      	it	ne
 8008ad2:	2300      	movne	r3, #0
 8008ad4:	eba6 0807 	sub.w	r8, r6, r7
 8008ad8:	608b      	str	r3, [r1, #8]
 8008ada:	f1b8 0f00 	cmp.w	r8, #0
 8008ade:	dd9c      	ble.n	8008a1a <__sflush_r+0x1a>
 8008ae0:	6a21      	ldr	r1, [r4, #32]
 8008ae2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ae4:	4643      	mov	r3, r8
 8008ae6:	463a      	mov	r2, r7
 8008ae8:	4628      	mov	r0, r5
 8008aea:	47b0      	blx	r6
 8008aec:	2800      	cmp	r0, #0
 8008aee:	dc06      	bgt.n	8008afe <__sflush_r+0xfe>
 8008af0:	89a3      	ldrh	r3, [r4, #12]
 8008af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008af6:	81a3      	strh	r3, [r4, #12]
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008afc:	e78e      	b.n	8008a1c <__sflush_r+0x1c>
 8008afe:	4407      	add	r7, r0
 8008b00:	eba8 0800 	sub.w	r8, r8, r0
 8008b04:	e7e9      	b.n	8008ada <__sflush_r+0xda>
 8008b06:	bf00      	nop
 8008b08:	20400001 	.word	0x20400001

08008b0c <_fflush_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	690b      	ldr	r3, [r1, #16]
 8008b10:	4605      	mov	r5, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b913      	cbnz	r3, 8008b1c <_fflush_r+0x10>
 8008b16:	2500      	movs	r5, #0
 8008b18:	4628      	mov	r0, r5
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	b118      	cbz	r0, 8008b26 <_fflush_r+0x1a>
 8008b1e:	6983      	ldr	r3, [r0, #24]
 8008b20:	b90b      	cbnz	r3, 8008b26 <_fflush_r+0x1a>
 8008b22:	f7ff fc91 	bl	8008448 <__sinit>
 8008b26:	4b14      	ldr	r3, [pc, #80]	; (8008b78 <_fflush_r+0x6c>)
 8008b28:	429c      	cmp	r4, r3
 8008b2a:	d11b      	bne.n	8008b64 <_fflush_r+0x58>
 8008b2c:	686c      	ldr	r4, [r5, #4]
 8008b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0ef      	beq.n	8008b16 <_fflush_r+0xa>
 8008b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b38:	07d0      	lsls	r0, r2, #31
 8008b3a:	d404      	bmi.n	8008b46 <_fflush_r+0x3a>
 8008b3c:	0599      	lsls	r1, r3, #22
 8008b3e:	d402      	bmi.n	8008b46 <_fflush_r+0x3a>
 8008b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b42:	f7ff fd44 	bl	80085ce <__retarget_lock_acquire_recursive>
 8008b46:	4628      	mov	r0, r5
 8008b48:	4621      	mov	r1, r4
 8008b4a:	f7ff ff59 	bl	8008a00 <__sflush_r>
 8008b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b50:	07da      	lsls	r2, r3, #31
 8008b52:	4605      	mov	r5, r0
 8008b54:	d4e0      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	059b      	lsls	r3, r3, #22
 8008b5a:	d4dd      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b5e:	f7ff fd37 	bl	80085d0 <__retarget_lock_release_recursive>
 8008b62:	e7d9      	b.n	8008b18 <_fflush_r+0xc>
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <_fflush_r+0x70>)
 8008b66:	429c      	cmp	r4, r3
 8008b68:	d101      	bne.n	8008b6e <_fflush_r+0x62>
 8008b6a:	68ac      	ldr	r4, [r5, #8]
 8008b6c:	e7df      	b.n	8008b2e <_fflush_r+0x22>
 8008b6e:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <_fflush_r+0x74>)
 8008b70:	429c      	cmp	r4, r3
 8008b72:	bf08      	it	eq
 8008b74:	68ec      	ldreq	r4, [r5, #12]
 8008b76:	e7da      	b.n	8008b2e <_fflush_r+0x22>
 8008b78:	08008de4 	.word	0x08008de4
 8008b7c:	08008e04 	.word	0x08008e04
 8008b80:	08008dc4 	.word	0x08008dc4

08008b84 <_lseek_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d07      	ldr	r5, [pc, #28]	; (8008ba4 <_lseek_r+0x20>)
 8008b88:	4604      	mov	r4, r0
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	602a      	str	r2, [r5, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f7f7 ffa3 	bl	8000ade <_lseek>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_lseek_r+0x1e>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_lseek_r+0x1e>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	24004c14 	.word	0x24004c14

08008ba8 <__swhatbuf_r>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	460e      	mov	r6, r1
 8008bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	b096      	sub	sp, #88	; 0x58
 8008bb4:	4614      	mov	r4, r2
 8008bb6:	461d      	mov	r5, r3
 8008bb8:	da07      	bge.n	8008bca <__swhatbuf_r+0x22>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	89b3      	ldrh	r3, [r6, #12]
 8008bc0:	061a      	lsls	r2, r3, #24
 8008bc2:	d410      	bmi.n	8008be6 <__swhatbuf_r+0x3e>
 8008bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bc8:	e00e      	b.n	8008be8 <__swhatbuf_r+0x40>
 8008bca:	466a      	mov	r2, sp
 8008bcc:	f000 f886 	bl	8008cdc <_fstat_r>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	dbf2      	blt.n	8008bba <__swhatbuf_r+0x12>
 8008bd4:	9a01      	ldr	r2, [sp, #4]
 8008bd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bde:	425a      	negs	r2, r3
 8008be0:	415a      	adcs	r2, r3
 8008be2:	602a      	str	r2, [r5, #0]
 8008be4:	e7ee      	b.n	8008bc4 <__swhatbuf_r+0x1c>
 8008be6:	2340      	movs	r3, #64	; 0x40
 8008be8:	2000      	movs	r0, #0
 8008bea:	6023      	str	r3, [r4, #0]
 8008bec:	b016      	add	sp, #88	; 0x58
 8008bee:	bd70      	pop	{r4, r5, r6, pc}

08008bf0 <malloc>:
 8008bf0:	4b02      	ldr	r3, [pc, #8]	; (8008bfc <malloc+0xc>)
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	f7ff bd03 	b.w	8008600 <_malloc_r>
 8008bfa:	bf00      	nop
 8008bfc:	24000014 	.word	0x24000014

08008c00 <__malloc_lock>:
 8008c00:	4801      	ldr	r0, [pc, #4]	; (8008c08 <__malloc_lock+0x8>)
 8008c02:	f7ff bce4 	b.w	80085ce <__retarget_lock_acquire_recursive>
 8008c06:	bf00      	nop
 8008c08:	24004c0c 	.word	0x24004c0c

08008c0c <__malloc_unlock>:
 8008c0c:	4801      	ldr	r0, [pc, #4]	; (8008c14 <__malloc_unlock+0x8>)
 8008c0e:	f7ff bcdf 	b.w	80085d0 <__retarget_lock_release_recursive>
 8008c12:	bf00      	nop
 8008c14:	24004c0c 	.word	0x24004c0c

08008c18 <_free_r>:
 8008c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c1a:	2900      	cmp	r1, #0
 8008c1c:	d048      	beq.n	8008cb0 <_free_r+0x98>
 8008c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c22:	9001      	str	r0, [sp, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f1a1 0404 	sub.w	r4, r1, #4
 8008c2a:	bfb8      	it	lt
 8008c2c:	18e4      	addlt	r4, r4, r3
 8008c2e:	f7ff ffe7 	bl	8008c00 <__malloc_lock>
 8008c32:	4a20      	ldr	r2, [pc, #128]	; (8008cb4 <_free_r+0x9c>)
 8008c34:	9801      	ldr	r0, [sp, #4]
 8008c36:	6813      	ldr	r3, [r2, #0]
 8008c38:	4615      	mov	r5, r2
 8008c3a:	b933      	cbnz	r3, 8008c4a <_free_r+0x32>
 8008c3c:	6063      	str	r3, [r4, #4]
 8008c3e:	6014      	str	r4, [r2, #0]
 8008c40:	b003      	add	sp, #12
 8008c42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c46:	f7ff bfe1 	b.w	8008c0c <__malloc_unlock>
 8008c4a:	42a3      	cmp	r3, r4
 8008c4c:	d90b      	bls.n	8008c66 <_free_r+0x4e>
 8008c4e:	6821      	ldr	r1, [r4, #0]
 8008c50:	1862      	adds	r2, r4, r1
 8008c52:	4293      	cmp	r3, r2
 8008c54:	bf04      	itt	eq
 8008c56:	681a      	ldreq	r2, [r3, #0]
 8008c58:	685b      	ldreq	r3, [r3, #4]
 8008c5a:	6063      	str	r3, [r4, #4]
 8008c5c:	bf04      	itt	eq
 8008c5e:	1852      	addeq	r2, r2, r1
 8008c60:	6022      	streq	r2, [r4, #0]
 8008c62:	602c      	str	r4, [r5, #0]
 8008c64:	e7ec      	b.n	8008c40 <_free_r+0x28>
 8008c66:	461a      	mov	r2, r3
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	b10b      	cbz	r3, 8008c70 <_free_r+0x58>
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	d9fa      	bls.n	8008c66 <_free_r+0x4e>
 8008c70:	6811      	ldr	r1, [r2, #0]
 8008c72:	1855      	adds	r5, r2, r1
 8008c74:	42a5      	cmp	r5, r4
 8008c76:	d10b      	bne.n	8008c90 <_free_r+0x78>
 8008c78:	6824      	ldr	r4, [r4, #0]
 8008c7a:	4421      	add	r1, r4
 8008c7c:	1854      	adds	r4, r2, r1
 8008c7e:	42a3      	cmp	r3, r4
 8008c80:	6011      	str	r1, [r2, #0]
 8008c82:	d1dd      	bne.n	8008c40 <_free_r+0x28>
 8008c84:	681c      	ldr	r4, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	6053      	str	r3, [r2, #4]
 8008c8a:	4421      	add	r1, r4
 8008c8c:	6011      	str	r1, [r2, #0]
 8008c8e:	e7d7      	b.n	8008c40 <_free_r+0x28>
 8008c90:	d902      	bls.n	8008c98 <_free_r+0x80>
 8008c92:	230c      	movs	r3, #12
 8008c94:	6003      	str	r3, [r0, #0]
 8008c96:	e7d3      	b.n	8008c40 <_free_r+0x28>
 8008c98:	6825      	ldr	r5, [r4, #0]
 8008c9a:	1961      	adds	r1, r4, r5
 8008c9c:	428b      	cmp	r3, r1
 8008c9e:	bf04      	itt	eq
 8008ca0:	6819      	ldreq	r1, [r3, #0]
 8008ca2:	685b      	ldreq	r3, [r3, #4]
 8008ca4:	6063      	str	r3, [r4, #4]
 8008ca6:	bf04      	itt	eq
 8008ca8:	1949      	addeq	r1, r1, r5
 8008caa:	6021      	streq	r1, [r4, #0]
 8008cac:	6054      	str	r4, [r2, #4]
 8008cae:	e7c7      	b.n	8008c40 <_free_r+0x28>
 8008cb0:	b003      	add	sp, #12
 8008cb2:	bd30      	pop	{r4, r5, pc}
 8008cb4:	24004a6c 	.word	0x24004a6c

08008cb8 <_read_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d07      	ldr	r5, [pc, #28]	; (8008cd8 <_read_r+0x20>)
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	4608      	mov	r0, r1
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	602a      	str	r2, [r5, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f7f7 ff1a 	bl	8000b00 <_read>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_read_r+0x1e>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_read_r+0x1e>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	24004c14 	.word	0x24004c14

08008cdc <_fstat_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d07      	ldr	r5, [pc, #28]	; (8008cfc <_fstat_r+0x20>)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	f7f7 ff31 	bl	8000b50 <_fstat>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	d102      	bne.n	8008cf8 <_fstat_r+0x1c>
 8008cf2:	682b      	ldr	r3, [r5, #0]
 8008cf4:	b103      	cbz	r3, 8008cf8 <_fstat_r+0x1c>
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
 8008cfa:	bf00      	nop
 8008cfc:	24004c14 	.word	0x24004c14

08008d00 <_init>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	bf00      	nop
 8008d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d06:	bc08      	pop	{r3}
 8008d08:	469e      	mov	lr, r3
 8008d0a:	4770      	bx	lr

08008d0c <_fini>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	bf00      	nop
 8008d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d12:	bc08      	pop	{r3}
 8008d14:	469e      	mov	lr, r3
 8008d16:	4770      	bx	lr
